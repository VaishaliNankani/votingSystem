package com.oracle.oci.votingservice.dao;
import java.sql.Connection;
import java.sql.DriverManager;

import oracle.soda.rdbms.OracleRDBMSClient;

import oracle.soda.OracleDatabase;
import oracle.soda.OracleCursor;
import oracle.soda.OracleCollection;
import oracle.soda.OracleDocument;
import oracle.soda.OracleException;

import java.util.Properties;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.oracle.oci.votingservice.domain.VoteData;

import oracle.jdbc.OracleConnection;

public class testSODA {
  public static void soda() {
   
    // SODA works on top of a regular JDBC connection.
    // Set up the connection string: replace hostName, port, and serviceName
    // with the info for your Oracle RDBMS instance
    String url = "jdbc:oracle:thin:@db202010231723_medium?TNS_ADMIN=/home/vagrant/wallet/";

    Properties props = new Properties();

    // Replace with your schemaName and password
    props.setProperty("user", "admin");
    props.setProperty("password", "Passwordoci*30");

    OracleConnection conn = null;

    try {
        // Get a JDBC connection to an Oracle instance
        conn = (OracleConnection) DriverManager.getConnection(url, props);

        // Enable JDBC implicit statement caching
        conn.setImplicitCachingEnabled(true);
        conn.setStatementCacheSize(50);

        // Get an OracleRDBMSClient - starting point of SODA for 
        // Java application
        OracleRDBMSClient cl = new OracleRDBMSClient();

        // Get a database
        OracleDatabase db = cl.getDatabase(conn);

        // Create a collection with the name "MyFirstJSONCollection".
        // Note: Collection names are case-sensitive.
        // A table with the name "MyFirstJSONCollection" will be
        // created in the RDBMS to store the collection
        System.out.println("hello");
        OracleCollection col = db.admin().createCollection("MyFirstJSONCollection");
        System.out.println("hello");
        // Create a few JSON documents, representing
        // users and the number of friends they have
        ObjectMapper objectMapper = new ObjectMapper();
         VoteData voteData =  new  VoteData(1234,"vaishali","delhi",7838076784L,false);
         String json = objectMapper.writeValueAsString(voteData);
       
        // OracleDocument  doc1 = db.createDocumentFromString("1234",voteData.toString());
         
         //OracleDocument  doc1 = db.createDocumentFromString(json);
         OracleDocument  doc1 = db.createDocumentFrom("1234", voteData);
         System.out.println("hello");
        // Insert the documents into a collection, one-by-one.
        // The result documents contain auto-generated 
        // keys, among other documents components (version, etc).
        // Note: SODA provides the more efficient bulk insert as well
        OracleDocument resultDoc1 = col.insertAndGet(doc1);


        // Retrieve the first document using its auto-generated
        // unique ID (aka key)
        System.out.println ("* Retrieving the first document by its key *\n");

        OracleDocument fetchedDoc = col.find().key(resultDoc1.getKey()).getOne();

        System.out.println (fetchedDoc.getContentAsString());

        // Retrieve all documents representing users that have
        // 300 or more friends. Use the following query-by-example:
        // {friends : {$gte : 300}}.
        System.out.println ("\n* Retrieving documents representing users with" +
                            " at least 300 friends *\n");

        OracleDocument f = db.createDocumentFromString(
         "{ \"friends\" : { \"$gte\" : 300 }}");

        OracleCursor c = null;

        try {
          // Get a cursor over all documents in the collection
          // that match our query-by-example
          c = col.find().filter(f).getCursor();

          while (c.hasNext()) {
            // Get the next document
            fetchedDoc = c.next();

            System.out.println (fetchedDoc.getContentAsString());
          }
        }
        finally {
          // Important: you must close the cursor to release resources!
          if (c != null) {
            c.close();
          }
        }

        // Drop the collection, deleting the table backing
        // it and collection metadata
        
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      if (conn != null) {
        try {
          conn.close();
        }
        catch (Exception e) {
        }
      }
    }
  }
}