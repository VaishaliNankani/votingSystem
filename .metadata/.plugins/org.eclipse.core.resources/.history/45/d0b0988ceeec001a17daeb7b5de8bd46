// Copyright 2018 (C), Oracle and/or its affiliates. All rights reserved.

package com.oracle.cgbu.cne.nrf.test;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.io.IOException;
import java.net.URI;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.core.Appender;
import org.apache.logging.log4j.core.LogEvent;
import org.apache.logging.log4j.core.Logger;
import org.aspectj.lang.ProceedingJoinPoint;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.bind.annotation.RequestMethod;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;
import com.oracle.cgbu.cne.nrf.NrfException;
import com.oracle.cgbu.cne.nrf.annotations.NFType;
import com.oracle.cgbu.cne.nrf.config.NrfConfigurations;
import com.oracle.cgbu.cne.nrf.config.NrfSystemOptionsManager;
import com.oracle.cgbu.cne.nrf.config.NrfConfigurations.ServiceConfig;
import com.oracle.cgbu.cne.nrf.config.NrfConfigurations.ServiceConfig.Notify;
import com.oracle.cgbu.cne.nrf.dao.NfInstance;
import com.oracle.cgbu.cne.nrf.dao.NfInstancesRepository;
import com.oracle.cgbu.cne.nrf.dao.NfPatchResponse;
import com.oracle.cgbu.cne.nrf.dao.NfScreening;
import com.oracle.cgbu.cne.nrf.dao.NfScreeningRepository;
import com.oracle.cgbu.cne.nrf.dao.NfStatusMonitor;
import com.oracle.cgbu.cne.nrf.dao.NfStatusMonitorDoc;
import com.oracle.cgbu.cne.nrf.dao.NfStatusMonitorRepository;
import com.oracle.cgbu.cne.nrf.dao.NrfSystemOptionsDao;
import com.oracle.cgbu.cne.nrf.dao.NrfSystemOptionsRepository;
import com.oracle.cgbu.cne.nrf.domain.AudienceType;
import com.oracle.cgbu.cne.nrf.domain.AuthorizeRequesterNf;
import com.oracle.cgbu.cne.nrf.domain.ChangeItem;
import com.oracle.cgbu.cne.nrf.domain.ChangeType;
import com.oracle.cgbu.cne.nrf.domain.CustomNfInstance;
import com.oracle.cgbu.cne.nrf.domain.DefaultNotificationSubscription;
import com.oracle.cgbu.cne.nrf.domain.FailureAction;
import com.oracle.cgbu.cne.nrf.domain.FeatureStatus;
import com.oracle.cgbu.cne.nrf.domain.ForwardingSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.ForwardingData;
import com.oracle.cgbu.cne.nrf.domain.EpochTime;
import com.oracle.cgbu.cne.nrf.domain.Events;
import com.oracle.cgbu.cne.nrf.domain.GeneralSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.GeoRedundancySystemOptions;
import com.oracle.cgbu.cne.nrf.domain.HeartbeatInfo;
import com.oracle.cgbu.cne.nrf.domain.InvalidParam;
import com.oracle.cgbu.cne.nrf.domain.Ipv4AddressRange;
import com.oracle.cgbu.cne.nrf.domain.LoggingLevelSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.LogicalOperatorForScope;
import com.oracle.cgbu.cne.nrf.domain.N1MessageClass;
import com.oracle.cgbu.cne.nrf.domain.NFStatus;
import com.oracle.cgbu.cne.nrf.domain.NfAccessTokenSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.NfCallBackUri;
import com.oracle.cgbu.cne.nrf.domain.NfConfig;
import com.oracle.cgbu.cne.nrf.domain.NfDiscoverSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.NfHeartBeat;
import com.oracle.cgbu.cne.nrf.domain.NfIpEndPoint;
import com.oracle.cgbu.cne.nrf.domain.NfManagementSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.NfProfile;
import com.oracle.cgbu.cne.nrf.domain.NfPutResponse;
import com.oracle.cgbu.cne.nrf.domain.NfResponseInfo;
import com.oracle.cgbu.cne.nrf.domain.NfScreeningFeatureStatus;
import com.oracle.cgbu.cne.nrf.domain.NfScreeningRules;
import com.oracle.cgbu.cne.nrf.domain.NfScreeningRulesData;
import com.oracle.cgbu.cne.nrf.domain.NfScreeningRulesListType;
import com.oracle.cgbu.cne.nrf.domain.NfScreeningSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.NfScreeningType;
import com.oracle.cgbu.cne.nrf.domain.NfService;
import com.oracle.cgbu.cne.nrf.domain.NfServiceVersionConfig;
import com.oracle.cgbu.cne.nrf.domain.NotificationData;
import com.oracle.cgbu.cne.nrf.domain.NotificationEventType;
import com.oracle.cgbu.cne.nrf.domain.NotificationType;
import com.oracle.cgbu.cne.nrf.domain.NrfEngSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.NrfSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.OauthTokenAlgorithm;
import com.oracle.cgbu.cne.nrf.domain.PatchItem;
import com.oracle.cgbu.cne.nrf.domain.Plmn;
import com.oracle.cgbu.cne.nrf.domain.ProblemDetails;
import com.oracle.cgbu.cne.nrf.domain.ResponseHttpStatusCodes;
import com.oracle.cgbu.cne.nrf.domain.SlfSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.SubscriberIdType;
import com.oracle.cgbu.cne.nrf.domain.SupiRange;
import com.oracle.cgbu.cne.nrf.domain.UriScheme;
import com.oracle.cgbu.cne.nrf.domain.VersionedJsonDoc;
import com.oracle.cgbu.cne.nrf.domain.VersionedJsonDocList;
import com.oracle.cgbu.cne.nrf.forwarding.NrfForwardingService;
import com.oracle.cgbu.cne.nrf.metrics.DatabaseMonitorInterceptor;
import com.oracle.cgbu.cne.nrf.metrics.CommonNrfMetrics;
import com.oracle.cgbu.cne.nrf.metrics.MetricsDimension;
import com.oracle.cgbu.cne.nrf.metrics.NrfMetrics;
import com.oracle.cgbu.cne.nrf.nfScreening.NfScreeningImpl;
import com.oracle.cgbu.cne.nrf.nfScreening.NfScreeningService;
import com.oracle.cgbu.cne.nrf.service.NfDbServiceImpl;
import com.oracle.cgbu.cne.nrf.service.NfMgmtServiceImpl;
import com.oracle.cgbu.cne.nrf.service.NfUpgradeServiceImpl;
import com.oracle.cgbu.cne.nrf.service.RestClient;
import com.oracle.cgbu.cne.nrf.service.helper.NrfEventManager;
import com.oracle.cgbu.cne.nrf.service.helper.ValidationHelper;

import io.jaegertracing.internal.utils.Http;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Metrics;
import io.micrometer.core.instrument.search.MeterNotFoundException;
@TestPropertySource("classpath:application-test.properties")
public class NfMgmtServiceTest  {

	
	 @Mock
	 private ProceedingJoinPoint proceedingJoinPoint;
	 
	 @Mock
	private ValidationHelper validationHelper;
	 
	 @Mock
	 private NfUpgradeServiceImpl nfUpgradeServiceImpl;
	 
	 private DatabaseMonitorInterceptor aopConfiguration = new DatabaseMonitorInterceptor();
	 
	@Mock
	private NfInstancesRepository nfRepository;
	
	@Mock
	private NfStatusMonitorRepository nfStatusMonitorRepository;
	
	@Mock
	private NfScreeningRepository nfScreeningRepository;
	
	@Mock
	private RestClient client;
	
	@InjectMocks 
	private NfMgmtServiceImpl service;
	
	@InjectMocks
	private NfScreeningImpl nfScreeningSvc;
	
	@Mock
	private NfScreeningService screeningSvc;
	
	@Mock
	private Appender mockAppender;

	@Captor
	private ArgumentCaptor<LogEvent> captorLoggingEvent;

	private Logger logger;
	
	@Mock
	private CommonNrfMetrics commonNrfMetrics;
	
	@Mock
	private NrfSystemOptionsRepository nrfSystemOptionsRepository;
	
	@Mock
	private NrfSystemOptionsManager nrfSystemOptionsManager;
	
	@Mock
	private NfDbServiceImpl nfDbServiceImpl;
	
	
//	@InjectMocks
//	private AOPConfiguration aopConfiguration;
	
	private static final ObjectMapper objectMapper = new ObjectMapper();
	
	@Autowired
	private MetricsDimension metricsDimension;
	
	@Autowired
	private NrfMetrics nrfmetrics;
	
	@Mock
	private NrfEventManager nrfEventManager;

	int count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED;
	int count_dbmetrics_nfRegister_nfInstances_201_CREATED;
	int count_dbmetrics_nfListRetrieval_find_nfInstances_200_OK;
	int count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK;
	int count_dbmetrics_nfUpdate_update_nfInstances_200_OK;
	int count_dbmetrics_nfUpdate_find_nfInstances_200_OK;
	int count_dbmetrics_nfUpdate_find_nfStatusMonitor_200_OK;
	int count_dbmetrics_nfListRetrieval_find_nfInstances_404_NOT_FOUND;
	int count_dbmetrics_unknown_find_nrfSystemOptions_200_OK;
	int count_dbmetrics_nfDelete_find_nfInstances_200_OK;
	int count_dbmetrics_nfDelete_find_nfStatusMonitor_200_OK;
	int count_dbmetrics_nfDelete_delete_nfStatusMonitor_200_OK;
	int count_dbmetrics_nfDelete_delete_nfInstances_200_OK;
	int count_dbmetrics_delete_find_nrfSystemOptions_200_OK;
	int count_dbmetrics_find_unknown_nfScreening_200_OK;
	int count_dbmetrics_nfRegister_delete_nfInstances_200_OK;
	int count_dbmetrics_nfRegister_delete_nfStatusMonitor_200_OK;
		
	private static String NF_INSTANCES ="NfInstances";
	private static String NF_STATUSMONITOR ="NfStatusMonitor";
	private static String NRF_SYSTEMOPTIONS="NrfSystemOptions";
	private static String NF_SCREENING="NfScreening";
	private static String FIND="find";
	private static String CREATE="create";
	private static String DELETE="delete";
	private static String UPDATE="update";
	private static String NF_REGISTER="NfRegister";
	private static String NF_UPDATE="NfUpdate";
	private static String NF_DELETE="NfDeregister";
	private static String NF_PROFILE_RETRIEVAL="NfProfileRetrieval";
	private static String NF_LIST_RETRIEVAL="NfListRetrieval";
	private static String NF_HEARTBEAT="NfHeartbeat";
	private static String UNKNOWN="Unknown";
	private static String version = "v1";
	private ForwardingData forwardingData;
	
	@Mock
	private NrfForwardingService nrfForwardingSvc;
	
	//@Mock
	//private NrfForwardingService nrfQuerySvc;

	private Boolean forwardedRequest = false; 
	
	NrfConfigurations nrfConfigurations = new NrfConfigurations();


	
	@Before
	public void setUp() {
		
		MockitoAnnotations.initMocks(this);
		when(mockAppender.getName()).thenReturn("MockAppender");
		when(mockAppender.isStarted()).thenReturn(true);
		when(mockAppender.isStopped()).thenReturn(false);
		logger = (Logger)LogManager.getRootLogger();
		logger.addAppender(mockAppender);

		//logger.setLevel(Level.DEBUG);
		nfScreeningSvc.setCommonNrfMetrics(new CommonNrfMetrics());
		service.setCommonNrfMetrics(new CommonNrfMetrics());
		service.setNfUpgradeServiceImpl(new NfUpgradeServiceImpl());
		nfScreeningSvc.setMetricsDimension(new MetricsDimension());
		service.setMetricsDimension(new MetricsDimension());
		this.getMetricsValues();
		String nrfLevel = "default-ocnrf";
		Metrics.globalRegistry.config().commonTags("NrfLevel", nrfLevel);		

		logger.setLevel(Level.INFO);

		String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
        nfScreeningSvc.setNrfMetrics(new NrfMetrics());
		service.setNrfMetrics(new NrfMetrics());
		nrfConfigurations.setRegSvc(new ServiceConfig());
		nrfConfigurations.getRegSvc().setNfQueryThreadPoolSize(2);
		nrfConfigurations.getRegSvc().setReadTimeout(8);
		nrfConfigurations.setSubSvc(new NrfConfigurations.ServiceConfig());
		nrfConfigurations.getSubSvc().setNotify(new Notify());
		nrfConfigurations.getSubSvc().getNotify().setNfRegisteredApi(location);
		nrfConfigurations.getSubSvc().getNotify().setNfProfileChangedApi(location);
		nrfConfigurations.getSubSvc().getNotify().setNfDeregisteredApi(location);
      	nrfConfigurations.setGlobalConfig(new NrfConfigurations.GlobalConfig());
		nrfConfigurations.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
		this.service.setNrfConfig(nrfConfigurations);

		
		NrfSystemOptionsDao systemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptionsDao systemOptionsDaoError = TestDataGenerator.generateNrfSystemOptionsDao_errorResponses();
		NrfSystemOptionsDao systemOptionsDaoEngError = TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses();
		NrfSystemOptionsDao engSystemOptionsDao = TestDataGenerator.generateNrfEngSystemOptionsDao();
		ArrayList<NrfSystemOptionsDao> systemOptionsList = new ArrayList<NrfSystemOptionsDao>() { 
            { 
                add(systemOptionsDao); 
                add(engSystemOptionsDao); 
                add(systemOptionsDaoError);
                add(systemOptionsDaoEngError);
                
            } 
        }; 
        when(nrfSystemOptionsRepository.findbyRecordOwner(any())).thenReturn(systemOptionsList);
       	NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
       	service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
       	Mockito.doNothing().when(nrfEventManager).recordNrfEvent(any(), any());
	}

	@After
	public void teardown() {
		logger.removeAppender(mockAppender);
		Metrics.globalRegistry.getMeters().forEach((meter) -> Metrics.globalRegistry.remove(meter));
		}
	

	@Test
	public void testGetNfProfile_returnsProfile() throws Exception {
		String nfInstanceId = UUID.randomUUID().toString();
		NfProfile amfProfile = TestDataGenerator.generateNF("AMF");
		amfProfile.setNfInstanceId(nfInstanceId);
		NfInstance inst = new NfInstance(amfProfile, "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
		NrfSystemOptionsDao systemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions  = (NrfSystemOptions) systemOptionsDao.toDomain("v1");
		List<NfConfig> nrfHostConfig = new ArrayList<NfConfig>();
		nrfOptions.getForwardingSystemOptions().setNrfHostConfig(null);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		systemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		when(nfDbServiceImpl.findNfInstanceforNfProfileRetrieval(any(), any(), any())).thenReturn(inst);
		when(nfUpgradeServiceImpl.findNfProfileWithVersion(version, inst)).thenReturn(amfProfile.toString());
		forwardingData = new ForwardingData();
		HashMap<String,Object> o = service.getNfProfile(nfInstanceId,forwardingData,"UNKNOWN",false);
		Object result = o.get("response");
		System.out.println(result);
		Assert.assertTrue(result instanceof NfProfile);
		NfProfile retP = (NfProfile) result;
		Assert.assertEquals(amfProfile, retP);
		
	}
	
	@Test
	public void testGetNfProfile_doesNotReturnDeregisteredProfile() throws Exception {
		String nfInstanceId = UUID.randomUUID().toString();
		NfProfile amfProfile = TestDataGenerator.generateNF("AMF");
		amfProfile.setNfInstanceId(nfInstanceId);
		amfProfile.setNfStatus(NFStatus.DEREGISTERED);
		NfInstance inst = new NfInstance(amfProfile, "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
		List<NfInstance> nfInstances = new ArrayList<>();
		nfInstances.add(inst);
		when(nfRepository.findByNfInstanceId(nfInstanceId)).thenReturn(nfInstances);
		forwardingData = new ForwardingData();
		HashMap<String,Object> o = service.getNfProfile(nfInstanceId,forwardingData,"UNKNOWN",false);
		Object result = o.get("response");
		ProblemDetails prob = ProblemDetails.forNotFound();
		prob.setCause("Not Found");
		prob.setDetail("Not Found");
		Assert.assertTrue(result instanceof ProblemDetails);
		ProblemDetails retP = (ProblemDetails)result;
		Assert.assertEquals(prob, retP);		
	}
		
	@Test
	public void testGetNfProfile_returnsNull() throws Exception {
		String nfInstanceId = UUID.randomUUID().toString();
		URI uri = URI.create("http://ocnrf-nfregistration:8080/nnrf-nfm/v1/nf-instances/"+nfInstanceId);
		NrfSystemOptionsDao systemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions  = (NrfSystemOptions) systemOptionsDao.toDomain("v1");
		List<NfConfig> nrfHostConfig = new ArrayList<NfConfig>();
		nrfOptions.getForwardingSystemOptions().setNrfHostConfig(null);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		systemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		
		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.GET,"NfProfileRetrieval")).thenReturn(null);

		forwardingData = new ForwardingData();
		HashMap<String,Object> o = service.getNfProfile(nfInstanceId,forwardingData,"UNKNOWN",false);
		Object result = o.get("response");
		Assert.assertTrue(result instanceof ProblemDetails);
		ProblemDetails retP = (ProblemDetails) result;
		
		Assert.assertEquals(HttpStatus.NOT_FOUND, HttpStatus.valueOf(retP.getStatus()));
		Assert.assertEquals("Not Found", retP.getTitle());
		Assert.assertEquals("Not Found", retP.getDetail());
		Assert.assertEquals("Not Found", retP.getCause());
	}
	
	@Test
	public void testGetNfProfile_returnsNotFound_ForInternalMicroservice() throws Exception {
		String nfInstanceId = UUID.randomUUID().toString();
		URI uri = URI.create("http://ocnrf-nfregistration:8080/nnrf-nfm/v1/nf-instances/"+nfInstanceId);
		NrfSystemOptionsDao systemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions  = (NrfSystemOptions) systemOptionsDao.toDomain("v1");
		List<NfConfig> nrfHostConfig = new ArrayList<NfConfig>();
		nrfOptions.getForwardingSystemOptions().setNrfHostConfig(null);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		systemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.GET,"NfProfileRetrieval")).thenReturn(null);

		forwardingData = new ForwardingData();
		HashMap<String,Object> o = service.getNfProfile(nfInstanceId,forwardingData,"UNKNOWN",true);
		Object result = o.get("response");
		Assert.assertTrue(result instanceof ProblemDetails);
		ProblemDetails retP = (ProblemDetails) result;

		Assert.assertEquals(HttpStatus.NOT_FOUND, HttpStatus.valueOf(retP.getStatus()));
		Assert.assertEquals("Not Found", retP.getTitle());
		Assert.assertEquals("Not Found", retP.getDetail());
		Assert.assertEquals("Not Found", retP.getCause());
	}
	
	@Test
	public void testGetNfProfile_returnsProfile_forForwardedRequest() throws Exception {
		String nfInstanceId = UUID.randomUUID().toString();
		NfProfile amfProfile = TestDataGenerator.generateNF("AMF");
		amfProfile.setNfInstanceId(nfInstanceId);
		NfInstance inst = new NfInstance(amfProfile, "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
		NrfSystemOptionsDao systemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions  = (NrfSystemOptions) systemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setProfileRetreivalForwardingStatus(FeatureStatus.ENABLED);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		systemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		when(nfDbServiceImpl.findNfInstanceforNfProfileRetrieval(any(), any(), any())).thenReturn(inst);
		when(nfUpgradeServiceImpl.findNfProfileWithVersion(version,inst)).thenReturn(amfProfile.toString());
		
		forwardingData = new ForwardingData();
		List<String> forwardedFrom = new ArrayList<String>();
		forwardedFrom.add("primary");
		forwardingData.setForwardedFrom(forwardedFrom);
		HashMap<String,Object> o = service.getNfProfile(nfInstanceId,forwardingData,"UNKNOWN",false);
		Object result = o.get("response");
		Assert.assertTrue(result instanceof NfProfile);
		NfProfile retP = (NfProfile) result;
		Assert.assertEquals(amfProfile, retP);
		Assert.assertEquals(null, retP.getAdditionalAttributes());
		
	}
	
	@Test
	public void testGetNfProfile_sendViaHeader_forForwardedRequest() throws Exception{
		String nfInstanceId = UUID.randomUUID().toString();
		NfProfile amfProfile = TestDataGenerator.generateNF("AMF");
		amfProfile.setNfInstanceId(nfInstanceId);
		NfInstance inst = new NfInstance(amfProfile, "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
		NrfSystemOptionsDao systemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions  = (NrfSystemOptions) systemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setProfileRetreivalForwardingStatus(FeatureStatus.ENABLED);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		systemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		when(nfDbServiceImpl.findNfInstanceforNfProfileRetrieval(any(), any(), any())).thenReturn(inst);
		when(nfUpgradeServiceImpl.findNfProfileWithVersion(version,inst)).thenReturn(amfProfile.toString());
		
		//forwarded from primary nrf
		forwardingData = new ForwardingData();
		List<String> forwardedFrom = new ArrayList<String>();
		forwardedFrom.add("primary");
		forwardingData.setForwardedFrom(forwardedFrom);
		HashMap<String,Object> o = service.getNfProfile(nfInstanceId,forwardingData,"UNKNOWN",false);
		Object result = o.get("response");
		Assert.assertTrue(result instanceof NfProfile);
		NfProfile retP = (NfProfile) result;
		Assert.assertEquals(amfProfile, retP);
		Assert.assertEquals(null, retP.getAdditionalAttributes());
		
		//forwarded from secondary NRF
		forwardingData = new ForwardingData();
		forwardedFrom = new ArrayList<String>();
		forwardedFrom.add("secondary");
		forwardingData.setForwardedFrom(forwardedFrom);
		o = service.getNfProfile(nfInstanceId,forwardingData,"UNKNOWN",false);
		result = o.get("response");
		Assert.assertTrue(result instanceof NfProfile);
		retP = (NfProfile) result;
		Assert.assertEquals(amfProfile, retP);
		Assert.assertEquals(null, retP.getAdditionalAttributes());
		
		//forwarded from neither nrf's
		forwardingData = new ForwardingData();
		forwardingData.setForwardedFrom(new ArrayList<String>());
		o = service.getNfProfile(nfInstanceId,forwardingData,"UNKNOWN",false);
		result = o.get("response");
		Assert.assertTrue(result instanceof NfProfile);
		retP = (NfProfile) result;
		Assert.assertEquals(amfProfile, retP);
		Assert.assertEquals(null, retP.getAdditionalAttributes());
	}
	
	@Test
	public void testGetNfProfile_returnsNull_forForwardedRequest() throws Exception {
		String nfInstanceId = UUID.randomUUID().toString();
		URI uri = URI.create("http://ocnrf-nfregistration:8080/nnrf-nfm/v1/nf-instances/"+nfInstanceId);
		NrfSystemOptionsDao systemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions  = (NrfSystemOptions) systemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setProfileRetreivalForwardingStatus(FeatureStatus.ENABLED);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		systemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.GET,"NfProfileRetrieval")).thenReturn(null);
		forwardingData = new ForwardingData();
		List<String> forwardedFrom = new ArrayList<String>();
		forwardedFrom.add("secondary");
		forwardingData.setForwardedFrom(forwardedFrom);
		HashMap<String,Object> o = service.getNfProfile(nfInstanceId,forwardingData,"UNKNOWN",false);
		Object result = o.get("response");
		Assert.assertTrue(result instanceof ProblemDetails);
		ProblemDetails retP = (ProblemDetails) result;
		
		Assert.assertEquals(HttpStatus.NOT_FOUND, HttpStatus.valueOf(retP.getStatus()));
		Assert.assertEquals("Not Found", retP.getTitle());
		Assert.assertEquals("Not Found", retP.getDetail());
		Assert.assertEquals("Not Found", retP.getCause());
	}
			
    @Test
    public void testAddOrReplaceNfProfile_returnsAddProfile() throws Throwable {
    	
   
    	   //ProceedingJoinPoint jointPoint=Mockito.mock(ProceedingJoinPoint.class);
          //aopConfiguration.findByNfInstanceIdNfInstancesRepository(jointPoint);
           NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
          	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//         	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
          	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//          nrfConfig.getRegSvc().setNfLoadChange(0);
//          nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//          nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       
          	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
          	nrfConfig.getSubSvc().setNotify(new Notify());
          	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
          	
          	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
          	nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
          	List<Plmn> plmnList = new ArrayList<>();
              plmnList.add(new Plmn("310", "14"));
//         	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
          	
        	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
           String nfInstanceId = profile.getNfInstanceId();
           
           // Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
           Date now = new Date();
   		   NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
   		   
           when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
           NfInstance dao = new NfInstance(profile, "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat,nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
           
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
         
           
           Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
			.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+1,0);
            Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
					.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+1,0);
           
           Assert.assertNotNull(resp.getNfProfile());
           Assert.assertEquals(null, resp.getNfProfile().getAdditionalAttributes());
           Assert.assertEquals(profile, resp.getNfProfile());
           Assert.assertEquals(dao.getRecordOwner(), nrfConfig.getGlobalConfig().getNrfInstanceId());
    }
    
    // addOrUpdateProfile multiple nfServices without unique nfServiceInstanceIds
    @Test
    public void testAddOrReplaceProfile_whenPutNfInstanceWithoutUniqueNfServiceInstanceIds_thenReturnBadRequest() throws Exception {
    	NfProfile profile = TestDataGenerator.generateNF("AMF");
    	String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
        NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
      	nrfConfig.getSubSvc().setNotify(new Notify());
      	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
      	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
      	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
      	
      	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
      	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
        service.setNrfConfig(nrfConfig);
        URI nfInstanceUri = new URI(location);
        String nfInstanceId = profile.getNfInstanceId();
        
        //set nfServiceInstanceIds of both services to same value
        String serviceInstanceId = UUID.randomUUID().toString();
        for (int i = 0;i<profile.getNfServices().size();i++) {
        	profile.getNfServices().get(i).setServiceInstanceId(serviceInstanceId);
        }
        
        // Create HeartBeat Record
        NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
           
        when(nfRepository.findByNfInstanceId(nfInstanceId)).thenReturn(null);
        NfInstance dao = new NfInstance(profile, "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
        when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
        doNothing().when(client).sendNotificationEvent(any(),any(),any());
        
        NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat,nrfConfig.getGlobalConfig().getNrfInstanceId());
        when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
        
        ProblemDetails prob = ProblemDetails.forBadRequest();
		prob.setDetail("nfServiceInstanceIds in the nfProfile are not unique");
		prob.setCause("nfServiceInstanceIds in the nfProfile are not unique");
		prob.setInstance(nfInstanceUri);
        
		Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
        Assert.assertTrue(o instanceof NfPutResponse);
        NfPutResponse resp = (NfPutResponse) o;
      
        Assert.assertEquals(prob,resp.getProblemDetails());
    }
    
    @Test
    public void givenNfProfile_whenPutNfInstanceWithNoHeartBeatTimer_thenReturnJsonStructure() throws Exception {
           NfProfile profile = TestDataGenerator.generateNF("PCF");
           profile.setHeartBeatTimer(null);
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
          	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
          	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getRegSvc().setNfLoadChange(0);
//          	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofSeconds(90));
//          	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
          	
          	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
          	nrfConfig.getSubSvc().setNotify(new Notify());
          	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
          	
          	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
            nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
          	List<Plmn> plmnList = new ArrayList<>();
              plmnList.add(new Plmn("310", "14"));
//         	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
          	
          	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
           String nfInstanceId = profile.getNfInstanceId();
           
           // Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),90);
           Date now = new Date();
   		   NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
   		   
           when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
           NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
           
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
           
           Assert.assertNotNull(resp.getNfProfile());
           profile.setHeartBeatTimer(30);
           Assert.assertEquals(profile, resp.getNfProfile());
           Assert.assertEquals(resp.getNfProfile().getHeartBeatTimer(), new Integer(30));
           Assert.assertEquals(null, resp.getNfProfile().getAdditionalAttributes());
           
           
           Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
		.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+1,0);
         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
				.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+1,0);
          
    }
    
    @Test
    public void givenNfProfile_whenUpdateNfWithHeartBeatTimer_thenReturnJsonStructure() throws Exception {
           NfProfile profile = TestDataGenerator.generateNF("PCF");
           profile.setHeartBeatTimer(35);
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//       	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	
       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
           String nfInstanceId = profile.getNfInstanceId();
           Date now = new Date();
           NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
           
           // Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),90);
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(nfInstanceId,null)).thenReturn(statusDao);
           
           NfInstance dao = new NfInstance(TestDataGenerator.generateNF("PCF"), nrfConfig.getGlobalConfig().getNrfInstanceId());
           CustomNfInstance customNfInstance = new CustomNfInstance(dao, null);
           when(nfDbServiceImpl.findNfInstanceByNfInstanceId(any(),any(),any())).thenReturn(customNfInstance);
           when(nfDbServiceImpl.findNfInstanceForNfRegister(any())).thenReturn(customNfInstance);
           
           dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           
           nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),60);
           statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
           
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
           
           Assert.assertNotNull(resp.getNfProfile());
           profile.setHeartBeatTimer(35);
           Assert.assertEquals(profile, resp.getNfProfile());

           Assert.assertEquals(resp.getNfProfile().getHeartBeatTimer(), new Integer(35));  
           Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        			.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK+1,0);
        	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        					.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK+1,0);
           ArgumentCaptor<NfProfile> argument1 = ArgumentCaptor.forClass(NfProfile.class);
           ArgumentCaptor<Events> argument2 = ArgumentCaptor.forClass(Events.class);
           Mockito.verify(nrfEventManager).recordNrfEvent(argument1.capture(),argument2.capture());
           Assert.assertEquals(Events.NFPROFILE_UPDATE_PUT_EVENT, argument2.getValue());
           Assert.assertEquals(new Integer(35),argument1.getValue().getHeartBeatTimer());
    }
    
    @Test
    public void givenNfProfile_whenPutNfInstanceWithHeartBeatTimerLessThanMinConfiguration_thenReturnJsonStructure() throws Exception {
           NfProfile profile = TestDataGenerator.generateNF("PCF");
           profile.setHeartBeatTimer(30);
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
          	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
          	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getRegSvc().setNfLoadChange(0);
//          	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//          	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
          	
          	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
          	nrfConfig.getSubSvc().setNotify(new Notify());
          	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
          	
          	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
            nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
            
          	
          	List<Plmn> plmnList = new ArrayList<>();
              plmnList.add(new Plmn("310", "14"));
//          	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
          	
          	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
           String nfInstanceId = profile.getNfInstanceId();
           
           // Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),90);
           Date now = new Date();
   		   NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
   		   when(nfDbServiceImpl.findNfInstanceForNfRegister(any())).thenReturn(null);
           when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
           NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
           
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
           
           Assert.assertNotNull(resp.getNfProfile());
           profile.setHeartBeatTimer(30);
           Assert.assertEquals(profile, resp.getNfProfile());

           Assert.assertEquals(resp.getNfProfile().getHeartBeatTimer(), new Integer(30));

           Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        			.tag("dbOperation",CREATE).tag("serviceOperation",NF_REGISTER).tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+1,0);
        	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        					.tag("dbOperation",CREATE).tag("serviceOperation",NF_REGISTER).tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+1,0);

    }
    
    @Test
    public void givenNfProfile_whenPutNfInstanceWithHeartBeatTimerLessThanMinConfiguration_thenReturnJsonStructure_hbInfo_PCF() throws Exception {
           NfProfile profile = TestDataGenerator.generateNF("PCF");
           profile.setHeartBeatTimer(30);
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
          	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
          	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getRegSvc().setNfLoadChange(0);
//          	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//          	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
          	
          	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
          	nrfConfig.getSubSvc().setNotify(new Notify());
          	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
          	
          	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
            nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
            
          	
          	List<Plmn> plmnList = new ArrayList<>();
              plmnList.add(new Plmn("310", "14"));
//          	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
          	
          	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
           String nfInstanceId = profile.getNfInstanceId();
           
           NrfSystemOptionsDao nrfSystemOptionsDao = new NrfSystemOptionsDao();
   		nrfSystemOptionsDao.setConfigType("OCNRF_SYSTEM_OPTIONS");
   		NrfSystemOptions systemOptions = new NrfSystemOptions();
   		NfScreeningSystemOptions nfScreeningSystemOptions = new NfScreeningSystemOptions();
   		nfScreeningSystemOptions.setNfScreeningFeatureStatus(NfScreeningFeatureStatus.DISABLED);
   		nfScreeningSystemOptions.setNfScreeningFailureHttpCode(403);
   		systemOptions.setNfScreeningSystemOptions(nfScreeningSystemOptions);
   		List<Plmn> nrfPlmnList = new ArrayList<>();
   		Plmn add = new Plmn("310","14");
   		nrfPlmnList.add(add);
   		GeneralSystemOptions general = new GeneralSystemOptions();
   		general.setNrfPlmnList(nrfPlmnList);
   		general.setEnableF3(true);
   		general.setEnableF5(true);
   		general.setMaximumHopCount(2);
   		general.setOcnrfEndPointHost("ocnrf-ingressgateway.ocnrf.svc.cluster.local");
   		general.setOcnrfEndPointPort(80);
   		systemOptions.setGeneralSystemOptions(general);
   		NfManagementSystemOptions nfManagement = TestDataGenerator.generateNfManagementSystemOptions();
   		HeartbeatInfo heartbeatInfo = new HeartbeatInfo();
   		heartbeatInfo.setNfType("ALL_NF_TYPE");
   		heartbeatInfo.setMinHbTimer(Duration.ofSeconds(30));
   		heartbeatInfo.setMaxHbTimer(Duration.ofMinutes(5));
   		heartbeatInfo.setDefaultHbTimer(Duration.ofSeconds(30));
   		heartbeatInfo.setNfHeartbeatMissAllowed(3);
   		List<HeartbeatInfo> nfHeartbeatTimers = new ArrayList<HeartbeatInfo>();
   		nfHeartbeatTimers.add(heartbeatInfo);
   		heartbeatInfo.setNfType("PCF");
   		heartbeatInfo.setMinHbTimer(Duration.ofSeconds(40));
   		heartbeatInfo.setMaxHbTimer(Duration.ofMinutes(5));
   		heartbeatInfo.setDefaultHbTimer(Duration.ofSeconds(40));
   		heartbeatInfo.setNfHeartbeatMissAllowed(3);
   		nfHeartbeatTimers.add(heartbeatInfo);
   		nfManagement.setNfHeartbeatTimers(nfHeartbeatTimers);
   		systemOptions.setNfManagementSystemOptions(nfManagement);
   		NfDiscoverSystemOptions nfDiscover = new NfDiscoverSystemOptions(); 
   		nfDiscover.setDiscoveryValidityPeriod(Duration.ofSeconds(3600));
   		nfDiscover.setProfilesCountInDiscoveryResponse(3);
   		nfDiscover.setDiscoveryResultLoadThreshold(null);
   		systemOptions.setNfDiscoverSystemOptions(nfDiscover);
   		NfAccessTokenSystemOptions nfAccessToken = new NfAccessTokenSystemOptions();
   		nfAccessToken.setOauthTokenAlgorithm(OauthTokenAlgorithm.ES256);
   		nfAccessToken.setOauthTokenExpiryTime(Duration.ofSeconds(3600));
   		nfAccessToken.setAuthorizeRequesterNf(AuthorizeRequesterNf.ENABLED);
   		nfAccessToken.setAudienceType(AudienceType.NF_INSTANCE_ID);
   		nfAccessToken.setLogicalOperatorForScope(LogicalOperatorForScope.AND);
   		systemOptions.setNfAccessTokenSystemOptions(nfAccessToken);
   		LoggingLevelSystemOptions loggingLevel = new LoggingLevelSystemOptions(); 
   		loggingLevel.setNfAccessTokenLogLevel("INFO");
   		loggingLevel.setNfDiscoveryLogLevel("INFO");
   		loggingLevel.setNfRegistrationLogLevel("INFO");
   		loggingLevel.setNfSubscriptionLogLevel("INFO");
   		loggingLevel.setNrfAuditorLogLevel("INFO");
   		loggingLevel.setNrfConfigurationLogLevel("INFO");
   		systemOptions.setLoggingLevelSystemOptions(loggingLevel);
   		SlfSystemOptions slfSystemOptions =new SlfSystemOptions();
   		List<@NFType String> supportedNfTypeList = new ArrayList<@NFType String> (Arrays.asList("UDR","UDM","PCF","AUSF"));
   		slfSystemOptions.setSupportedNfTypeList(supportedNfTypeList);
   		slfSystemOptions.setPreferredSubscriberIdType(SubscriberIdType.SUPI);
   		List<NfConfig> slfHostConfigList=new ArrayList<NfConfig>();
   		NfConfig slfHostConfig =new NfConfig();
   		List<NfServiceVersionConfig> apiVersions =new ArrayList<NfServiceVersionConfig>();
   		NfServiceVersionConfig version =new NfServiceVersionConfig();
   		version.setApiFullVersion("15.5.0");
   		version.setApiVersionInUri("v1");
   		apiVersions.add(version);
   		slfHostConfig.setApiVersions( apiVersions);
   		slfHostConfig.setFqdn("abc");
   		slfHostConfig.setPort(80);
   		slfHostConfig.setPriority(100);
   		slfHostConfig.setScheme(UriScheme.HTTP);
   		slfHostConfigList.add(slfHostConfig);
   		slfSystemOptions.setSlfHostConfig(slfHostConfigList);
   		ResponseHttpStatusCodes rerouteOnResponseHttpStatusCodes = new ResponseHttpStatusCodes();
   		rerouteOnResponseHttpStatusCodes.setPattern("^[3,5][0-9]{2}$");
   		slfSystemOptions.setRerouteOnResponseHttpStatusCodes(rerouteOnResponseHttpStatusCodes);
   		systemOptions.setSlfSystemOptions(slfSystemOptions);
   		ForwardingSystemOptions forwardingSystemOptions = new ForwardingSystemOptions();
   		List<NfConfig> nfConfigList = new ArrayList<>();
   		NfConfig nfConfig = new NfConfig();
   		nfConfig.setPort(8090);
   		nfConfig.setFqdn("oracle.com");
   		nfConfig.setScheme(UriScheme.HTTPS);
   		nfConfigList.add(nfConfig);
   		forwardingSystemOptions.setNrfHostConfig(nfConfigList);
   		forwardingSystemOptions.setNrfRerouteOnResponseHttpStatusCodes(rerouteOnResponseHttpStatusCodes);
   		forwardingSystemOptions.setProfileRetreivalForwardingStatus(FeatureStatus.DISABLED);
   		systemOptions.setForwardingSystemOptions(forwardingSystemOptions);
   		GeoRedundancySystemOptions geoRedundancySystemOptions = new GeoRedundancySystemOptions();
   		geoRedundancySystemOptions.setGeoRedundancyFeatureStatus(FeatureStatus.DISABLED);
   		geoRedundancySystemOptions.setReplicationLatency(Duration.ofSeconds(5));
   		geoRedundancySystemOptions.setMonitorNrfServiceStatusInterval(Duration.ofSeconds(1));
   		geoRedundancySystemOptions.setMonitorDBReplicationStatusInterval(Duration.ofSeconds(5));
   		systemOptions.setGeoRedundancySystemOptions(geoRedundancySystemOptions);
   		List<VersionedJsonDoc> list = new ArrayList<>();
   		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
   		versionJsonDoc.setVersion("v1");
   		versionJsonDoc.setDoc(systemOptions.toString());
   		list.add(versionJsonDoc);
   		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
   		versionJsonDocList.setVersionedJsonDocList(list);
   		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
   		NrfSystemOptions nrfSystemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
   		nrfSystemOptions.setErrorResponses(((NrfSystemOptions)TestDataGenerator.generateNrfSystemOptionsDao_errorResponses().toDomain("v1")).getErrorResponses());
   		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
        service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
          	
           // Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),90);
           Date now = new Date();
   		   when(nfDbServiceImpl.findNfInstanceForNfRegister(any())).thenReturn(null);
           when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
           NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
           
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
           
           Assert.assertNotNull(resp.getNfProfile());
           profile.setHeartBeatTimer(40);
           Assert.assertEquals(profile, resp.getNfProfile());

           Assert.assertEquals(resp.getNfProfile().getHeartBeatTimer(), new Integer(40));

           Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        			.tag("dbOperation",CREATE).tag("serviceOperation",NF_REGISTER).tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+1,0);
        	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        					.tag("dbOperation",CREATE).tag("serviceOperation",NF_REGISTER).tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+1,0);

    }
    
    @Test
    public void givenNfProfile_whenPutNfInstanceWithHeartBeatTimerMoreThanMaxConfiguration_thenReturnJsonStructure() throws Exception {
           NfProfile profile = TestDataGenerator.generateNF("PCF");
           /*Setting heart Beat timer more than max eng value configured i.e.  300 */
           profile.setHeartBeatTimer(500);
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
   		   URI nfInstanceUri = new URI(location);
           String nfInstanceId = profile.getNfInstanceId();
           NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//      	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofSeconds(90));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
        NrfSystemOptionsDao engSystemOptionsDao = TestDataGenerator.generateNrfEngSystemOptionsDao();
        NrfSystemOptionsDao systemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();

        NrfSystemOptions nrfSystemOptions = (NrfSystemOptions) systemOptionsDao.toDomain("v1");
        HeartbeatInfo heartbeatInfo = new HeartbeatInfo();
		heartbeatInfo.setNfType("ALL_NF_TYPE");
		heartbeatInfo.setMinHbTimer(Duration.ofSeconds(30));
		heartbeatInfo.setMaxHbTimer(Duration.ofMinutes(5));
		heartbeatInfo.setDefaultHbTimer(Duration.ofSeconds(90));
		heartbeatInfo.setNfHeartbeatMissAllowed(3);
		List<HeartbeatInfo> nfHeartbeatTimers = new ArrayList<HeartbeatInfo>();
		nfHeartbeatTimers.add(heartbeatInfo);		
        nrfSystemOptions.getNfManagementSystemOptions().setNfHeartbeatTimers(nfHeartbeatTimers);
        List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfSystemOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		systemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());

		NrfSystemOptionsDao systemOptionsDaoError = TestDataGenerator.generateNrfSystemOptionsDao_errorResponses();
		NrfSystemOptionsDao systemOptionsDaoEngError = TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses();
		ArrayList<NrfSystemOptionsDao> systemOptionsList = new ArrayList<NrfSystemOptionsDao>() { 
            { 
                add(systemOptionsDao); 
                add(engSystemOptionsDao); 
                add(systemOptionsDaoError);
                add(systemOptionsDaoEngError);
                
            } 
        }; 
        when(nrfSystemOptionsRepository.findbyRecordOwner(any())).thenReturn(systemOptionsList);
       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       		service.setNrfConfig(nrfConfig);
    	// Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),90);
       	
   		   NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
   		   
           when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
           NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
           
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
           
           Assert.assertNotNull(resp.getNfProfile());
           /* To assert heart beat timer with configured max heart beat value in eng option */
           profile.setHeartBeatTimer(300);
           Assert.assertEquals(profile, resp.getNfProfile());
           Assert.assertEquals(resp.getNfProfile().getHeartBeatTimer(), new Integer(300));
    }
    
    @Test
    public void givenNfProfile_whenPutNfInstanceWithHeartBeatTimerMoreThanMaxConfiguration_thenReturnJsonStructure_hbInfo_PCF() throws Exception {
           NfProfile profile = TestDataGenerator.generateNF("PCF");
           profile.setHeartBeatTimer(130);
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
          	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
          	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getRegSvc().setNfLoadChange(0);
//          	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//          	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
          	
          	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
          	nrfConfig.getSubSvc().setNotify(new Notify());
          	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
          	
          	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
            nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
            
          	
          	List<Plmn> plmnList = new ArrayList<>();
              plmnList.add(new Plmn("310", "14"));
//          	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
          	
          	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
           String nfInstanceId = profile.getNfInstanceId();
           
           NrfSystemOptionsDao nrfSystemOptionsDao = new NrfSystemOptionsDao();
   		nrfSystemOptionsDao.setConfigType("OCNRF_SYSTEM_OPTIONS");
   		NrfSystemOptions systemOptions = new NrfSystemOptions();
   		NfScreeningSystemOptions nfScreeningSystemOptions = new NfScreeningSystemOptions();
   		nfScreeningSystemOptions.setNfScreeningFeatureStatus(NfScreeningFeatureStatus.DISABLED);
   		nfScreeningSystemOptions.setNfScreeningFailureHttpCode(403);
   		systemOptions.setNfScreeningSystemOptions(nfScreeningSystemOptions);
   		List<Plmn> nrfPlmnList = new ArrayList<>();
   		Plmn add = new Plmn("310","14");
   		nrfPlmnList.add(add);
   		GeneralSystemOptions general = new GeneralSystemOptions();
   		general.setNrfPlmnList(nrfPlmnList);
   		general.setEnableF3(true);
   		general.setEnableF5(true);
   		general.setMaximumHopCount(2);
   		general.setOcnrfEndPointHost("ocnrf-ingressgateway.ocnrf.svc.cluster.local");
   		general.setOcnrfEndPointPort(80);
   		systemOptions.setGeneralSystemOptions(general);
   		NfManagementSystemOptions nfManagement = TestDataGenerator.generateNfManagementSystemOptions();
   		HeartbeatInfo heartbeatInfo = new HeartbeatInfo();
   		heartbeatInfo.setNfType("ALL_NF_TYPE");
   		heartbeatInfo.setMinHbTimer(Duration.ofSeconds(30));
   		heartbeatInfo.setMaxHbTimer(Duration.ofMinutes(5));
   		heartbeatInfo.setDefaultHbTimer(Duration.ofSeconds(30));
   		heartbeatInfo.setNfHeartbeatMissAllowed(3);
   		List<HeartbeatInfo> nfHeartbeatTimers = new ArrayList<HeartbeatInfo>();
   		nfHeartbeatTimers.add(heartbeatInfo);
   		heartbeatInfo.setNfType("PCF");
   		heartbeatInfo.setMinHbTimer(Duration.ofSeconds(40));
   		heartbeatInfo.setMaxHbTimer(Duration.ofMinutes(2));
   		heartbeatInfo.setDefaultHbTimer(Duration.ofSeconds(40));
   		heartbeatInfo.setNfHeartbeatMissAllowed(3);
   		nfHeartbeatTimers.add(heartbeatInfo);
   		nfManagement.setNfHeartbeatTimers(nfHeartbeatTimers);
   		systemOptions.setNfManagementSystemOptions(nfManagement);
   		NfDiscoverSystemOptions nfDiscover = new NfDiscoverSystemOptions(); 
   		nfDiscover.setDiscoveryValidityPeriod(Duration.ofSeconds(3600));
   		nfDiscover.setProfilesCountInDiscoveryResponse(3);
   		nfDiscover.setDiscoveryResultLoadThreshold(null);
   		systemOptions.setNfDiscoverSystemOptions(nfDiscover);
   		NfAccessTokenSystemOptions nfAccessToken = new NfAccessTokenSystemOptions();
   		nfAccessToken.setOauthTokenAlgorithm(OauthTokenAlgorithm.ES256);
   		nfAccessToken.setOauthTokenExpiryTime(Duration.ofSeconds(3600));
   		nfAccessToken.setAuthorizeRequesterNf(AuthorizeRequesterNf.ENABLED);
   		nfAccessToken.setAudienceType(AudienceType.NF_INSTANCE_ID);
   		nfAccessToken.setLogicalOperatorForScope(LogicalOperatorForScope.AND);
   		systemOptions.setNfAccessTokenSystemOptions(nfAccessToken);
   		LoggingLevelSystemOptions loggingLevel = new LoggingLevelSystemOptions(); 
   		loggingLevel.setNfAccessTokenLogLevel("INFO");
   		loggingLevel.setNfDiscoveryLogLevel("INFO");
   		loggingLevel.setNfRegistrationLogLevel("INFO");
   		loggingLevel.setNfSubscriptionLogLevel("INFO");
   		loggingLevel.setNrfAuditorLogLevel("INFO");
   		loggingLevel.setNrfConfigurationLogLevel("INFO");
   		systemOptions.setLoggingLevelSystemOptions(loggingLevel);
   		SlfSystemOptions slfSystemOptions =new SlfSystemOptions();
   		List<@NFType String> supportedNfTypeList = new ArrayList<@NFType String> (Arrays.asList("UDR","UDM","PCF","AUSF"));
   		slfSystemOptions.setSupportedNfTypeList(supportedNfTypeList);
   		slfSystemOptions.setPreferredSubscriberIdType(SubscriberIdType.SUPI);
   		List<NfConfig> slfHostConfigList=new ArrayList<NfConfig>();
   		NfConfig slfHostConfig =new NfConfig();
   		List<NfServiceVersionConfig> apiVersions =new ArrayList<NfServiceVersionConfig>();
   		NfServiceVersionConfig version =new NfServiceVersionConfig();
   		version.setApiFullVersion("15.5.0");
   		version.setApiVersionInUri("v1");
   		apiVersions.add(version);
   		slfHostConfig.setApiVersions( apiVersions);
   		slfHostConfig.setFqdn("abc");
   		slfHostConfig.setPort(80);
   		slfHostConfig.setPriority(100);
   		slfHostConfig.setScheme(UriScheme.HTTP);
   		slfHostConfigList.add(slfHostConfig);
   		slfSystemOptions.setSlfHostConfig(slfHostConfigList);
   		ResponseHttpStatusCodes rerouteOnResponseHttpStatusCodes = new ResponseHttpStatusCodes();
   		rerouteOnResponseHttpStatusCodes.setPattern("^[3,5][0-9]{2}$");
   		slfSystemOptions.setRerouteOnResponseHttpStatusCodes(rerouteOnResponseHttpStatusCodes);
   		systemOptions.setSlfSystemOptions(slfSystemOptions);
   		ForwardingSystemOptions forwardingSystemOptions = new ForwardingSystemOptions();
   		List<NfConfig> nfConfigList = new ArrayList<>();
   		NfConfig nfConfig = new NfConfig();
   		nfConfig.setPort(8090);
   		nfConfig.setFqdn("oracle.com");
   		nfConfig.setScheme(UriScheme.HTTPS);
   		nfConfigList.add(nfConfig);
   		forwardingSystemOptions.setNrfHostConfig(nfConfigList);
   		forwardingSystemOptions.setNrfRerouteOnResponseHttpStatusCodes(rerouteOnResponseHttpStatusCodes);
   		forwardingSystemOptions.setProfileRetreivalForwardingStatus(FeatureStatus.DISABLED);
   		systemOptions.setForwardingSystemOptions(forwardingSystemOptions);
   		GeoRedundancySystemOptions geoRedundancySystemOptions = new GeoRedundancySystemOptions();
   		geoRedundancySystemOptions.setGeoRedundancyFeatureStatus(FeatureStatus.DISABLED);
   		geoRedundancySystemOptions.setReplicationLatency(Duration.ofSeconds(5));
   		geoRedundancySystemOptions.setMonitorNrfServiceStatusInterval(Duration.ofSeconds(1));
   		geoRedundancySystemOptions.setMonitorDBReplicationStatusInterval(Duration.ofSeconds(5));
   		systemOptions.setGeoRedundancySystemOptions(geoRedundancySystemOptions);
   		List<VersionedJsonDoc> list = new ArrayList<>();
   		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
   		versionJsonDoc.setVersion("v1");
   		versionJsonDoc.setDoc(systemOptions.toString());
   		list.add(versionJsonDoc);
   		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
   		versionJsonDocList.setVersionedJsonDocList(list);
   		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
   		NrfSystemOptions nrfSystemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
   		nrfSystemOptions.setErrorResponses(((NrfSystemOptions)TestDataGenerator.generateNrfSystemOptionsDao_errorResponses().toDomain("v1")).getErrorResponses());
   		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
        service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
          	
           // Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),90);
           Date now = new Date();
   		   when(nfDbServiceImpl.findNfInstanceForNfRegister(any())).thenReturn(null);
           when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
           NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
           
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
           
           Assert.assertNotNull(resp.getNfProfile());
           profile.setHeartBeatTimer(120);
           Assert.assertEquals(profile, resp.getNfProfile());

           Assert.assertEquals(resp.getNfProfile().getHeartBeatTimer(), new Integer(120));

           Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        			.tag("dbOperation",CREATE).tag("serviceOperation",NF_REGISTER).tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+1,0);
        	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        					.tag("dbOperation",CREATE).tag("serviceOperation",NF_REGISTER).tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+1,0);

    }
    
    @Test
    public void givenNfProfile_whenPutNfInstanceWithHeartBeatTimerWithInConfigurationLimits_thenReturnJsonStructure() throws Exception {
           NfProfile profile = TestDataGenerator.generateNF("PCF");
           profile.setHeartBeatTimer(120);
           profile.setNfStatus(NFStatus.UNDISCOVERABLE);
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
          	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
          	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getRegSvc().setNfLoadChange(0);
//          	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//          	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
          	
          	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
          	nrfConfig.getSubSvc().setNotify(new Notify());
          	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
          	
          	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
            nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
          	
          	List<Plmn> plmnList = new ArrayList<>();
              plmnList.add(new Plmn("310", "14"));
//          	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
          	
          	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
           String nfInstanceId = profile.getNfInstanceId();
           
           // Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),90);
           Date now = new Date();
   		   NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
   		   
           when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
           NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
           
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
           
           Assert.assertNotNull(resp.getNfProfile());
           Assert.assertEquals(profile, resp.getNfProfile());
           Assert.assertEquals(NFStatus.UNDISCOVERABLE,profile.getNfStatus());
           Assert.assertEquals(resp.getNfProfile().getHeartBeatTimer(), new Integer(120));
    }
    
    @Test
    public void testAddNfHeartBeatRecord_returnsInternalError() throws Exception {
           NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
   		   URI nfInstanceUri = new URI(location);
   		NrfConfigurations nrfConfig = new NrfConfigurations();
    	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
    	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getRegSvc().setNfLoadChange(0);
//    	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//    	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
    	
    	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.getSubSvc().setNotify(new Notify());
    	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
    	
    	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
    	
    	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
//    	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
    	
    	service.setNrfConfig(nrfConfig);
           String nfInstanceId = profile.getNfInstanceId();
           // Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
           Date now = new Date();
   		   NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
   		   
           when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
           NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(null);                    
           
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
           Assert.assertNotNull(resp.getProblemDetails());
           System.err.println(resp.getHttpStatusCode());
           Assert.assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, resp.getHttpStatusCode());
           verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
           List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
           List<String> logs = new ArrayList<String>();
           for(LogEvent logEvt:loggingEvent) {
        	   logs.add(logEvt.getMessage().getFormattedMessage());
           }
           Assert.assertTrue(logs.toString().contains("NF profile record created successfully for nfInstanceId, nfInstanceId="+ nfInstanceId));
           Assert.assertTrue(logs.toString().contains("NF registration failed with problemDetails, problemDetails="+ resp.getProblemDetails()));
           Mockito.verify(nrfEventManager, Mockito.never()).recordNrfEvent(any(), any());
    }
   		


    @Test
    public void testAddOrReplaceNfProfile_returnsReplacedProfile() throws Exception {
           NrfConfigurations nrfConfig = new NrfConfigurations();
           nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
           nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
    	   String nfInstanceId = UUID.randomUUID().toString();
	       NfProfile pcfProfile = TestDataGenerator.generateNF("PCF");
	       pcfProfile.setNfInstanceId(nfInstanceId);
	       NfInstance inst = new NfInstance(pcfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
	       CustomNfInstance customNfInstance = new CustomNfInstance(inst, null);
    	   when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,NF_UPDATE)).thenReturn(customNfInstance);
    	   NfProfile profile = TestDataGenerator.generateNF("PCF");
    	   profile.setCapacity(450);
    	   profile.setLoad(84);
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
          	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
          	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getRegSvc().setNfLoadChange(0);
//          	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//          	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
          	
          	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
          	nrfConfig.getSubSvc().setNotify(new Notify());
          	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
          	when(nfDbServiceImpl.findNfInstanceForNfRegister(nfInstanceId)).thenReturn(customNfInstance);
    		List<Plmn> plmnList = new ArrayList<>();
              plmnList.add(new Plmn("310", "14"));
//          	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
          	
          	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
    	   // Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
    	   profile.setNfInstanceId(nfInstanceId);
           NfInstance dao = new NfInstance(profile, "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
           when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(nfInstanceId,null)).thenReturn(statusDao);
           Date now = new Date();
   		   NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
   		   
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
           Assert.assertNotNull(resp.getNfProfile());
           NfProfile data = resp.getNfProfile();
           Assert.assertEquals(nfInstanceId, data.getNfInstanceId()); 
           Assert.assertEquals("PCF", data.getNfType());
           Assert.assertEquals(dao.getRecordOwner(), nrfConfig.getGlobalConfig().getNrfInstanceId());
           
           Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
       			.tag("dbOperation",FIND).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfUpdate_find_nfInstances_200_OK+1,0);
       	         
    }
    
    @Test
    public void testAddOrReplaceNfProfile_whenNfTypeChangeIsRequested() throws Exception {
    	   NrfConfigurations nrfConfig = new NrfConfigurations();
    	   nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
           nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
    	   String nfInstanceId = UUID.randomUUID().toString();
	       NfProfile amfProfile = TestDataGenerator.generateNF("AMF");
	       amfProfile.setNfInstanceId(nfInstanceId);
	       NfInstance inst = new NfInstance(amfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
	       CustomNfInstance customNfInstance = new CustomNfInstance(inst, null);
    	   when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,NF_UPDATE)).thenReturn(customNfInstance);
    	   when(nfDbServiceImpl.findNfInstanceForNfRegister(nfInstanceId)).thenReturn(customNfInstance);
   		   NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           
          	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
          	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getRegSvc().setNfLoadChange(0);
//          	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//          	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
          	
          	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
          	nrfConfig.getSubSvc().setNotify(new Notify());
          	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
          	
          	List<Plmn> plmnList = new ArrayList<>();
              plmnList.add(new Plmn("310", "14"));
//          	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
          	
          	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
    	   // Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
    	   profile.setNfInstanceId(nfInstanceId);
           NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(nfInstanceId,null)).thenReturn(statusDao);
           Date now = new Date();
   		   NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
   		   
   		   boolean isNrfExceptionThrown = false;
   		   try {
   			Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
   		   }
           catch(NrfException e) {
        	   ProblemDetails excpectedProb = ProblemDetails.forBadRequest();
        	   excpectedProb.setDetail("Invalid input data");
        	   excpectedProb.addInvalidParam(new InvalidParam("nfType", "nfType cannot be updated in an existing profile"));
        	   ProblemDetails actualProb = e.getProbDetails();
        	   assertEquals(excpectedProb, actualProb);
        	   isNrfExceptionThrown = true;
           }
   		   Assert.assertTrue(isNrfExceptionThrown);
   		   Mockito.verify(nrfEventManager, Mockito.never()).recordNrfEvent(any(), any());
    }

    @Test
    public void testUpdateHeartBeatRecord_returnsSuspendedHbRecord() throws Exception {
 
    	String nfInstanceId = UUID.randomUUID().toString();
    	String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+nfInstanceId;
    	NrfConfigurations nrfConfig = new NrfConfigurations();
    	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
    	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig()); 
    	nrfConfig.getGlobalConfig().setNrfInstanceId("6fbf1bbd-6f4a-4454-a507-b14ef8e1bc6f)");
    	service.setNrfConfig(nrfConfig);

    	
    	NfProfile profile = TestDataGenerator.generateNF("AMF");
    	profile.setNfInstanceId(nfInstanceId);	       
    	NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
    	NfStatusMonitor inst = new NfStatusMonitor(nfHeartBeat,nrfConfig.getGlobalConfig().getNrfInstanceId());
    	when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(nfInstanceId,null)).thenReturn(inst);
    	profile.setNfStatus(NFStatus.SUSPENDED);

    	// Verify the following:
    	// NfStatus is updated to SUSPENDED
    	// Suspended TimeStamp is updated           
    	// lastHbTimeStamp is updated
       	NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
       	service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
    	Object o = service.updateHeartBeatRecord(profile,null);
    	Assert.assertTrue(o instanceof NfStatusMonitor);
    	NfStatusMonitor nfStatusMonitor = (NfStatusMonitor) o;      	   
    	Assert.assertEquals(NFStatus.SUSPENDED, nfStatusMonitor.getNfStatus());
    	Assert.assertNotNull(nfStatusMonitor.getSuspendedTimestamp());
    	Assert.assertNotNull(nfStatusMonitor.getLastUpdateFromNFTimestamp());    

    	inst.setNfStatus(NFStatus.SUSPENDED);
    	inst.setSuspendedTimestamp(EpochTime.fetchEpochFromDate(new Date()));       
    	Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
       			.tag("dbOperation",FIND).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_find_nfStatusMonitor_200_OK+1,0);
     
    }
    
    @Test
    public void testUpdateHeartBeatRecord_returnsRegisteredHbRecord() throws Exception {
    	
    	NrfConfigurations nrfConfig = new NrfConfigurations();
    	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	String nfInstanceId = UUID.randomUUID().toString();
       	String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+nfInstanceId;
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
    	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig()); 
    	nrfConfig.getGlobalConfig().setNrfInstanceId("6fbf1bbd-6f4a-4454-a507-b14ef8e1bc6f)");
    	service.setNrfConfig(nrfConfig);

    	
    	NfProfile profile = TestDataGenerator.generateNF("AMF");
    	profile.setNfInstanceId(nfInstanceId);	       
    	NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.SUSPENDED, 50,profile.getHeartBeatTimer());
    	System.out.println(nfHeartBeat);
    	NfStatusMonitor inst = new NfStatusMonitor(nfHeartBeat,nrfConfig.getGlobalConfig().getNrfInstanceId());
    	when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(inst);
    	profile.setNfStatus(NFStatus.REGISTERED);
    	profile.setLoad(55);

    	// Verify the following:
    	// NfStatus is updated to REGISTERED
    	// Suspended TimeStamp is set to null
    	// nfLoad and lastNotifLoad are updated with the profile's load (56)
    	// lastHbTimeStamp is updated
       	NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
       	service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
    	Object o = service.updateHeartBeatRecord(profile,null);
    	Assert.assertTrue(o instanceof NfStatusMonitor);
    	NfStatusMonitor nfStatusMonitor = (NfStatusMonitor) o;           
    	Assert.assertEquals(NFStatus.REGISTERED, nfStatusMonitor.getNfStatus());
    	Assert.assertEquals(0,nfStatusMonitor.getSuspendedTimestamp());
    	Assert.assertNotNull(nfStatusMonitor.getLastUpdateFromNFTimestamp());
    	String string = getDocBasedOnVersion("v1", new ObjectMapper().readValue(nfStatusMonitor.getNfStatusMonitorJsonDocList(), VersionedJsonDocList.class).getVersionedJsonDocList());
    	NfStatusMonitorDoc nfStatusMonitorDoc = new ObjectMapper().readValue(string, NfStatusMonitorDoc.class);
    	System.out.println(profile.getLoad());
    	System.out.println(nfStatusMonitorDoc.getNfLoad());
    	Assert.assertEquals(profile.getLoad(), nfStatusMonitorDoc.getNfLoad());
    	Assert.assertEquals(profile.getLoad(), nfStatusMonitorDoc.getLastNotifLoad());

    	//VersionedJsonDocList versionJsonDocList = objectMapper.readValue(inst.getNfStatusMonitorJsonDocList(), VersionedJsonDocList.class);
    	
    	String str = getDocBasedOnVersion(version, new ObjectMapper().readValue(inst.getNfStatusMonitorJsonDocList(),VersionedJsonDocList.class).getVersionedJsonDocList());
    	NfStatusMonitorDoc statusDoc = objectMapper.readValue(str, NfStatusMonitorDoc.class);
    	statusDoc.setNfLoad(70);
    	statusDoc.setLastNotifLoad(69);
    	
    	inst = modifyVersionSpecificNfStatusMonitorData(version, statusDoc.toString(), inst);

    	when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(inst);

    	profile.setLoad(70);
    	o = service.updateHeartBeatRecord(profile,null);

    	// Verify the following:
    	// NfStatus is updated to REGISTERED
    	// Suspended TimeStamp is set to null
    	// nfLoad is updated with the profile's load (70)
    	// lastHbTimeStamp is updated
    	// lastNotifLoad is not updated as the profile's value is 70 and lastNotifLoad is 69
    	Assert.assertTrue(o instanceof NfStatusMonitor);
    	NfStatusMonitor statusMonitor = (NfStatusMonitor) o;        
    	Assert.assertEquals(NFStatus.REGISTERED, statusMonitor.getNfStatus());
    	Assert.assertEquals(0,statusMonitor.getSuspendedTimestamp());
    	Assert.assertNotNull(statusMonitor.getLastUpdateFromNFTimestamp());
    	string = getDocBasedOnVersion("v1", new ObjectMapper().readValue(statusMonitor.getNfStatusMonitorJsonDocList(), VersionedJsonDocList.class).getVersionedJsonDocList());
    	nfStatusMonitorDoc = new ObjectMapper().readValue(string, NfStatusMonitorDoc.class);
    	Assert.assertEquals(profile.getLoad(), nfStatusMonitorDoc.getNfLoad());
    	Assert.assertNotEquals(profile.getLoad(), nfStatusMonitorDoc.getLastNotifLoad());  

    	//versionJsonDoc = objectMapper.readValue(inst.getNfStatusMonitorJsonDocList(), VersionedJsonDocList.class);
    	str = getDocBasedOnVersion(version, new ObjectMapper().readValue(inst.getNfStatusMonitorJsonDocList(),VersionedJsonDocList.class).getVersionedJsonDocList());
    	statusDoc = objectMapper.readValue(str, NfStatusMonitorDoc.class);
    	statusDoc.setNfLoad(65);
    	statusDoc.setLastNotifLoad(65);
    	
    	inst.setNfStatus(NFStatus.REGISTERED);
    	inst.setSuspendedTimestamp(0L);
    	
    	inst = modifyVersionSpecificNfStatusMonitorData(version, statusDoc.toString(), inst);

    	when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(inst);

    	profile.setLoad(60);
    	profile.setNfStatus(NFStatus.REGISTERED);
    	o = service.updateHeartBeatRecord(profile,null);

    	// Verify the following:
    	// NfStatus is updated to REGISTERED
    	// Suspended TimeStamp is set to null
    	// nfLoad is updated with the profile's load (60)
    	// lastHbTimeStamp is updated
    	// lastNotifLoad is updated as the profile's value is 60 and lastNotifLoad is 65
    	Assert.assertTrue(o instanceof NfStatusMonitor);
    	statusMonitor = (NfStatusMonitor) o;
    	Assert.assertEquals(NFStatus.REGISTERED, statusMonitor.getNfStatus());
    	Assert.assertEquals(0,statusMonitor.getSuspendedTimestamp());
    	Assert.assertNotNull(statusMonitor.getLastUpdateFromNFTimestamp());
    	string = getDocBasedOnVersion("v1", new ObjectMapper().readValue(statusMonitor.getNfStatusMonitorJsonDocList(), VersionedJsonDocList.class).getVersionedJsonDocList());
    	nfStatusMonitorDoc = new ObjectMapper().readValue(string, NfStatusMonitorDoc.class);
    	Assert.assertEquals(profile.getLoad(), nfStatusMonitorDoc.getNfLoad());
    	Assert.assertEquals(profile.getLoad(), nfStatusMonitorDoc.getLastNotifLoad());           
    	Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
       			.tag("dbOperation",FIND).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_find_nfStatusMonitor_200_OK+3,0);
    	        
    }
    
    @Test
    public void testAddOrReplaceNfProfile_returnsInternalError() throws Exception {
           NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//       	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	
       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
           String nfInstanceId = profile.getNfInstanceId();
           when(nfDbServiceImpl.findNfInstanceByNfInstanceId(any(),any(),any())).thenReturn(null);
           NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfRepository.save(any())).thenReturn(null);
           Date now = new Date();
   		   NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
   		   
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
           
           Assert.assertNotNull(resp.getProblemDetails());
           System.err.println(resp.getHttpStatusCode());
           Assert.assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, resp.getHttpStatusCode());
           verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
           List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
           List<String> logs = new ArrayList<String>();
           for(LogEvent logEvt:loggingEvent) {
        	   logs.add(logEvt.getMessage().getFormattedMessage());
           }
           Assert.assertTrue(logs.toString().contains("NF registration failed with problemDetails, problemDetails="+ resp.getProblemDetails()));
           Mockito.verify(nrfEventManager, Mockito.never()).recordNrfEvent(any(), any());
    }

    /*
     *  Given - NfProfile for update with nfStatus 'SUSPENDED' and it already 
     *          exists in database in 'SUSPENDED' state
     *  
     *  When - NfPutInstance
     * 
     *  Then - nfInstance,heartBeat in Databases gets modified but no Notification 
     *         gets generated.
     */
    @Test
    public void testAddOrReplaceNfProfile_whenPutNfInstanceUpdateInSuspendedState_thenReturnResponseWithNoNotificationGenerated() throws Exception {
    	
    	NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//       	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");

       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
    	profile.setNfStatus(NFStatus.SUSPENDED);
    	String nfInstanceId = profile.getNfInstanceId();
    	
    	NfInstance inst = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    	profile.setLoad(11);

    	boolean notificationSent = false;

    	try {
    		CustomNfInstance customNfInstance = new CustomNfInstance(inst, null);
    		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,NF_UPDATE)).thenReturn(customNfInstance);
    		when(nfDbServiceImpl.findNfInstanceForNfRegister(nfInstanceId)).thenReturn(customNfInstance);
    		Date now = new Date();
    		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
    		
    		NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.SUSPENDED, 50,profile.getHeartBeatTimer());
    		NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());

    		when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(nfStatusMonitor);

    		NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);

    		nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.SUSPENDED, 11,profile.getHeartBeatTimer());
    		nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		NfStatusMonitorDoc doc = new NfStatusMonitorDoc(nfHeartBeat,this.nrfConfigurations.getGlobalConfig().getNrfInstanceId(),new Date());
    		doc.setCreationTimestamp(nfStatusMonitor.getLastUpdateTimestamp());
    		doc.setLastNotifLoad(50);
    		nfStatusMonitor = modifyVersionSpecificNfStatusMonitorData("v1", doc.toString(), nfStatusMonitor);
    		when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);

    		doThrow(NrfException.class).when(client).sendNotificationEvent(any(),any(),any());

    		Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
    		Assert.assertTrue(o instanceof NfPutResponse);
    		NfPutResponse resp = (NfPutResponse) o;

    		Assert.assertNotNull(resp.getNfProfile());
    		NfProfile data = resp.getNfProfile();
    		Assert.assertEquals(profile, data);
    	     Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
         			.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK+1,0);
         	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
         					.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK+1,0);
    	}catch(NrfException e) {
    		notificationSent = true;
    	}
    	Assert.assertFalse(notificationSent);
    }
    
   
    @Test
    public void testAddOrReplaceNfProfile_whenPutNfInstanceUpdateInUndiscoverableState_thenReturnResponseWithNoNotificationGenerated() throws Exception {
    	
    	NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//       	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");

       	
       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
    	profile.setNfStatus(NFStatus.UNDISCOVERABLE);
    	String nfInstanceId = profile.getNfInstanceId();
    	
    	NfInstance inst = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    	profile.setLoad(11);

    	boolean notificationSent = false;

    	try {
    		CustomNfInstance customNfInstance = new CustomNfInstance(inst, null);
    		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,NF_UPDATE)).thenReturn(customNfInstance);
    		Date now = new Date();
    		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
    		
    		NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.UNDISCOVERABLE, 50,profile.getHeartBeatTimer());
    		NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());

    		when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(nfStatusMonitor);
    		when(nfDbServiceImpl.findNfInstanceForNfRegister(nfInstanceId)).thenReturn(customNfInstance);
    		NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);

    		nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.UNDISCOVERABLE, 11,profile.getHeartBeatTimer());
    		nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		NfStatusMonitorDoc doc = new NfStatusMonitorDoc(nfHeartBeat,this.nrfConfigurations.getGlobalConfig().getNrfInstanceId(),new Date());
    		doc.setCreationTimestamp(nfStatusMonitor.getLastUpdateTimestamp());
    		doc.setLastNotifLoad(50);
    		nfStatusMonitor = modifyVersionSpecificNfStatusMonitorData("v1", doc.toString(), nfStatusMonitor);
//    		nfStatusMonitor.setLastNotifLoad(50);
    		when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);

    		doThrow(NrfException.class).when(client).sendNotificationEvent(any(),any(),any());

    		Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
    		Assert.assertTrue(o instanceof NfPutResponse);
    		NfPutResponse resp = (NfPutResponse) o;

    		Assert.assertNotNull(resp.getNfProfile());
    		NfProfile data = resp.getNfProfile();
    		Assert.assertEquals(profile, data);
    		 Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
          			.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK+1,0);
          	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
          					.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK+1,0);
    	}catch(NrfException e) {
    		notificationSent = true;
    	}
    	Assert.assertFalse(notificationSent);
    	ArgumentCaptor<NfProfile> argument1 = ArgumentCaptor.forClass(NfProfile.class);
        ArgumentCaptor<Events> argument2 = ArgumentCaptor.forClass(Events.class);
        Mockito.verify(nrfEventManager).recordNrfEvent(argument1.capture(),argument2.capture());
        Assert.assertEquals(Events.NFPROFILE_UPDATE_PUT_EVENT, argument2.getValue());
        Assert.assertEquals(profile,argument1.getValue());
    }
    
    @Test
    public void testAddOrReplaceNfProfile_whenPutNfInstanceUpdateInUndiscoverableState_then_Remote_Put_Event() throws Exception {
    	
    	NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//       	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");

       	
       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
    	profile.setNfStatus(NFStatus.UNDISCOVERABLE);
    	String nfInstanceId = profile.getNfInstanceId();
    	
    	NfInstance inst = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    	profile.setLoad(11);

    	boolean notificationSent = false;

    		CustomNfInstance customNfInstance = new CustomNfInstance(inst, "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5d");
    		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,NF_UPDATE)).thenReturn(customNfInstance);
    		Date now = new Date();
    		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
    		
    		NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.UNDISCOVERABLE, 50,profile.getHeartBeatTimer());
    		NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());

    		when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(nfStatusMonitor);
    		when(nfDbServiceImpl.findNfInstanceForNfRegister(nfInstanceId)).thenReturn(customNfInstance);
    		NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);

    		nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.UNDISCOVERABLE, 11,profile.getHeartBeatTimer());
    		nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		String  str = getDocBasedOnVersion("v1",new ObjectMapper().readValue(nfStatusMonitor.getNfStatusMonitorJsonDocList(), VersionedJsonDocList.class).getVersionedJsonDocList());
    		NfStatusMonitorDoc doc = new ObjectMapper().readValue(str, NfStatusMonitorDoc.class);
    		doc.setLastNotifLoad(50);
    		nfStatusMonitor = modifyVersionSpecificNfStatusMonitorData("v1",doc.toString(), nfStatusMonitor);
    		when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);


    		Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
    		Assert.assertTrue(o instanceof NfPutResponse);
    		NfPutResponse resp = (NfPutResponse) o;

    		Assert.assertNotNull(resp.getNfProfile());
    		NfProfile data = resp.getNfProfile();
    		Assert.assertEquals(profile, data);
    		 Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
          			.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK+1,0);
          	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
          					.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK+1,0);
    	ArgumentCaptor<NfProfile> argument1 = ArgumentCaptor.forClass(NfProfile.class);
        ArgumentCaptor<Events> argument2 = ArgumentCaptor.forClass(Events.class);
        Mockito.verify(nrfEventManager).recordNrfEvent(argument1.capture(),argument2.capture());
        Assert.assertEquals(Events.NFPROFILE_SITE_HANDOVER_PUT_EVENT, argument2.getValue());
        Assert.assertEquals(profile,argument1.getValue());
    }

    /*
     *  Given - NfProfile for update with nfStatus 'SUSPENDED' and it already 
     *          exists in database in 'REGISTERED' state
     *  
     *  When - NfPutInstance
     * 
     *  Then - nfInstance,heartBeat in Databases gets modified and Notification 
     *         gets generated.
     */
    @Test
    public void testAddOrReplaceNfProfile_whenPutNfInstanceUpdateNfStatusToRegistered_thenReturnResponseWithNotificationGenerated() throws Exception {
    	
    	NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//       	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
       	nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
    	profile.setNfStatus(NFStatus.SUSPENDED);
    	String nfInstanceId = profile.getNfInstanceId();
    	
    	NfInstance inst = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    	profile.setLoad(11);
    	profile.setNfStatus(NFStatus.REGISTERED);
    	
    	boolean notificationSent = false;

    	try {
    		CustomNfInstance customNfInstance = new CustomNfInstance(inst, null);
    		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,NF_UPDATE)).thenReturn(customNfInstance);
    		Date now = new Date();
    		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
    		when(nfDbServiceImpl.findNfInstanceForNfRegister(nfInstanceId)).thenReturn(customNfInstance);
    		NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.SUSPENDED, 50,profile.getHeartBeatTimer());
    		NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());

    		when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(nfStatusMonitor);

    		NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);

    		nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, 11,profile.getHeartBeatTimer());
    		nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);

    		doThrow(NrfException.class).when(client).sendNotificationEvent(any(),any(),any());

    		Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
    		ArgumentCaptor<NfProfile> argument1 = ArgumentCaptor.forClass(NfProfile.class);
            ArgumentCaptor<Events> argument2 = ArgumentCaptor.forClass(Events.class);
            Mockito.verify(nrfEventManager).recordNrfEvent(argument1.capture(),argument2.capture());
            Assert.assertEquals(Events.NFPROFILE_UPDATE_PUT_EVENT, argument2.getValue());
            Assert.assertEquals(profile,argument1.getValue());
    		Assert.assertTrue(o instanceof NfPutResponse);
    		NfPutResponse resp = (NfPutResponse) o;

    		Assert.assertNotNull(resp.getNfProfile());
    		NfProfile data = resp.getNfProfile();
    		Assert.assertEquals(profile, data);
    		 Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
           			.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK+1,0);
           	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
           					.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK+1,0);

    	}catch(NrfException e) {
    		notificationSent = true;
    	}
    	Assert.assertTrue(notificationSent);
    	
    	verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
    	List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
    	List<String> logs = new ArrayList<String>();
    	for(LogEvent logEvt:loggingEvent) {
    		logs.add(logEvt.getMessage().getFormattedMessage());
    	}
    	Assert.assertTrue(logs.toString().contains("NF profile already exists for nfInstanceId, nfInstanceId="+ nfInstanceId));
      	Assert.assertTrue(logs.toString().contains("NF profile & heartbeat record updated successfully for nfInstanceId, nfInstanceId="+ nfInstanceId));
    }
    
    /*
     *  Given - NfProfile for update with nfStatus 'UNDISCOVERABLE' and it already 
     *          exists in database in 'REGISTERED' state
     *  
     *  When - NfPutInstance
     * 
     *  Then - nfInstance,heartBeat in Databases gets modified and Notification 
     *         gets generated.
     */
    @Test
    public void testAddOrReplaceNfProfile_whenPutNfInstanceUpdateNfStatusToRegisteredFromUndiscoverable_thenReturnResponseWithNotificationGenerated() throws Exception {
    	
    	NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//       	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	
       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
    	profile.setNfStatus(NFStatus.UNDISCOVERABLE);
    	String nfInstanceId = profile.getNfInstanceId();
    	
    	NfInstance inst = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    	profile.setLoad(11);
    	profile.setNfStatus(NFStatus.REGISTERED);
    	
    	boolean notificationSent = false;

    	try {
    		CustomNfInstance customNfInstance = new CustomNfInstance(inst, null);
    		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,NF_UPDATE)).thenReturn(customNfInstance);
    		Date now = new Date();
    		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
    		
    		NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.UNDISCOVERABLE, 50,profile.getHeartBeatTimer());
    		NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
            
    		when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(nfStatusMonitor);
    		when(nfDbServiceImpl.findNfInstanceForNfRegister(nfInstanceId)).thenReturn(customNfInstance);
    		NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);

    		nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, 11,profile.getHeartBeatTimer());
    		nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);

    		doThrow(NrfException.class).when(client).sendNotificationEvent(any(),any(),any());

    		Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
    		Assert.assertTrue(o instanceof NfPutResponse);
    		NfPutResponse resp = (NfPutResponse) o;

    		Assert.assertNotNull(resp.getNfProfile());
    		NfProfile data = resp.getNfProfile();
    		Assert.assertEquals(profile, data);
    		 Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
           			.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK+1,0);
           	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
           					.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK+1,0);

    	}catch(NrfException e) {
    		notificationSent = true;
    	}
    	Assert.assertTrue(notificationSent);
    	
    	verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
    	List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
    	List<String> logs = new ArrayList<String>();
    	for(LogEvent logEvt:loggingEvent) {
    		logs.add(logEvt.getMessage().getFormattedMessage());
    	}
    	Assert.assertTrue(logs.toString().contains("NF profile already exists for nfInstanceId, nfInstanceId="+ nfInstanceId));
      	Assert.assertTrue(logs.toString().contains("NF profile & heartbeat record updated successfully for nfInstanceId, nfInstanceId="+ nfInstanceId));
    }
    
    /*
     *  Given - NfProfile for update with the same profile body which exists in database
     *  
     *  When - NfPutInstance
     * 
     *  Then - no Notification gets generated.
     *         
     */
    @Test
    public void testAddOrReplaceNfProfile_whenPutNfInstanceWithSameLoad_thenReturnResponseWithNoNotificationGenerated() throws Exception {
    	
    	NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//       	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	
       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
    	profile.setNfStatus(NFStatus.REGISTERED);
    	profile.setLoad(11);
    	String nfInstanceId = profile.getNfInstanceId();
    	
    	NfInstance inst = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    	profile.setNfStatus(NFStatus.REGISTERED);
    	
    	boolean notificationSent = false;

    	try {
    		CustomNfInstance customNfInstance = new CustomNfInstance(inst, null);
    		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,NF_UPDATE)).thenReturn(customNfInstance);
    		when(nfDbServiceImpl.findNfInstanceForNfRegister(nfInstanceId)).thenReturn(customNfInstance);
    		Date now = new Date();
    		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
    		
    		NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, 11,profile.getHeartBeatTimer());
    		NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());

    		when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(nfStatusMonitor);

    		NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    	
    		when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);

    		nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, 11,profile.getHeartBeatTimer());
    		nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);

    		doThrow(NrfException.class).when(client).sendNotificationEvent(any(),any(),any());
    		//setting additional attributes as null as these are not exposed to operator
    		profile.setAdditionalAttributes(null);

    		Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
    		Assert.assertTrue(o instanceof NfPutResponse);
    		NfPutResponse resp = (NfPutResponse) o;

    		Assert.assertNotNull(resp.getNfProfile());
    		NfProfile data = resp.getNfProfile();
    		Assert.assertEquals(profile, data);
    		 Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
           			.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK+1,0);
           	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
           					.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK+1,0);

    	}catch(NrfException e) {
    		notificationSent = true;
    	}
    	Assert.assertFalse(notificationSent);
    	
    	verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
    	List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
    	List<String> logs = new ArrayList<String>();
    	for(LogEvent logEvt:loggingEvent) {
    		logs.add(logEvt.getMessage().getFormattedMessage());
    	}
    	Assert.assertTrue(logs.toString().contains("NF profile already exists for nfInstanceId, nfInstanceId="+ nfInstanceId));
      	Assert.assertTrue(logs.toString().contains("NF profile & heartbeat record updated successfully for nfInstanceId, nfInstanceId="+ nfInstanceId));
    }

    /*
     *  Given - NfProfile for update with nfStatus 'REGISTERED' and it already 
     *          exists in database in 'SUSPENDED' state
     *  
     *  When - NfPutInstance
     * 
     *  Then - nfInstance,heartBeat in Databases gets modified and Notification 
     *         gets generated.
     */
    @Test
    public void testAddOrReplaceNfProfile_whenPutNfInstanceUpdateNfStatusToSuspended_thenReturnResponseWithNotificationGenerated() throws Exception {
    	
    	NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//       	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	
       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
    	profile.setNfStatus(NFStatus.REGISTERED);
    	String nfInstanceId = profile.getNfInstanceId();
    	
    	NfInstance inst = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    	profile.setLoad(11);
    	profile.setNfStatus(NFStatus.SUSPENDED);
    	
    	boolean notificationSent = false;

    	try {
    		CustomNfInstance customNfInstance = new CustomNfInstance(inst, null);
    		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,NF_UPDATE)).thenReturn(customNfInstance);
    		Date now = new Date();
    		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
    		
    		NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, 50,profile.getHeartBeatTimer());
    		NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());

    		when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(nfStatusMonitor);

    		NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);

    		nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, 11,profile.getHeartBeatTimer());
    		nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);

    		doThrow(NrfException.class).when(client).sendNotificationEvent(any(),any(),any());

    		Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
    		Assert.assertTrue(o instanceof NfPutResponse);
    		NfPutResponse resp = (NfPutResponse) o;

    		Assert.assertNotNull(resp.getNfProfile());
    		NfProfile data = resp.getNfProfile();
    		Assert.assertEquals(profile, data);
    		 Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
           			.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK+1,0);
           	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
           					.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK+1,0);

    	}catch(NrfException e) {
    		notificationSent = true;
    	}
    	Assert.assertTrue(notificationSent);
    }

    @Test
    public void testAddOrReplaceNfProfile_whenPutNfInstanceUpdateNfStatusToUndiscoverable_thenReturnResponseWithNotificationGenerated() throws Exception {
    	
    	NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//       	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	
       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
    	profile.setNfStatus(NFStatus.REGISTERED);
    	String nfInstanceId = profile.getNfInstanceId();
    	
    	NfInstance inst = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    	profile.setLoad(11);
    	profile.setNfStatus(NFStatus.UNDISCOVERABLE);
    	
    	boolean notificationSent = false;

    	try {
    		CustomNfInstance customNfInstance = new CustomNfInstance(inst, null);
    		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,NF_UPDATE)).thenReturn(customNfInstance);
    		Date now = new Date();
    		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
    		
    		NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, 50,profile.getHeartBeatTimer());
    		NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());

    		when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(nfStatusMonitor);

    		NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);

    		nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, 11,profile.getHeartBeatTimer());
    		nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);

    		doThrow(NrfException.class).when(client).sendNotificationEvent(any(),any(),any());

    		Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
    		Assert.assertTrue(o instanceof NfPutResponse);
    		NfPutResponse resp = (NfPutResponse) o;

    		Assert.assertNotNull(resp.getNfProfile());
    		NfProfile data = resp.getNfProfile();
    		Assert.assertEquals(profile, data);
    		 Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
           			.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK+1,0);
           	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
           					.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK+1,0);

    	}catch(NrfException e) {
    		notificationSent = true;
    	}
    	Assert.assertTrue(notificationSent);
    }

    /*
     *  Given - NfProfile for update with nfStatus 'REGISTERED' and it already 
     *          exists in database in 'REGISTERED' state
     *  
     *  When - NfPutInstance
     * 
     *  Then - nfInstance,heartBeat in Databases gets modified and Notification 
     *         gets generated.
     */
    @Test
    public void testAddOrReplaceNfProfile_whenPutNfInstanceUpdateNfStatusToRegistered_whenItIsAlreadyInRegistered_thenReturnResponseWithNotificationGenerated() throws Exception {
    	
    	NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//       	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	
       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
    	profile.setNfStatus(NFStatus.REGISTERED);
    	String nfInstanceId = profile.getNfInstanceId();
    	
    	NfInstance inst = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    	profile.setLoad(11);
    	
    	boolean notificationSent = false;

    	try {
    		CustomNfInstance customNfInstance = new CustomNfInstance(inst, null);
    		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,NF_UPDATE)).thenReturn(customNfInstance);
    		when(nfDbServiceImpl.findNfInstanceForNfRegister(nfInstanceId)).thenReturn(customNfInstance);
    		Date now = new Date();
    		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
    		
    		NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, 50,profile.getHeartBeatTimer());
    		NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());

    		when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(nfStatusMonitor);

    		NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);

    		nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, 11,profile.getHeartBeatTimer());
    		nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
    		when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);

    		doThrow(NrfException.class).when(client).sendNotificationEvent(any(),any(),any());

    		Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
    		Assert.assertTrue(o instanceof NfPutResponse);
    		NfPutResponse resp = (NfPutResponse) o;

    		Assert.assertNotNull(resp.getNfProfile());
    		NfProfile data = resp.getNfProfile();
    		Assert.assertEquals(profile, data);
    		 Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
           			.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK+1,0);
           	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
           					.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK+1,0);

    	}catch(NrfException e) {
    		notificationSent = true;
    	}
    	Assert.assertTrue(notificationSent);
    	verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
    	List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
    	List<String> logs = new ArrayList<String>();
    	for(LogEvent logEvt:loggingEvent) {
    		logs.add(logEvt.getMessage().getFormattedMessage());
    	}
    	Assert.assertTrue(logs.toString().contains("NF profile already exists for nfInstanceId, nfInstanceId="+ nfInstanceId));
    	Assert.assertTrue(logs.toString().contains("NF profile & heartbeat record updated successfully for nfInstanceId, nfInstanceId="+ nfInstanceId));
    }
        
	@Test
	public void getAllNfIds_returnsBlankList() throws Exception {
		ArrayList<NfInstance> list = new ArrayList<NfInstance>();
		
		when(nfRepository.findByNfStatus(NFStatus.REGISTERED)).thenReturn(list);
		
		Object o = service.getAllNfIds(null, -1);
		Assert.assertEquals(list, o);
		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
				.tag("dbOperation",FIND).tag("serviceOperation","NfListRetrieval").tag("HttpStatusCode",String.valueOf((HttpStatus.NOT_FOUND).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfListRetrieval_find_nfInstances_404_NOT_FOUND+1,0);
	}
	
	@Test
	public void getAllNfIds_returnsList() throws Exception {
		NrfConfigurations nrfConfig = new NrfConfigurations();
		nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
		ArrayList<String> list = new ArrayList<String>();
		list.add(UUID.randomUUID().toString());
		list.add(UUID.randomUUID().toString());
		list.add(UUID.randomUUID().toString());
		list.add(UUID.randomUUID().toString());
		NfProfile profile = TestDataGenerator.generateNF("AMF");
		when(nfDbServiceImpl.findAllDistinctNfInstanceId()).thenReturn(list);
		NfInstance inst = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		CustomNfInstance customNfInstance = new CustomNfInstance(inst, null);
		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(any(),any(),any())).thenReturn(customNfInstance);
		Object o = service.getAllNfIds(null, -1);
		Assert.assertTrue(o instanceof List);
		List<String> retL = (List<String>) o;
		for(String sub:list) {
			Assert.assertTrue(retL.contains(sub));			
		}
		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
				.tag("dbOperation",FIND).tag("serviceOperation","NfListRetrieval").tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfListRetrieval_find_nfInstances_200_OK+1,0);
	}
	
	@Test
	public void getAllNfIds_returnsNfTypeList() throws Exception {
		NrfConfigurations nrfConfig = new NrfConfigurations();
		nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
		NfProfile profile1=TestDataGenerator.generateNF("AMF");
		NfProfile profile2=TestDataGenerator.generateNF("AMF");
		ArrayList<String> list1 = new ArrayList<String>();
		list1.add(UUID.randomUUID().toString());
		list1.add(UUID.randomUUID().toString());
		list1.add(UUID.randomUUID().toString());
		list1.add(UUID.randomUUID().toString());
		
		ArrayList<String> list2 = new ArrayList<String>();
		list2.add(UUID.randomUUID().toString());
		list2.add(UUID.randomUUID().toString());
		
		when(nfDbServiceImpl.findAllDistinctNfInstanceId()).thenReturn(list1);
		when(nfDbServiceImpl.findDistinctNfInstanceIdByNfType("AMF")).thenReturn(list2);
		NfInstance inst = new NfInstance(profile1, nrfConfig.getGlobalConfig().getNrfInstanceId());
		CustomNfInstance customNfInstance = new CustomNfInstance(inst, null);
		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(any(),any(),any())).thenReturn(customNfInstance);
		
		Object o = service.getAllNfIds("AMF", -1);
		Assert.assertTrue(o instanceof List);
		ObjectMapper om = new ObjectMapper();
		List<String> retL = (List<String>) o;
		Assert.assertEquals(list2.size(), retL.size());
		for(String sub:list2) {
			Assert.assertTrue(retL.contains(sub));
		}
		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
				.tag("dbOperation",FIND).tag("serviceOperation","NfListRetrieval").tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfListRetrieval_find_nfInstances_200_OK+1,0);
	}
	
	@Test
	public void getAllNfIds_returnsNfTypeListWithLimit() throws Exception {
		NrfConfigurations nrfConfig = new NrfConfigurations();
		nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
		NfProfile profile1=TestDataGenerator.generateNF("AMF");
		NfProfile profile2=TestDataGenerator.generateNF("AMF");
		ArrayList<String> list1 = new ArrayList<String>();
		list1.add(profile1.getNfInstanceId());
		list1.add(profile2.getNfInstanceId());
		list1.add(UUID.randomUUID().toString());
		list1.add(UUID.randomUUID().toString());
		
		ArrayList<String> list2 = new ArrayList<String>();
		list2.add(profile1.getNfInstanceId());
		list2.add(profile2.getNfInstanceId());
		list2.add(UUID.randomUUID().toString());
		
		when(nfDbServiceImpl.findAllDistinctNfInstanceId()).thenReturn(list1);
		when(nfDbServiceImpl.findDistinctNfInstanceIdByNfType("AMF")).thenReturn(list2);
		NfInstance inst1 = new NfInstance(profile1, nrfConfig.getGlobalConfig().getNrfInstanceId());
		NfInstance inst2 = new NfInstance(profile2, nrfConfig.getGlobalConfig().getNrfInstanceId());
		CustomNfInstance customNfInstance1 = new CustomNfInstance(inst1, null);
		CustomNfInstance customNfInstance2 = new CustomNfInstance(inst2, null);
		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(profile1.getNfInstanceId(),RequestMethod.GET,"NfListRetrieval")).thenReturn(customNfInstance1);
		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(profile2.getNfInstanceId(),RequestMethod.GET,"NfListRetrieval")).thenReturn(customNfInstance2);
		
		Object o = service.getAllNfIds("AMF", 1);
		Assert.assertTrue(o instanceof List);
		List<String> retL = (List<String>) o;
		Assert.assertEquals(1, retL.size());
		Assert.assertTrue(retL.contains(list2.get(0)));
		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
				.tag("dbOperation",FIND).tag("serviceOperation","NfListRetrieval").tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfListRetrieval_find_nfInstances_200_OK+1,0);
	}
	
	@Test
	public void getAllNfs_returnsListBasedonNfType() throws Exception {
		NrfConfigurations nrfConfig = new NrfConfigurations();
		nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
		ArrayList<NfInstance> list = new ArrayList<NfInstance>();
		list.add(new NfInstance(TestDataGenerator.generateNF("PCF"), nrfConfig.getGlobalConfig().getNrfInstanceId()));
		list.add(new NfInstance(TestDataGenerator.generateNF("PCF"), nrfConfig.getGlobalConfig().getNrfInstanceId()));
		list.add(new NfInstance(TestDataGenerator.generateNF("PCF"), nrfConfig.getGlobalConfig().getNrfInstanceId()));
		list.add(new NfInstance(TestDataGenerator.generateNF("PCF"), nrfConfig.getGlobalConfig().getNrfInstanceId()));
		
		when(nfRepository.findByNfStatus(NFStatus.REGISTERED)).thenReturn(list);
		when(nfRepository.findByNfTypeAndNfStatus("PCF",NFStatus.REGISTERED)).thenReturn(list);
		
		
		Object o = service.getAllNfs("PCF");
		Assert.assertTrue(o instanceof List);
		ObjectMapper om = new ObjectMapper();
		List<NfInstance> retL = (List<NfInstance>) o;
		Assert.assertEquals(list.size(), retL.size());
		try {
		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
				.tag("dbOperation",FIND).tag("serviceOperation","NfListRetrieval").tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfListRetrieval_find_nfInstances_200_OK+1,0);
		
		}catch(Exception e) {
			e.printStackTrace();
			
		}
		
	}
	
	@Test
	public void getAllNfs_returnsBlankListBasedonNfType() throws Exception {
		ArrayList<NfInstance> list = new ArrayList<NfInstance>();
		
		when(nfRepository.findByNfStatus(NFStatus.REGISTERED)).thenReturn(list);
		
		Object o = service.getAllNfs("PCF");
		Assert.assertTrue(o instanceof ProblemDetails);
		ProblemDetails prob = (ProblemDetails) o;
		Assert.assertEquals(HttpStatus.NOT_FOUND, HttpStatus.valueOf(prob.getStatus()));
		Assert.assertEquals("No registered NF instance exists", prob.getCause());
		Assert.assertEquals("No registered NF instance exists", prob.getDetail());	
		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
				.tag("dbOperation",FIND).tag("serviceOperation","NfListRetrieval").tag("HttpStatusCode",String.valueOf((HttpStatus.NOT_FOUND).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfListRetrieval_find_nfInstances_404_NOT_FOUND+1,0);
	}	
	
	@Test
	public void getAllNfIds_returnsLimitedList() throws Exception {
		NrfConfigurations nrfConfig = new NrfConfigurations();
		nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
        NfProfile profile1 = TestDataGenerator.generateNF("AMF");
        NfProfile profile2 = TestDataGenerator.generateNF("AMF");
        NfProfile profile3 = TestDataGenerator.generateNF("AMF");
        NfProfile profile4 = TestDataGenerator.generateNF("AMF");

		ArrayList<NfInstance> list = new ArrayList<NfInstance>();
		list.add(new NfInstance(profile1, nrfConfig.getGlobalConfig().getNrfInstanceId()));
		list.add(new NfInstance(profile2, nrfConfig.getGlobalConfig().getNrfInstanceId()));
		list.add(new NfInstance(profile3, nrfConfig.getGlobalConfig().getNrfInstanceId()));
		list.add(new NfInstance(profile4, nrfConfig.getGlobalConfig().getNrfInstanceId()));

		ArrayList<String> list1 = new ArrayList<String>();
		list1.add(profile1.getNfInstanceId());
		list1.add(profile2.getNfInstanceId());
		list1.add(profile3.getNfInstanceId());
		list1.add(profile4.getNfInstanceId());

		when(nfRepository.findByNfStatus(NFStatus.REGISTERED)).thenReturn(list);
		when(nfDbServiceImpl.findDistinctNfInstanceIdByNfType(any())).thenReturn(list1);
		NfInstance nfInstance = new NfInstance(profile1, nrfConfig.getGlobalConfig().getNrfInstanceId());
		CustomNfInstance customNfInstance = new CustomNfInstance(nfInstance, null);
		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(any(),any(),any())).thenReturn(customNfInstance);
		Object o = service.getAllNfIds("AMF", 5);
		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
				.tag("dbOperation",FIND).tag("serviceOperation","NfListRetrieval").tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfListRetrieval_find_nfInstances_200_OK+1,0);
		Assert.assertTrue(o instanceof List);
		ObjectMapper om = new ObjectMapper();
		List<String> retL = (List<String>) o;
		Assert.assertEquals(list.size(), retL.size());
		for(NfInstance sub:list) {
			Assert.assertTrue(retL.contains(sub.getNfInstanceId()));
		}
		
		o = service.getAllNfIds("AMF", 3);
		Assert.assertTrue(o instanceof List);
		retL = (List<String>) o;
		Assert.assertEquals(3, retL.size());
		
		o = service.getAllNfIds("AMF", -1);
		Assert.assertTrue(o instanceof List);
		retL = (List<String>) o;
		Assert.assertEquals(list.size(), retL.size());
	}
	@Test
	public void testCreateRegistration_JsonMappingException() throws UnrecognizedPropertyException{
		
		//NfProfile profile = TestDataGenerator.generateNF("PCF");
		NfProfile profile = new NfProfile();
		profile.setNfInstanceId(UUID.randomUUID().toString());
		profile.setNfType("AMF");
		profile.setNfStatus(NFStatus.REGISTERED);
		String nfInstanceId = profile.getNfInstanceId();
		//String httpInput = "{\"nfInstanceID\":\""+nfInstanceId+"\",\"nftype\":\"PCF\",\"nfStatus\":\"REGISTERED\",\"recoveryTime\":\"2018-04-28T23:20:50Z\",\"plmn\":{\"mcc\":\"327\",\"mnc\":\"15\"},\"sNssais\":[{\"sd\":\"4eb\",\"sst\":124},{\"sd\":\"dc8\",\"sst\":54},{\"sd\":\"f46\",\"sst\":73}],\"nsiList\":[\"slice-1\",\"slice-2\"],\"fqdn\":\"AMF.d5g.oracle.com\",\"interPlmnFqdn\":\"AMF-d5g.oracle.com\",\"ipv4Addresses\":[\"192.168.2.100\",\"192.168.6.110\",\"192.168.2.110\",\"192.168.45.5\"],\"ipv6Addresses\":[\"2001:DB8:0:0:8:800:200C:417A\"],\"capacity\":2000,\"load\":0,\"locality\":\"US East\",\"amfInfo\":{\"amfSetId\":\"44866f\",\"amfRegionId\":\"amf-region-35\",\"guamiList\":[{\"plmnId\":{\"mcc\":\"594\",\"mnc\":\"75\"},\"amfId\":\"947d18\"},{\"plmnId\":{\"mcc\":\"602\",\"mnc\":\"42\"},\"amfId\":\"5f3259\"},{\"plmnId\":{\"mcc\":\"135\",\"mnc\":\"19\"},\"amfId\":\"f37f1a\"},{\"plmnId\":{\"mcc\":\"817\",\"mnc\":\"80\"},\"amfId\":\"f7a026\"}],\"taiList\":[{\"plmnId\":{\"mcc\":\"641\",\"mnc\":\"72\"},\"tac\":\"ccc0\"},{\"plmnId\":{\"mcc\":\"594\",\"mnc\":\"45\"},\"tac\":\"77db\"}],\"backupInfoAmfFailure\":[],\"backupInfoAmfRemoval\":[]},\"nfServices\":[{\"serviceInstanceId\":\"fe137ab7-740a-46ee-aa5c-951806d77b0d\",\"serviceName\":\"nnrf-nfm\",\"nfServiceStatus\":\"REGISTERED\",\"version\":[{\"apiVersionInUri\":\"v1.0\",\"apiFullVersion\":\"v1.0\",\"expiry\":1533322508871}],\"scheme\":\"https\",\"fqdn\":\"AMF.d5g.oracle.com\",\"interPlmnFqdn\":\"AMF-d5g.oracle.com\",\"apiPrefix\":\"\",\"defaultNotificationSubscriptions\":[{\"notificationType\":\"LOCATION_NOTIFICATION\",\"callbackUri\":\"http://somehost.oracle.com/callback-uri\"},{\"notificationType\":\"N1_MESSAGES\",\"callbackUri\":\"http://somehost.oracle.com/callback-uri\",\"n1MessageClass\":\"5GMM\"},{\"notificationType\":\"N2_INFORMATION\",\"callbackUri\":\"http://somehost.oracle.com/callback-uri\",\"n2InformationClass\":\"NRPPa\"}],\"allowedPlmns\":[{\"mcc\":\"904\",\"mnc\":\"47\"},{\"mcc\":\"743\",\"mnc\":\"47\"},{\"mcc\":\"222\",\"mnc\":\"23\"},{\"mcc\":\"521\",\"mnc\":\"11\"}],\"allowedNfTypes\":[\"NRF\",\"AMF\",\"AUSF\",\"BSF\",\"UDM\",\"UDR\",\"PCF\"],\"allowedNfDomains\":[\"oracle.com\",\"att.com\"],\"allowedNssais\":[{\"sd\":\"dba\",\"sst\":14},{\"sd\":\"3c9\",\"sst\":153},{\"sd\":\"5fd\",\"sst\":132}],\"capacity\":500,\"load\":0,\"supportedFeatures\":\"80000000\"}]}";
		String httpInput = "{\"nfInstanceID\":\""+nfInstanceId+"\",\"nftype\":\"AMF\",\"nfStatus\":\"REGISTERED\"}";
		ObjectMapper om = new ObjectMapper();
		try {
				NfProfile actual = om.readValue(httpInput, NfProfile.class);	
		}
		catch (Exception e) {
			System.out.println(e.getClass().getName());
		    //thrown.expect(com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.class);
			Assert.assertEquals(e.getClass().getName(), "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException");
		}
	}
	

	@Test
    public void givenNoOptionalInteger_whenPutJsonString_thenReturnJsonStructure() throws Exception {
        ObjectMapper om = new ObjectMapper();

        // Expected JSON NF Profile
        String expectedNfProfile = "{\"nfInstanceId\":\"7faf1bbc-6e4a-4454-a507-a14ef8e1bc7f\",\"nfType\":\"AUSF\",\"nfStatus\":\"REGISTERED\",\"plmnList\":[{\"mcc\":\"310\",\"mnc\":\"14\"}],\"sNssais\":[{\"sd\":\"4eb123\",\"sst\":124},{\"sd\":\"dc8123\",\"sst\":54},{\"sd\":\"f46123\",\"sst\":73}],\"nsiList\":[\"slice-1\",\"slice-2\"],\"fqdn\":\"AuSF.d5g.oracle.com\",\"interPlmnFqdn\":\"AUSF-d5g.oracle.com\",\"ipv4Addresses\":[\"192.168.2.100\",\"192.168.6.110\",\"192.168.2.110\",\"192.168.45.5\"],\"ipv6Addresses\":[\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"],\"locality\":\"US East\",\"ausfInfo\":{\"groupId\":\"12\",\"supiRanges\":[{\"start\":\"12345\",\"end\":\"45678\",\"pattern\":\"imsi-1234*\"}],\"routingIndicators\":[\"1234\"]},\"nfServices\":[{\"serviceInstanceId\":\"fe137ab7-740a-46ee-aa5c-951806d77b0d\",\"serviceName\":\"nnrf-nfm\",\"versions\":[{\"apiVersionInUri\":\"v1\",\"apiFullVersion\":\"1.R4.2.2\",\"expiry\":1533322508871}],\"scheme\":\"https\",\"nfServiceStatus\":\"REGISTERED\",\"fqdn\":\"AMF.d5g.oracle.com\",\"interPlmnFqdn\":\"AMF-d5g.oracle.com\",\"apiPrefix\":\"\",\"defaultNotificationSubscriptions\":[{\"notificationType\":\"LOCATION_NOTIFICATION\",\"callbackUri\":\"http://somehost.oracle.com/callback-uri\"},{\"notificationType\":\"N1_MESSAGES\",\"callbackUri\":\"http://somehost.oracle.com/callback-uri\",\"n1MessageClass\":\"5GMM\"},{\"notificationType\":\"N2_INFORMATION\",\"callbackUri\":\"http://somehost.oracle.com/callback-uri\",\"n2InformationClass\":\"NRPPa\"}],\"allowedPlmns\":[{\"mcc\":\"904\",\"mnc\":\"47\"},{\"mcc\":\"743\",\"mnc\":\"47\"},{\"mcc\":\"222\",\"mnc\":\"23\"},{\"mcc\":\"521\",\"mnc\":\"11\"}],\"allowedNfTypes\":[\"NRF\",\"AMF\",\"AUSF\",\"BSF\",\"UDM\",\"UDR\",\"PCF\"],\"allowedNfDomains\":[\"oracle.com\",\"att.com\"],\"allowedNssais\":[{\"sd\":\"dba123\",\"sst\":14},{\"sd\":\"3c9123\",\"sst\":153},{\"sd\":\"5fd123\",\"sst\":132}],\"supportedFeatures\":\"80000000\"}]}";
        
        NfProfile profile = om.readValue(expectedNfProfile, NfProfile.class);
        String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
        NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//       	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	
       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       	service.setNrfConfig(nrfConfig);
        URI nfInstanceUri = new URI(location);
        NfInstance nfInstance = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
        NfHeartBeat nfHeartBeat = TestDataGenerator.generateHeartBeatRecord(NFStatus.REGISTERED);
	    NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
	    when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(nfStatusMonitor);
	    when(nfStatusMonitorRepository.save(any())).thenReturn(nfStatusMonitor);
	    Date now = new Date();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		CustomNfInstance customNfInstance = new CustomNfInstance(nfInstance, null);
	    when(nfDbServiceImpl.findNfInstanceByNfInstanceId(any(),any(),any())).thenReturn(customNfInstance);
	    when(nfRepository.save(any())).thenReturn(nfInstance);
         
	    NfPutResponse resp = service.addOrReplaceNfProfile(profile.getNfInstanceId(), profile,nfInstanceUri);
         
        String jsonStr = resp.getNfProfile().toString();
        Assert.assertNotEquals(expectedNfProfile, jsonStr);
        Assert.assertNull(resp.getNfProfile().getCapacity());
        Assert.assertNull(resp.getNfProfile().getLoad());
        Assert.assertNull(resp.getNfProfile().getPriority());
        Assert.assertNull(resp.getNfProfile().getNfServices().get(0).getCapacity());
        Assert.assertNull(resp.getNfProfile().getNfServices().get(0).getPriority());
        Assert.assertNull(resp.getNfProfile().getNfServices().get(0).getLoad());
     //   Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
	 //			.tag("dbOperation",FIND).tag("serviceOperation",UNKNOWN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NRF_SYSTEMOPTIONS).counter().count(), this.count_dbmetrics_unknown_find_nrfSystemOptions_200_OK+1,0);
    }
    
    @Test
    public void testAddOrReplaceNfProfile_whenPlmnIsNotForeign_returnsAddProfile() throws Exception {
           NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
          	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
          	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//          	nrfConfig.getRegSvc().setNfLoadChange(0);
//          	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//          	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
          	
          	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
          	nrfConfig.getSubSvc().setNotify(new Notify());
          	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
          	
          	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
            nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
          	
          	List<Plmn> plmnList = new ArrayList<>();
              plmnList.add(new Plmn("310", "14"));
//          	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
          	
          	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
           // Same as PLMN of NRF
           plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
           profile.setPlmnList(plmnList);
           String nfInstanceId = profile.getNfInstanceId();
           
           // Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
           	
           when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
           NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           Date now = new Date();
   		   NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
   		   
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
           
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
           
           Assert.assertNotNull(resp.getNfProfile());
           Assert.assertEquals(profile, resp.getNfProfile());
           verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
           List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
           List<String> logs = new ArrayList<String>();
           for(LogEvent logEvt:loggingEvent) {
        	   logs.add(logEvt.getMessage().getFormattedMessage());
           }
           Assert.assertTrue(logs.toString().contains("NF profile record created successfully for nfInstanceId, nfInstanceId="+ nfInstanceId));
           Assert.assertTrue(logs.toString().contains("NF heartbeat record created successfully for nfInstanceId, nfInstanceId="+ nfInstanceId)); 
           Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
       			.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+1,0);
                   Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
       					.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+1,0);
    }

    @Test
    public void testAddOrReplaceNfProfile_whenPlmnIsForeignMNC_returnsProblemDetails() throws Exception {
           NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
   		   URI nfInstanceUri = new URI(location);
   		NrfConfigurations nrfConfig = new NrfConfigurations();
    	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
    	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getRegSvc().setNfLoadChange(0);
//    	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//    	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
    	
    	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.getSubSvc().setNotify(new Notify());
    	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
    	
    	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
    	
    	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
//    	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
    	
    	service.setNrfConfig(nrfConfig);

           // PLMN doesn't matches of NRF
           plmnList = new ArrayList<>();
           plmnList.add(new Plmn("319", "14"));
           profile.setPlmnList(plmnList);
           String nfInstanceId = profile.getNfInstanceId();
           
           // Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
           Date now = new Date();
   		   NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
   		   
           when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
           NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);

           //nrfConfig.setPlmn(nrfPlmn);
           //Plmn nrfPlmn = new Plmn("310","14");
           //when(nrfConfig.getPlmn()).thenReturn(nrfPlmn);
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           System.out.println(o);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
           ProblemDetails prob = resp.getProblemDetails();
           Assert.assertEquals("Invalid 'plmnList'",prob.getCause().toString());
           Assert.assertEquals("Not Implemented",prob.getTitle().toString());
           verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
           List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
           List<String> logs = new ArrayList<String>();
           for(LogEvent logEvt:loggingEvent) {
        	   logs.add(logEvt.getMessage().getFormattedMessage());
           }
           Assert.assertTrue(logs.toString().contains("NF registration failed with problemDetails, problemDetails="+ prob));
    }

    @Test
    public void testAddOrReplaceNfProfile_whenPlmnIsForeignMCC_returnsProblemDetails() throws Exception {
           NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
   		   URI nfInstanceUri = new URI(location);
   		NrfConfigurations nrfConfig = new NrfConfigurations();
    	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
    	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getRegSvc().setNfLoadChange(0);
//    	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//    	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
    	
    	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.getSubSvc().setNotify(new Notify());
    	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
    	
    	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
    	
    	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
//    	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
    	
    	service.setNrfConfig(nrfConfig);
   		   // PLMN doesn't matches of NRF
           plmnList = new ArrayList<>();
           plmnList.add(new Plmn("319", "14"));
           profile.setPlmnList(plmnList);
           String nfInstanceId = profile.getNfInstanceId();
           
           // Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
           Date now = new Date();
   		   NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
   		   
           when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
           NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
           
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
           ProblemDetails prob = resp.getProblemDetails();
           Assert.assertEquals("Invalid 'plmnList'",prob.getCause().toString());
           Assert.assertEquals("Not Implemented",prob.getTitle().toString());
           verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
           List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
           List<String> logs = new ArrayList<String>();
           for(LogEvent logEvt:loggingEvent) {
        	   logs.add(logEvt.getMessage().getFormattedMessage());
           }
           Assert.assertTrue(logs.toString().contains("NF registration failed with problemDetails, problemDetails="+ prob));
    }
    
    
    @Test
    public void testAddOrReplaceNfProfile_whenPlmnIsNotPresent_returnsAddProfile() throws Exception {
           NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//       	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	
       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
           // PLMN not set
           plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
           profile.setPlmnList(plmnList);
           String nfInstanceId = profile.getNfInstanceId();
           Date now = new Date();
   		   NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
   		   
           // Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
           	
           when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
           NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
           
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
           
           Assert.assertNotNull(resp.getNfProfile());
           Assert.assertEquals(profile, resp.getNfProfile());
           Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
       			.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+1,0);
                   Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
       					.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+1,0);
    }

	@Test
	public void testDeleteNfProfile_givenNoNfprofiles() throws Exception {
		NrfConfigurations nrfConfig = new NrfConfigurations();
		nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
		String nfInstanceId = UUID.randomUUID().toString();
		String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+nfInstanceId;
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig()); 
       	nrfConfig.getGlobalConfig().setNrfInstanceId("6fbf1bbd-6f4a-4454-a507-b14ef8e1bc6f)");
       	service.setNrfConfig(nrfConfig);
		URI nfInstanceUri = new URI(location);
		NfProfile amfProfile = TestDataGenerator.generateNF("AMF");
		amfProfile.setNfInstanceId(nfInstanceId);
		NfInstance inst = new NfInstance(amfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		when(nfRepository.findByNfInstanceId(nfInstanceId)).thenReturn(null);
        String nfInstanceId1 = UUID.randomUUID().toString();
		location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+nfInstanceId1;
		nfInstanceUri = new URI(location);
		Object o = service.deleteNfProfile(nfInstanceId1,nfInstanceUri,null);
		Assert.assertTrue(o instanceof ProblemDetails);
		ProblemDetails retP = (ProblemDetails) o;
		
		Assert.assertEquals(HttpStatus.NOT_FOUND, HttpStatus.valueOf(retP.getStatus()));
		Assert.assertEquals("NF profile not found for nfInstanceId in request", retP.getDetail());
		Assert.assertEquals("NF profile not found for nfInstanceId in request", retP.getCause());
		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
		List<String> logs = new ArrayList<String>();
		for(LogEvent logEvt:loggingEvent) {
			logs.add(logEvt.getMessage().getFormattedMessage());
		}
		Assert.assertTrue(logs.toString().contains("logMsg=nfInstanceId not found in the list of registered NF Instances"));
	}
	
	@Test
	public void testDeleteNfProfile_whenLatestRecordDeregistered() throws Exception {
		NrfConfigurations nrfConfig = new NrfConfigurations();
		nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
		String nfInstanceId = UUID.randomUUID().toString();
		String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+nfInstanceId;
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig()); 
       	nrfConfig.getGlobalConfig().setNrfInstanceId("6fbf1bbd-6f4a-4454-a507-b14ef8e1bc6f)");
       	service.setNrfConfig(nrfConfig);
		URI nfInstanceUri = new URI(location);
		NfProfile amfProfile = TestDataGenerator.generateNF("AMF");
		amfProfile.setNfInstanceId(nfInstanceId);
		amfProfile.setNfStatus(NFStatus.DEREGISTERED);
		NfInstance inst = new NfInstance(amfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		when(nfDbServiceImpl.findAndDeleteNfInstance(nfInstanceId,nfInstanceUri,null)).thenReturn(null);
        Object o = service.deleteNfProfile(inst.getNfInstanceId(),nfInstanceUri,null);
		Assert.assertTrue(o instanceof ProblemDetails);
		ProblemDetails retP = (ProblemDetails) o;		
		Assert.assertEquals(HttpStatus.NOT_FOUND, HttpStatus.valueOf(retP.getStatus()));
		Mockito.verify(nrfEventManager, Mockito.never()).recordNrfEvent(any(), any());;
		Assert.assertEquals("NF profile not found for nfInstanceId in request", retP.getDetail());
		Assert.assertEquals("NF profile not found for nfInstanceId in request", retP.getCause());
		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
		List<String> logs = new ArrayList<String>();
		for(LogEvent logEvt:loggingEvent) {
			logs.add(logEvt.getMessage().getFormattedMessage());
		}
		Assert.assertTrue(logs.toString().contains("logMsg=nfInstanceId not found in the list of registered NF Instances"));
	}
	
	/*
	 * Given - Valid NfProfile
	 * 
	 * When - NfRegister
	 * 
	 * Then - NotificationData is sent without 'profileChanges'
	 * 
	 */
	
	@Test
    public void givenValidNfProfile_whenNfRegister_thenNotificationGeneratedWithNoProfileChanges() throws Exception{

		NrfConfigurations nrfConfig = new NrfConfigurations();
    	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
    	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getRegSvc().setNfLoadChange(0);
//    	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//    	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
    	
    	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.getSubSvc().setNotify(new Notify());
    	String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
    	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
    	
    	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
    	
    	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
//    	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
    	
    	service.setNrfConfig(nrfConfig);
        NfProfile profile = TestDataGenerator.generateNF("PCF");
        String nfInstanceId = profile.getNfInstanceId();
         
        // Creating nfInstanceUri
        location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+nfInstanceId;
           URI nfInstanceUri = new URI(location);
        profile.setLoad(20);
         
        NotificationData notificationData = new NotificationData();
        notificationData.setEvent(NotificationEventType.NF_REGISTERED);
        notificationData.setNfInstanceUri(nfInstanceUri);
        notificationData.setNfProfile(profile);
 
        boolean notificationSent = false;
        try {
            when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
            when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(null);
            Date now = new Date();
    		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
    		
            NfInstance nfInstance = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
            //setting additional attributes as null as these are not exposed to operator
            profile.setAdditionalAttributes(null);
            when(nfRepository.save(any(NfInstance.class))).thenReturn(nfInstance);
             
            NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, profile.getLoad(),profile.getHeartBeatTimer());
            NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
             
            when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);
             
            doThrow(NrfException.class).when(client).sendNotificationEvent(any(),any(),any());
 
            Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
            Assert.assertTrue(o instanceof NfPutResponse);
            NfPutResponse resp = (NfPutResponse) o;
 
            Assert.assertNotNull(resp.getNfProfile());
            NfProfile data = resp.getNfProfile();
            Assert.assertEquals(profile, data);
            Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        			.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+1,0);
                    Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        					.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+1,0);
 
        }catch(NrfException e) {
            notificationSent = true;
        }
         
        Assert.assertTrue(notificationSent);
        verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
        List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
        List<String> logs = new ArrayList<String>();
        for(LogEvent logEvt:loggingEvent) {
            logs.add(logEvt.getMessage().getFormattedMessage());
        }
        Assert.assertTrue(logs.toString().contains("NF profile record created successfully for nfInstanceId, nfInstanceId="+ nfInstanceId));
        Assert.assertTrue(logs.toString().contains("NF heartbeat record created successfully for nfInstanceId, nfInstanceId="+ nfInstanceId));
        System.out.println("notificationData : "+ notificationData);
        Assert.assertTrue(logs.toString().contains("Notification is sent with notificationData, notificationData="+notificationData));
        
    }
	
	/*
	 * Given - Valid NfProfile
	 * 
	 * When - NfRegister
	 * 
	 * Then - NotificationData is sent without 'profileChanges'
	 * 
	 */
	
	@Test
    public void givenValidNfProfile_whenNfRegister_thenEvent_Registered() throws Exception{

		NrfConfigurations nrfConfig = new NrfConfigurations();
    	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
    	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getRegSvc().setNfLoadChange(0);
//    	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//    	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
    	
    	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.getSubSvc().setNotify(new Notify());
    	String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
    	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
    	
    	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
    	
    	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
//    	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
    	
    	service.setNrfConfig(nrfConfig);
        NfProfile profile = TestDataGenerator.generateNF("PCF");
        String nfInstanceId = profile.getNfInstanceId();
         
        // Creating nfInstanceUri
        location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+nfInstanceId;
           URI nfInstanceUri = new URI(location);
        profile.setLoad(20);
         
        NotificationData notificationData = new NotificationData();
        notificationData.setEvent(NotificationEventType.NF_REGISTERED);
        notificationData.setNfInstanceUri(nfInstanceUri);
        notificationData.setNfProfile(profile);

		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId, RequestMethod.PUT, "NfRegister"))
				.thenReturn(null);
		when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(null);
		Date now = new Date();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();

		NfInstance nfInstance = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());

		when(nfRepository.save(any(NfInstance.class))).thenReturn(nfInstance);

		NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, profile.getLoad(),
				profile.getHeartBeatTimer());
		NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat,
				nrfConfig.getGlobalConfig().getNrfInstanceId());

		when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);

		Object o = service.addOrReplaceNfProfile(nfInstanceId, profile, nfInstanceUri);
		Assert.assertTrue(o instanceof NfPutResponse);
		NfPutResponse resp = (NfPutResponse) o;

		Assert.assertNotNull(resp.getNfProfile());
		NfProfile data = resp.getNfProfile();
		Assert.assertEquals(profile, data);
		Assert.assertEquals(
				Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method", String.valueOf(RequestMethod.PUT))
						.tag("dbOperation", CREATE).tag("serviceOperation", "NfRegister")
						.tag("HttpStatusCode", String.valueOf((HttpStatus.CREATED).value()))
						.tag("tableName", NF_INSTANCES).counter().count(),
				this.count_dbmetrics_nfRegister_nfInstances_201_CREATED + 1, 0);
		Assert.assertEquals(
				Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method", String.valueOf(RequestMethod.PUT))
						.tag("dbOperation", CREATE).tag("serviceOperation", "NfRegister")
						.tag("HttpStatusCode", String.valueOf((HttpStatus.CREATED).value()))
						.tag("tableName", NF_STATUSMONITOR).counter().count(),
				this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED + 1, 0);

		ArgumentCaptor<NfProfile> argument1 = ArgumentCaptor.forClass(NfProfile.class);
		ArgumentCaptor<Events> argument2 = ArgumentCaptor.forClass(Events.class);
		Mockito.verify(nrfEventManager).recordNrfEvent(argument1.capture(), argument2.capture());
		Assert.assertEquals(Events.NFREGISTER_EVENT, argument2.getValue());
		Assert.assertEquals(data, argument1.getValue());

		verify(mockAppender, atLeastOnce()).append((LogEvent) captorLoggingEvent.capture());
		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
		List<String> logs = new ArrayList<String>();
		for (LogEvent logEvt : loggingEvent) {
			logs.add(logEvt.getMessage().getFormattedMessage());
		}
		Assert.assertTrue(logs.toString()
				.contains("NF profile record created successfully for nfInstanceId, nfInstanceId=" + nfInstanceId));
		Assert.assertTrue(logs.toString()
				.contains("NF heartbeat record created successfully for nfInstanceId, nfInstanceId=" + nfInstanceId));
		System.out.println("notificationData : " + notificationData);
		profile.setAdditionalAttributes(null);
		Assert.assertTrue(logs.toString()
				.contains("Notification is sent with notificationData, notificationData=" + notificationData));
        
    }
	/*
	 * Given - Valid NfProfile
	 * 
	 * When - NfUpdate for 'priority'
	 * 
	 * Then - NotificationData is sent with 'profileChanges'
	 * 
	 */
	
    @Test
    public void givenValidNfProfile_whenNfUpdatePriority_thenNotificationGeneratedWithNoProfileChanges() throws Exception {
        NfProfile profile = TestDataGenerator.generateNF("PCF");
        profile.setPriority(null);
        String nfInstanceId = profile.getNfInstanceId();
         
        // Creating nfInstanceUri
        String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+nfInstanceId;
        NrfConfigurations nrfConfig = new NrfConfigurations();
    	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
    	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getRegSvc().setNfLoadChange(0);
//    	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//    	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
    	
    	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.getSubSvc().setNotify(new Notify());
    	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
    	
    	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
    	
    	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
//    	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
    	
    	service.setNrfConfig(nrfConfig);
        URI nfInstanceUri = new URI(location);
        profile.setLoad(20);
         
        NotificationData notificationData = new NotificationData();
        notificationData.setEvent(NotificationEventType.NF_PROFILE_CHANGED);
        notificationData.setNfInstanceUri(nfInstanceUri);
        notificationData.setNfProfile(profile);
         
        List<ChangeItem> profileChanges = new ArrayList<ChangeItem>();
        ChangeItem changeItem = new ChangeItem();
        changeItem.setOp(ChangeType.ADD);
        changeItem.setPath("/priority");
        changeItem.setNewValue(10);
        profileChanges.add(changeItem);
         
        notificationData.setProfileChanges(profileChanges);
 
        NfInstance nfInstance = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
         
        boolean notificationSent = false;
 
        try {
        	Date now = new Date();
    		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
    		CustomNfInstance customNfInstance = new CustomNfInstance(nfInstance, null);
    		when(nfDbServiceImpl.findNfInstanceForNfRegister(nfInstanceId)).thenReturn(customNfInstance);
    		 		
            when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,NF_UPDATE)).thenReturn(customNfInstance);
 
            NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, profile.getLoad(),profile.getHeartBeatTimer());
            NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
 
            when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(nfStatusMonitor);
 
            profile.setPriority(10);
            NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
            when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
 
            nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, profile.getLoad(),profile.getHeartBeatTimer());
            nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
            when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);

            doThrow(NrfException.class).when(client).sendNotificationEvent(any(),any(),any());

            Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
            Assert.assertTrue(o instanceof NfPutResponse);
            NfPutResponse resp = (NfPutResponse) o;
 
            Assert.assertNotNull(resp.getNfProfile());
            NfProfile data = resp.getNfProfile();
            Assert.assertEquals(profile, data);
            Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        			.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK+1,0);
        	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        					.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK+1,0);
 
        }catch(NrfException e) {
            notificationSent = true;
        }
        Assert.assertTrue(notificationSent);
         
        verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
        List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
        List<String> logs = new ArrayList<String>();
        for(LogEvent logEvt:loggingEvent) {
            logs.add(logEvt.getMessage().getFormattedMessage());
        }
        //setting additional attributes as null as these are not exposed to operator
        profile.setAdditionalAttributes(null);
        Assert.assertTrue(logs.toString().contains("NF profile already exists for nfInstanceId, nfInstanceId="+ nfInstanceId));
        Assert.assertTrue(logs.toString().contains("NF profile & heartbeat record updated successfully for nfInstanceId, nfInstanceId="+ nfInstanceId));
        Assert.assertTrue(logs.toString().contains("Notification is sent with notificationData, notificationData="+notificationData));
    }
    
    /*
	 * Given - Valid NfProfile
	 * 
	 * When - NfUpdate for 'dnnList'
	 * 
	 * Then - NotificationData is sent with 'profileChanges'
	 * 
	 */
    @Test
    public void givenValidNfProfile_whenNfUpdateDnnList_thenNotificationGeneratedWithNoProfileChanges() throws Exception {
    	ObjectMapper om = new ObjectMapper();
        NfProfile profile = TestDataGenerator.generateNF("PCF");
        profile.setInterPlmnFqdn(null);
        String nfInstanceId = profile.getNfInstanceId();
         
        // Creating nfInstanceUri
        String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+nfInstanceId;
        NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//       	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	
       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       	service.setNrfConfig(nrfConfig);
        URI nfInstanceUri = new URI(location);
         
        NotificationData notificationData = new NotificationData();
        notificationData.setEvent(NotificationEventType.NF_PROFILE_CHANGED);
        notificationData.setNfInstanceUri(nfInstanceUri);
        notificationData.setNfProfile(profile);
         
        List<ChangeItem> profileChanges = new ArrayList<ChangeItem>();
        ChangeItem changeItem = new ChangeItem();
        changeItem.setOp(ChangeType.REMOVE);
        changeItem.setPath("/pcfInfo/dnnList");
        changeItem.setOrigValue(profile.getPcfInfo().getDnnList());
        profileChanges.add(changeItem);
        
        changeItem = new ChangeItem();
        changeItem.setOp(ChangeType.ADD);
        changeItem.setPath("/interPlmnFqdn");
        changeItem.setNewValue("pcf-d5g-oracle.in");
        profileChanges.add(changeItem);
        
        notificationData.setProfileChanges(profileChanges);
 
        NfInstance nfInstance = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
         
        boolean notificationSent = false;
 
        try {
        	CustomNfInstance customNfInstance = new CustomNfInstance(nfInstance, null);
        	when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,NF_UPDATE)).thenReturn(customNfInstance);
            Date now = new Date();
    		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
    		
            NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, profile.getLoad(),profile.getHeartBeatTimer());
            NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
            when(nfDbServiceImpl.findNfInstanceForNfRegister(nfInstanceId)).thenReturn(customNfInstance);
    		when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(nfStatusMonitor);
            
            profile.getPcfInfo().setDnnList(null);
            profile.setInterPlmnFqdn("pcf-d5g-oracle.in");
            NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
            when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
 
            nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, profile.getLoad(),profile.getHeartBeatTimer());
            nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
            when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);

            doThrow(NrfException.class).when(client).sendNotificationEvent(any(),any(),any());
           

            Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
            Assert.assertTrue(o instanceof NfPutResponse);
            NfPutResponse resp = (NfPutResponse) o;
            
            Assert.assertNotNull(resp.getNfProfile());
            NfProfile data = resp.getNfProfile();
            Assert.assertEquals(profile, data);
            Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        			.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK+1,0);
        	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        					.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK+1,0);
 
        }catch(NrfException e) {
            notificationSent = true;
        }
        Assert.assertTrue(notificationSent);
         
        verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
        List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
        List<String> logs = new ArrayList<String>();
        for(LogEvent logEvt:loggingEvent) {
            logs.add(logEvt.getMessage().getFormattedMessage());
        }
        //setting additional attributes as null as these are not exposed to operator
        profile.setAdditionalAttributes(null);
        Assert.assertTrue(logs.toString().contains("NF profile already exists for nfInstanceId, nfInstanceId="+ nfInstanceId));
        Assert.assertTrue(logs.toString().contains("NF profile & heartbeat record updated successfully for nfInstanceId, nfInstanceId="+ nfInstanceId));
        Assert.assertTrue(logs.toString().contains("Notification is sent with notificationData, notificationData="+notificationData));
    }
    
    /*
	 * Given - Valid NfProfile
	 * 
	 * When - NfUpdate for 'supiList'
	 * 
	 * Then - NotificationData is sent with 'profileChanges'
	 * 
	 */
    @Test
    public void givenValidNfProfile_whenNfUpdateSupiList_thenNotificationGeneratedWithNoProfileChanges() throws Exception {
    	ObjectMapper om = new ObjectMapper();
        NfProfile profile = TestDataGenerator.generateNF("PCF");
        String nfInstanceId = profile.getNfInstanceId();
         
        // Creating nfInstanceUri
        String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+nfInstanceId;
        URI nfInstanceUri = new URI(location);
        NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//       	nrfConfig.getRegSvc().setNfLoadChange(0);
//       	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//       	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
       	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	
       	List<Plmn> plmnList = new ArrayList<>();
           plmnList.add(new Plmn("310", "14"));
//       	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
       	
       	service.setNrfConfig(nrfConfig);
        NotificationData notificationData = new NotificationData();
        notificationData.setEvent(NotificationEventType.NF_PROFILE_CHANGED);
        notificationData.setNfInstanceUri(nfInstanceUri);
        notificationData.setNfProfile(profile);
         
        List<ChangeItem> profileChanges = new ArrayList<ChangeItem>();
        ChangeItem changeItem = new ChangeItem();
        changeItem.setOp(ChangeType.REPLACE);
        changeItem.setPath("/pcfInfo/supiRangeList/0/start");
        changeItem.setNewValue("1234567890");
        changeItem.setOrigValue(profile.getPcfInfo().getSupiRanges().get(0).getStart());
        profileChanges.add(changeItem);
        
        changeItem = new ChangeItem();
        changeItem.setOp(ChangeType.REPLACE);
        changeItem.setPath("/pcfInfo/supiRangeList/0/end");
        changeItem.setNewValue("2345678901");
        changeItem.setOrigValue(profile.getPcfInfo().getSupiRanges().get(0).getEnd());
        profileChanges.add(changeItem);
        
        changeItem = new ChangeItem();
        changeItem.setOp(ChangeType.REMOVE);
        changeItem.setPath("/pcfInfo/supiRangeList/0/pattern");
        changeItem.setOrigValue(profile.getPcfInfo().getSupiRanges().get(0).getPattern());
        profileChanges.add(changeItem);
        
        notificationData.setProfileChanges(profileChanges);
 
        NfInstance nfInstance = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
         
        boolean notificationSent = false;
 
        try {
        	CustomNfInstance customNfInstance = new CustomNfInstance(nfInstance, null);
            when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,NF_UPDATE)).thenReturn(customNfInstance);
            when(nfDbServiceImpl.findNfInstanceForNfRegister(nfInstanceId)).thenReturn(customNfInstance);
    		NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, profile.getLoad(),profile.getHeartBeatTimer());
            NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
 
            when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(nfStatusMonitor);
            
            SupiRange supiRange = new SupiRange();
            supiRange.setStart("1234567890");
            supiRange.setEnd("2345678901");
            profile.getPcfInfo().getSupiRanges().set(0, supiRange);
            NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
            when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
            Date now = new Date();
    		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
    		
            nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, profile.getLoad(),profile.getHeartBeatTimer());
            nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
            when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);
 
            doThrow(NrfException.class).when(client).sendNotificationEvent(any(),any(),any());
 
            Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
            Assert.assertTrue(o instanceof NfPutResponse);
            NfPutResponse resp = (NfPutResponse) o;
 
            Assert.assertNotNull(resp.getNfProfile());
            NfProfile data = resp.getNfProfile();
            Assert.assertEquals(profile, data);
            Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        			.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK+1,0);
        	         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
        					.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK+1,0);
 
        }catch(NrfException e) {
            notificationSent = true;
        }
        Assert.assertTrue(notificationSent);
         
        verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
        List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
        List<String> logs = new ArrayList<String>();
        for(LogEvent logEvt:loggingEvent) {
            logs.add(logEvt.getMessage().getFormattedMessage());
        }
        Assert.assertTrue(logs.toString().contains("NF profile already exists for nfInstanceId, nfInstanceId="+ nfInstanceId));
        Assert.assertTrue(logs.toString().contains("NF profile & heartbeat record updated successfully for nfInstanceId, nfInstanceId="+ nfInstanceId));
    }
 
    /*
	 * Given - Valid NfProfile
	 * 
	 * When - NfDelete
	 * 
	 * Then - NotificationData is sent without 'profileChanges' and 'profile'
	 * 
	 */
    @Test
    public void givenValidNfProfile_whenNfDelete_thenNotificationGeneratedWithNoProfileChanges() throws Exception {
    	NrfConfigurations nrfConfig = new NrfConfigurations();
		nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c"); 
        String nfInstanceId = UUID.randomUUID().toString();
        String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+nfInstanceId;
        URI nfInstanceUri = new URI(location);
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig()); 
       	nrfConfig.getGlobalConfig().setNrfInstanceId("6fbf1bbd-6f4a-4454-a507-b14ef8e1bc6f)");
       	service.setNrfConfig(nrfConfig);
        NfProfile amfProfile = TestDataGenerator.generateNF("AMF");
        amfProfile.setNfInstanceId(nfInstanceId);
         
        NfInstance nfInstance = new NfInstance(amfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
         
        // NotificationData has only nfInstanceUri and Event
        NotificationData notificationData = new NotificationData();
        notificationData.setEvent(NotificationEventType.NF_DEREGISTERED);
        notificationData.setNfInstanceUri(nfInstanceUri);
        notificationData.setNfProfile(amfProfile);
        CustomNfInstance customNfInstance = new CustomNfInstance(nfInstance, null);
        when(nfDbServiceImpl.findAndDeleteNfInstance(nfInstanceId,nfInstanceUri,null)).thenReturn(customNfInstance);
        Object o = service.deleteNfProfile(nfInstanceId,nfInstanceUri,null);
        Assert.assertTrue(o instanceof NfProfile);
        Assert.assertEquals(o, amfProfile);
        ArgumentCaptor<NfProfile> argument1 = ArgumentCaptor.forClass(NfProfile.class);
        ArgumentCaptor<Events> argument2 = ArgumentCaptor.forClass(Events.class);
        Mockito.verify(nrfEventManager).recordNrfEvent(argument1.capture(),argument2.capture());
        Assert.assertEquals(Events.NFDEREGISTER_EVENT, argument2.getValue());
        Assert.assertEquals(amfProfile.getNfStatus(),argument1.getValue().getNfStatus());
        verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
        List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
        List<String> logs = new ArrayList<String>();
        for(LogEvent logEvt:loggingEvent) {
            logs.add(logEvt.getMessage().getFormattedMessage());
        }
        Assert.assertTrue(logs.toString().contains("NF deregistered successfully for nfInstanceId, nfInstanceId="+ nfInstanceId));
        Assert.assertTrue(logs.toString().contains("Notification is sent with notificationData, notificationData="+notificationData));
            	         
    }
    
    @Test
    public void givenValidNfProfile_whenNfDelete_thenDelete_Remote_Event() throws Exception {
    	NrfConfigurations nrfConfig = new NrfConfigurations();
		nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c"); 
        String nfInstanceId = UUID.randomUUID().toString();
        String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+nfInstanceId;
        URI nfInstanceUri = new URI(location);
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig()); 
       	nrfConfig.getGlobalConfig().setNrfInstanceId("6fbf1bbd-6f4a-4454-a507-b14ef8e1bc6f)");
       	service.setNrfConfig(nrfConfig);
        NfProfile amfProfile = TestDataGenerator.generateNF("AMF");
        amfProfile.setNfInstanceId(nfInstanceId);
         
        NfInstance nfInstance = new NfInstance(amfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
         
        // NotificationData has only nfInstanceUri and Event
        NotificationData notificationData = new NotificationData();
        notificationData.setEvent(NotificationEventType.NF_DEREGISTERED);
        notificationData.setNfInstanceUri(nfInstanceUri);
        notificationData.setNfProfile(amfProfile);
        CustomNfInstance customNfInstance = new CustomNfInstance(nfInstance,"5fef1bbd-6f4a-4454-a507-b14ef8e1bc6f" );
        when(nfDbServiceImpl.findAndDeleteNfInstance(nfInstanceId,nfInstanceUri,null)).thenReturn(customNfInstance);
        Object o = service.deleteNfProfile(nfInstanceId,nfInstanceUri,null);
        Assert.assertTrue(o instanceof NfProfile);
        Assert.assertEquals(o, amfProfile);
        ArgumentCaptor<NfProfile> argument1 = ArgumentCaptor.forClass(NfProfile.class);
        ArgumentCaptor<Events> argument2 = ArgumentCaptor.forClass(Events.class);
        Mockito.verify(nrfEventManager).recordNrfEvent(argument1.capture(),argument2.capture());
        Assert.assertEquals(Events.NFPROFILE_SITE_HANDOVER_DEREGISTER_EVENT, argument2.getValue());
        Assert.assertEquals(amfProfile.getNfStatus(),argument1.getValue().getNfStatus());
        verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
        List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
        List<String> logs = new ArrayList<String>();
        for(LogEvent logEvt:loggingEvent) {
            logs.add(logEvt.getMessage().getFormattedMessage());
        }
        Assert.assertTrue(logs.toString().contains("NF deregistered successfully for nfInstanceId, nfInstanceId="+ nfInstanceId));
        Assert.assertTrue(logs.toString().contains("Notification is sent with notificationData, notificationData="+notificationData));
            	         
    }
    
    @Test
    public void registerNfProfile_sendPartialProfileInResponse() throws Exception {
    	NfProfile profile = TestDataGenerator.generateNF("AMF");
    	profile.setNfProfileChangesSupportInd(true);
    	String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
    	URI nfInstanceUri = new URI(location);
    	NrfConfigurations nrfConfig = new NrfConfigurations();
    	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
    	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getRegSvc().setNfLoadChange(0);
//      	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofSeconds(90));
//    	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(true);
    	
    	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.getSubSvc().setNotify(new Notify());
    	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
    	
    	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
    	
    	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
//    	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
    	
    	service.setNrfConfig(nrfConfig);
    	NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),299);

    	when(nfRepository.findByNfInstanceId(profile.getNfInstanceId())).thenReturn(null);
    	NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    	when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
    	doNothing().when(client).sendNotificationEvent(any(),any(),any());
    	Date now = new Date();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		
    	NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
    	when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
    	Object o = service.addOrReplaceNfProfile(profile.getNfInstanceId(), profile, nfInstanceUri);
    	
    	NfProfile expected = new NfProfile();
    	expected.setNfInstanceId(profile.getNfInstanceId());
    	expected.setNfStatus(profile.getNfStatus());
    	expected.setNfType(profile.getNfType());
    	expected.setNfProfileChangesInd(true);

    	Assert.assertTrue(o instanceof NfPutResponse);
        NfPutResponse resp = (NfPutResponse) o;
    	Assert.assertEquals(expected, resp.getNfProfile());
    	
    	// NotificationData has only nfInstanceUri and Event
        NotificationData notificationData = new NotificationData();
        notificationData.setEvent(NotificationEventType.NF_REGISTERED);
        notificationData.setNfInstanceUri(nfInstanceUri);
        
        
        verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
        List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
        List<String> logs = new ArrayList<String>();
        for(LogEvent logEvt:loggingEvent) {
            logs.add(logEvt.getMessage().getFormattedMessage());
        }
        //setting additional attributes as null as these are not exposed to operator
        profile.setAdditionalAttributes(null);
        notificationData.setNfProfile(profile);
        System.out.println(logs.toString());
        System.out.println(notificationData);
        Assert.assertTrue(logs.toString().contains("Notification is sent with notificationData, notificationData="+notificationData));
        
        // set load and priority to null
        profile.setLoad(null);
        profile.setPriority(null);
        o = service.addOrReplaceNfProfile(profile.getNfInstanceId(), profile, nfInstanceUri);
        //expected.setLoad(0);
       // expected.setPriority(5);
    	Assert.assertTrue(o instanceof NfPutResponse);
        resp = (NfPutResponse) o;
    	Assert.assertEquals(expected, resp.getNfProfile());
    	
    	//set only heartbeat timer out of range
    	profile.setLoad(null);
    	profile.setPriority(null);
    	profile.setHeartBeatTimer(299);
    	
    	o = service.addOrReplaceNfProfile(profile.getNfInstanceId(), profile, nfInstanceUri);
    	Assert.assertTrue(o instanceof NfPutResponse);
        resp = (NfPutResponse) o;
    	Assert.assertEquals(expected, resp.getNfProfile());
    	Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
     			.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+3,0);
                 Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
     					.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+3,0);
       
    }
    
    @Test
    public void updateNfProfile_returnPartialProfileInResponse() throws Exception {
    	NfProfile profile = TestDataGenerator.generateNF("AMF");
    	profile.setNfProfileChangesSupportInd(true);
    	profile.setPriority(null);
    	String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
    	// NrfSupportForProfileChangesInResponse set to false in configuration
    	NrfConfigurations nrfConfig = new NrfConfigurations();
    	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
    	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getRegSvc().setNfLoadChange(0);
//    	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofSeconds(90));
//    	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(true);
    	
    	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.getSubSvc().setNotify(new Notify());
    	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
    	
    	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	
    	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
//    	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
    	
    	service.setNrfConfig(nrfConfig);
    	URI nfInstanceUri = new URI(location);
    	Date now = new Date();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		
    	NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),90);
    	NfInstance dao = new NfInstance(profile, "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
    	List<NfInstance> nfInstances = new ArrayList<>();
    	nfInstances.add(dao);
    	when(nfRepository.findByNfInstanceId(profile.getNfInstanceId())).thenReturn(nfInstances);
    	when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
    	doNothing().when(client).sendNotificationEvent(any(),any(),any());
    	NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
    	when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
    	when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(statusDao);
    	
    	Object o = service.addOrReplaceNfProfile(profile.getNfInstanceId(), profile, nfInstanceUri);

    	NfProfile expected = new NfProfile();
    	expected.setNfInstanceId(profile.getNfInstanceId());
    	expected.setNfStatus(profile.getNfStatus());
    	expected.setNfType(profile.getNfType());
    	expected.setNfProfileChangesInd(true);
    	//expected.setPriority(5);
    	
    	Assert.assertTrue(o instanceof NfPutResponse);
    	NfPutResponse resp = (NfPutResponse) o;
    	Assert.assertEquals(expected, resp.getNfProfile());
    	
//  	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
    	NrfSystemOptions systemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
    	NfManagementSystemOptions nfManagement = TestDataGenerator.generateNfManagementSystemOptions();
    	nfManagement.setNrfSupportForProfileChangesInResponse(false);
    	systemOptions.setNfManagementSystemOptions(nfManagement);
    	List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(systemOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		NrfSystemOptionsDao systemOptionsDaoError = TestDataGenerator.generateNrfSystemOptionsDao_errorResponses();
		NrfSystemOptionsDao systemOptionsDaoEngError = TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses();
		NrfSystemOptionsDao engSystemOptionsDao = TestDataGenerator.generateNrfEngSystemOptionsDao();
		ArrayList<NrfSystemOptionsDao> systemOptionsList = new ArrayList<NrfSystemOptionsDao>() { 
            { 
                add(nrfSystemOptionsDao); 
                add(engSystemOptionsDao); 
                add(systemOptionsDaoError);
                add(systemOptionsDaoEngError);
                
            } 
        }; 
        when(nrfSystemOptionsRepository.findbyRecordOwner(any())).thenReturn(systemOptionsList);
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
        service.setNrfSystemAndEngineeringOptions(systemOptions, nrfEngSystemOptions);

        service.setNrfConfig(nrfConfig);

    	profile.setPriority(5);
    	o = service.addOrReplaceNfProfile(profile.getNfInstanceId(), profile, nfInstanceUri);
    	Assert.assertTrue(o instanceof NfPutResponse);
    	resp = (NfPutResponse) o;
    	profile.setAdditionalAttributes(null);
    	resp.getNfProfile().setAdditionalAttributes(null);
    	Assert.assertEquals(profile.toString(), resp.getNfProfile().toString());
    	
    	dao = new NfInstance(profile, "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5e");
    	statusDao = new NfStatusMonitor(nfHeartBeat, "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
    	
    }
    
    @Test
    public void givenNfProfileWithoutPlmnList_whenNfRegister_thenReturnJsonStructureWithoutPlmnList() throws Exception{
    	String nfInstanceId = UUID.randomUUID().toString();
        String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+nfInstanceId;
        NrfConfigurations nrfConfig = new NrfConfigurations();
    	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
    	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getRegSvc().setNfLoadChange(0);
//    	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//    	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
    	
    	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.getSubSvc().setNotify(new Notify());
    	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
    	
    	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
    	
    	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
//    	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
    	
    	service.setNrfConfig(nrfConfig);
        URI nfInstanceUri = new URI(location);
    	NfProfile amfProfile = TestDataGenerator.generateNF("AMF");
    	amfProfile.setPlmnList(null);
    	Date now = new Date();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		
    	NfInstance nfInstance = new NfInstance(amfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    	CustomNfInstance customNfInstance = new CustomNfInstance(nfInstance, null);
    	when(nfDbServiceImpl.findNfInstanceByNfInstanceId(any(),any(),any())).thenReturn(customNfInstance);
    	when(nfDbServiceImpl.findNfInstanceForNfRegister(any())).thenReturn(customNfInstance);
        
    	NfHeartBeat nfHeartBeat = new NfHeartBeat(amfProfile.getNfInstanceId(), NFStatus.REGISTERED, amfProfile.getLoad(),amfProfile.getHeartBeatTimer());
        NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());

        when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(nfStatusMonitor);
        
        when(nfRepository.save(any(NfInstance.class))).thenReturn(nfInstance);
        
        when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);
    	
    	Object o = service.addOrReplaceNfProfile(nfInstanceId, amfProfile, nfInstanceUri);
    	Assert.assertTrue(o instanceof NfPutResponse);
        NfPutResponse nfPutResponse = (NfPutResponse) o;
    	Assert.assertNull(nfPutResponse.getNfProfile().getPlmnList());
    	 Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
     			.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_find_nfStatusMonitor_200_OK+1,0);
     	        
    	
    	
    	
    }
    
    @Test
    public void testUpdateHeartBeatRecord_updateMissedHbBeforeAudit() throws Exception {
    	String nfInstanceId = UUID.randomUUID().toString();
    	String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+nfInstanceId;
    	NrfConfigurations nrfConfig = new NrfConfigurations();
    	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
    	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig()); 
    	nrfConfig.getGlobalConfig().setNrfInstanceId("6fbf1bbd-6f4a-4454-a507-b14ef8e1bc6f)");
    	service.setNrfConfig(nrfConfig);

    	NfProfile profile = TestDataGenerator.generateNF("AMF");
    	profile.setNfInstanceId(nfInstanceId);	       
    	NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), NFStatus.REGISTERED, 50,profile.getHeartBeatTimer());
    	
    	Calendar now = Calendar.getInstance();
    	now.add(Calendar.SECOND, -30);
    	
    	long epochNanoSecOfSec = (now.toInstant().getNano()/1000)%1000;
		long epochTimeInMicroSec = now.toInstant().toEpochMilli()*1000 + epochNanoSecOfSec;
		
    	nfHeartBeat.setLastHbTimeStamp(epochTimeInMicroSec);
    	NfStatusMonitor inst = new NfStatusMonitor(nfHeartBeat,nrfConfig.getGlobalConfig().getNrfInstanceId());
    	when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(inst);
    	profile.setNfStatus(NFStatus.REGISTERED);
    	profile.setLoad(55);
    	NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
       	service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);

       	
    	Object o = service.updateHeartBeatRecord(profile,null);
    	Assert.assertTrue(o instanceof NfStatusMonitor);
    	NfStatusMonitor heartBeat = (NfStatusMonitor) o;           
    	Assert.assertEquals(NFStatus.REGISTERED, heartBeat.getNfStatus());
    	Assert.assertEquals(0,heartBeat.getSuspendedTimestamp());
    	Assert.assertNotNull(heartBeat.getLastUpdateFromNFTimestamp());
    	NfStatusMonitorDoc doc2 = null;
    	String statusDoc1 = getDocBasedOnVersion("v1", new ObjectMapper().readValue(heartBeat.getNfStatusMonitorJsonDocList(), VersionedJsonDocList.class).getVersionedJsonDocList());
    	int x = 1;
    	try {
    		doc2 = new ObjectMapper().readValue(statusDoc1, NfStatusMonitorDoc.class);
    	}catch(Exception e) {
			   		
    	}
    	Assert.assertEquals(x, doc2.getNumHbMissedBeforeAudit());     

    	VersionedJsonDocList versionList = new ObjectMapper().readValue(inst.getNfStatusMonitorJsonDocList(),VersionedJsonDocList.class);
    	VersionedJsonDoc versionedJsonDoc = versionList.getVersionedJsonDocList().get(0);
    	NfStatusMonitorDoc doc = new ObjectMapper().readValue(versionedJsonDoc.getDoc(),NfStatusMonitorDoc.class);
    	doc.setHeartBeatTimer(120);
    	versionedJsonDoc.setDoc(doc.toString());
    	versionList.getVersionedJsonDocList().set(0, versionedJsonDoc);
    	inst.setNfStatusMonitorJsonDocList(versionList.toString());
    	
    	when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(inst);
    	o = service.updateHeartBeatRecord(profile,null);

    	Assert.assertTrue(o instanceof NfStatusMonitor);
    	heartBeat = (NfStatusMonitor) o;        
    	Assert.assertEquals(NFStatus.REGISTERED, heartBeat.getNfStatus());
    	Assert.assertEquals(0,heartBeat.getSuspendedTimestamp());
    	String statusDoc = getDocBasedOnVersion("v1", new ObjectMapper().readValue(heartBeat.getNfStatusMonitorJsonDocList(), VersionedJsonDocList.class).getVersionedJsonDocList());
    	NfStatusMonitorDoc doc1 = null;
    	try {
    		doc1 = new ObjectMapper().readValue(statusDoc, NfStatusMonitorDoc.class);
    	}catch(Exception e) {
			//    		
    	}
    	int response = 0;
    	Assert.assertNotNull(heartBeat.getLastUpdateFromNFTimestamp());
    	Assert.assertEquals(response, doc1.getNumHbMissedBeforeAudit());  
    	
     	Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
     					.tag("dbOperation",FIND).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK+2,0);

    	 
    }
    
    /*@Test
    public void testGetNfProfileForReady() throws Exception {
    	  NrfConfigurations nrfConfig = new NrfConfigurations();
		  nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
          nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
    	  when(nfDbServiceImpl.findNfInstanceByNfInstanceId(any(),any(),any())).thenReturn(new NfInstance(TestDataGenerator.generateNF("UDR"),nrfConfig.getGlobalConfig().getNrfInstanceId()));
    	  Assert.assertTrue(service.getNfProfileForReady(UUID.randomUUID().toString()));
    	  
    	  when(nfDbServiceImpl.findNfInstanceByNfInstanceId(any(),any(),any())).thenThrow(new QueryTimeoutException("Query Timed out"));
    	  Assert.assertFalse(service.getNfProfileForReady(UUID.randomUUID().toString()));
    }*/
    
    // NfScreening Feature test cases 
	
 	@Test
 	public void testApplyNfScreeningRules_CallbackUri_GlobalRuleOnlyPresent_returnsSuccess() throws IOException {
 		NfScreeningRules screeningRules = TestDataGenerator.getCallbackUriScreeningRule();
 		
        NfScreening data = new NfScreening(screeningRules,nrfConfigurations.getGlobalConfig().getNrfInstanceId());
		
		List<NfScreening> rules = new ArrayList<NfScreening>();
		rules.add(data);
		
		when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);
		
		List<NfService> nfServices = new ArrayList<NfService>();
		NfService svc = TestDataGenerator.generateService("PCF");
		List<DefaultNotificationSubscription> aList6 = new ArrayList<DefaultNotificationSubscription>();
		aList6 = new ArrayList<DefaultNotificationSubscription>();
		aList6.add(new DefaultNotificationSubscription(NotificationType.N1_MESSAGES, URI.create("https://amf2.oracle.com:50"),N1MessageClass.FIVE_GMM));
		svc.setDefaultNotificationSubscriptions(aList6);
		nfServices.add(svc);
		NfProfile profile = TestDataGenerator.generateNF("PCF");
		profile.setNfServices(nfServices);
		boolean pass = false;
		try {
		    nfScreeningSvc.applyNfScreeningRules(profile);
		    pass = true;
		} catch(Exception e) {
			pass = false;
		}
		
		Assert.assertTrue(pass == true);
		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
    	List<String> logs = new ArrayList<String>();
    	for(LogEvent logEvt:loggingEvent) {
    		logs.add(logEvt.getMessage().getFormattedMessage());
    	}
    	
    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=NF_TYPE_REGISTER"));
    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=PLMN_ID"));
    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=NF_FQDN"));
    	Assert.assertTrue(logs.toString().contains("urrent NfScreeningType being processed, currentScreeningType=NF_IP_ENDPOINT"));
    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=CALLBACK_URI"));
    	Assert.assertTrue(logs.toString().contains("checkHostFqdnInScreenRule - status, status=true"));
    	Assert.assertTrue(logs.toString().contains("searchResult for port, status=true"));
    	Assert.assertTrue(logs.toString().contains("NfProfile cleared CALLBACK_URI screening Rule"));
    	Assert.assertTrue(logs.toString().contains("NfProfile has passed GlobalScreeningRule, currentScreeningType=CALLBACK_URI"));
    	Assert.assertTrue(logs.toString().contains("Profile has passed NfScreening"));
    	Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
					.tag("dbOperation",FIND).tag("serviceOperation",UNKNOWN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_SCREENING).counter().count(), this.count_dbmetrics_find_unknown_nfScreening_200_OK+1,0);
    	
 		
 	}
 	
 	@Test
 	public void testApplyNfScreeningRules_nfTypeRegisterScreeningRule_GlobalRuleOnlyPresent_Continue() throws IOException {
 		NfScreeningRules screeningRules = TestDataGenerator.getnfTypeRegisterScreeningRule();
 		screeningRules.getGlobalScreeningRulesData().setFailureAction(FailureAction.CONTINUE);
        NfScreening data = new NfScreening(screeningRules,nrfConfigurations.getGlobalConfig().getNrfInstanceId());
		
		List<NfScreening> rules = new ArrayList<NfScreening>();
		rules.add(data);
		
		when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);
		double count = 0;
		try {
		 count = Metrics.globalRegistry.get("ocnrf.nfScreening.nfTypeRegister.requestFailed").tag("RequesterNfType", "NSSF").tag("NrfLevel", "default-ocnrf").counter().count();
		} catch (MeterNotFoundException e) {
			count = 0;
		}
		
		
		List<NfService> nfServices = new ArrayList<NfService>();
		NfProfile profile = TestDataGenerator.generateNF("NSSF");
		boolean pass = false;
		try {
		    nfScreeningSvc.applyNfScreeningRules(profile);
		    pass = true;
		} catch(Exception e) {
			pass = false;
		}
		
		Assert.assertTrue(pass == true);
		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
    	List<String> logs = new ArrayList<String>();
    	for(LogEvent logEvt:loggingEvent) {
    		logs.add(logEvt.getMessage().getFormattedMessage());
    	}
    	
    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=NF_TYPE_REGISTER"));
    	Assert.assertTrue(logs.toString().contains("NfProfile did not clear NF_TYPE_REGISTER Screening Rule"));
    	Assert.assertTrue(logs.toString().contains("logMsg=GlobalScreeningRule failed with failureAction, currentScreeningType=NF_TYPE_REGISTER, failureAction=CONTINUE"));
    	Assert.assertTrue(logs.toString().contains("nfScreeningPass=false, failureAction=CONTINUE"));
    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=PLMN_ID"));

    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=NF_FQDN"));
    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=NF_IP_ENDPOINT"));
    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=CALLBACK_URI"));
    	Assert.assertTrue(logs.toString().contains("Profile has passed NfScreening"));
    	Assert.assertEquals(count+1,Metrics.globalRegistry.get("ocnrf.nfScreening.nfTypeRegister.requestFailed").tag("RequesterNfType", "NSSF").counter().count(),0);
    	Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
				.tag("dbOperation",FIND).tag("serviceOperation",UNKNOWN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_SCREENING).counter().count(), this.count_dbmetrics_find_unknown_nfScreening_200_OK+1,0);
	
 	}
 	
 	@Test
 	public void testApplyNfScreeningRules_nfTypeRegisterScreeningRule_GlobalRuleOnlyPresent_returnsSuccess() throws IOException {
 		NfScreeningRules screeningRules = TestDataGenerator.getnfTypeRegisterScreeningRule();
 		
        NfScreening data = new NfScreening(screeningRules,nrfConfigurations.getGlobalConfig().getNrfInstanceId());
		
		List<NfScreening> rules = new ArrayList<NfScreening>();
		rules.add(data);
		
		when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);
		
		List<NfService> nfServices = new ArrayList<NfService>();
		NfProfile profile = TestDataGenerator.generateNF("PCF");
		boolean pass = false;
		try {
		    nfScreeningSvc.applyNfScreeningRules(profile);
		    pass = true;
		} catch(Exception e) {
			pass = false;
		}
		
		Assert.assertTrue(pass == true);
		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
    	List<String> logs = new ArrayList<String>();
    	for(LogEvent logEvt:loggingEvent) {
    		logs.add(logEvt.getMessage().getFormattedMessage());
    	}
    	
    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=NF_TYPE_REGISTER"));
    	Assert.assertTrue(logs.toString().contains("NfProfile cleared NF_TYPE_REGISTER screening Rule"));
    	Assert.assertTrue(logs.toString().contains("NfProfile has passed GlobalScreeningRule, currentScreeningType=NF_TYPE_REGISTER"));
    	Assert.assertTrue(logs.toString().contains("nfScreeningPass=true, failureAction=CONTINUE"));
    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=PLMN_ID"));

    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=NF_FQDN"));
    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=NF_IP_ENDPOINT"));
    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=CALLBACK_URI"));
    	Assert.assertTrue(logs.toString().contains("Profile has passed NfScreening"));
    	
    	System.out.println("Scenario 2");
		double count = 0;
		try {
		 count = Metrics.globalRegistry.get("ocnrf.nfScreening.nfTypeRegister.requestRejected").tag("RequesterNfType", "CHF").counter().count();
		} catch (MeterNotFoundException e) {
			count = 0;
		}
		
		profile = TestDataGenerator.generateNF("CHF");
		pass = false;
		try {
		    nfScreeningSvc.applyNfScreeningRules(profile);
		    pass = true;
		} catch(Exception e) {
			pass = false;
		}
		
		Assert.assertTrue(pass == false);
		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
		loggingEvent = captorLoggingEvent.getAllValues();
    	logs = new ArrayList<String>();
    	for(LogEvent logEvt:loggingEvent) {
    		logs.add(logEvt.getMessage().getFormattedMessage());
    	}
		Assert.assertTrue(logs.toString().contains("logMsg=GlobalScreeningRule failed with failureAction, currentScreeningType=NF_TYPE_REGISTER, failureAction=SEND_ERROR"));
		Assert.assertEquals(count+1,Metrics.globalRegistry.get("ocnrf.nfScreening.nfTypeRegister.requestRejected").tag("RequesterNfType", "CHF").counter().count(),0);
    	//custom nftype
    	profile = TestDataGenerator.generateNF("CUSTOM_ABC");
    	pass = false;
		try {
		    nfScreeningSvc.applyNfScreeningRules(profile);
		    pass = true;
		} catch(Exception e) {
			pass = false;
		}
		
		Assert.assertTrue(pass == true);
		
		System.out.println("Scenario 3");
		count = 0;
		try {
		 count = Metrics.globalRegistry.get("ocnrf.nfScreening.notApplied.InternalError").tag("RequesterNfType", "CUSTOM_ABC").counter().count();
		} catch (MeterNotFoundException e) {
			count = 0;
		}
		rules.clear();

		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc("Some data");
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		data.setNfScreeningJsonDocList(versionJsonDocList.toString());
    	rules.add(data);
    	when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);
    	
    	ProblemDetails prob = new ProblemDetails();
    	Exception ex = new Exception();
    	pass= false;
    	try {
    		nfScreeningSvc.applyNfScreeningRules(profile);
    		pass = true;
    	}catch(Exception e) {
    		ex = e;
    		pass = false;
    	}

    	Assert.assertTrue(pass == false);
    	verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
    	loggingEvent = captorLoggingEvent.getAllValues();
    	logs = new ArrayList<String>();
    	for(LogEvent logEvt:loggingEvent) {
    		logs.add(logEvt.getMessage().getFormattedMessage());
    	}

    	Assert.assertTrue(logs.toString().contains("logMsg=ObjectMapper thrown exception for, NfScreeningRulesListType=NF_TYPE_REGISTER"));
    	Assert.assertTrue(logs.toString().contains("Aborting NfScreening!!"));
    	Assert.assertEquals(count+1,Metrics.globalRegistry.get("ocnrf.nfScreening.notApplied.InternalError").tag("RequesterNfType", "CUSTOM_ABC").counter().count(),0);
    	System.out.println("Scenario 4");
		rules.clear();
    	when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);
    	
    	prob = new ProblemDetails();
    	pass= false;
    	try {
    		nfScreeningSvc.applyNfScreeningRules(profile);
    		pass = true;
    	}catch(Exception e) {
    		ex = e;
    		pass = false;
    	}

    	Assert.assertTrue(pass == true);
    	verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
    	loggingEvent = captorLoggingEvent.getAllValues();
    	logs = new ArrayList<String>();
    	for(LogEvent logEvt:loggingEvent) {
    		logs.add(logEvt.getMessage().getFormattedMessage());
    	}

    	Assert.assertTrue(logs.toString().contains("NfScreening rules not enabled"));
    	Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
				.tag("dbOperation",FIND).tag("serviceOperation",UNKNOWN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_SCREENING).counter().count(), this.count_dbmetrics_find_unknown_nfScreening_200_OK+5,0);
    	
 	}
 	@Test
 	public void testApplyNfScreeningRules_PlmnList_GlobalRuleCheck() throws IOException {
 		NfScreeningRules screeningRules = TestDataGenerator.getPlmnIdScreeningRule();

 		//GLOBAL Rule
 		NfScreening data = new NfScreening(screeningRules,nrfConfigurations.getGlobalConfig().getNrfInstanceId());

 		List<NfScreening> rules = new ArrayList<NfScreening>();
 		rules.add(data);

 		NfProfile profile = TestDataGenerator.generateNF("PCF");

 		// profile contains 310/14 plmnId not present in global rule
 		when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);

 		double count = 0;
 		
 		try {
 			count = Metrics.globalRegistry.get("ocnrf.nfScreening.plmnId.requestFailed").tag("RequesterNfType", "PCF").tag("NrfLevel", "default-ocnrf").counter().count();
 		} catch (MeterNotFoundException e) {
 			count = 0;
 		}
 		boolean pass = false;
 		try {
 			nfScreeningSvc.applyNfScreeningRules(profile);
 			pass = true;
 		} catch(Exception e) {
 			pass = false;
 		}

 		Assert.assertTrue(pass == true);
 		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
 		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
 		List<String> logs = new ArrayList<String>();
 		for(LogEvent logEvt:loggingEvent) {
 			logs.add(logEvt.getMessage().getFormattedMessage());
 		}

 		Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=PLMN_ID"));
 		Assert.assertTrue(logs.toString().contains("NfProfile.plmnList did not clear PLMN_ID Screening Rule, plmnList=[{\"mcc\":\"310\",\"mnc\":\"14\"}]"));
 		Assert.assertTrue(logs.toString().contains("GlobalScreeningRule failed with failureAction, currentScreeningType=PLMN_ID, failureAction=CONTINUE"));
 		Assert.assertTrue(logs.toString().contains("nfScreeningPass=false, failureAction=CONTINUE"));
 		Assert.assertTrue(logs.toString().contains("Profile has passed NfScreening"));
        Assert.assertEquals(count+1,  Metrics.globalRegistry.get("ocnrf.nfScreening.plmnId.requestFailed").tag("RequesterNfType", "PCF").counter().count(),0);
        // profile contains only 1 plmnId which matches the WHITELIST
 		System.out.println("Scenario 2");
 		List<Plmn> plmnList = new ArrayList<>();
 		plmnList.add(new Plmn("311", "11"));
 		profile.setPlmnList(plmnList);

 		rules = new ArrayList<NfScreening>();
 		rules.add(data);
 		when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);

 		pass = false;
 		try {
 			nfScreeningSvc.applyNfScreeningRules(profile);
 			pass = true;
 		} catch(Exception e) {
 			pass = false;
 		}

 		Assert.assertTrue(pass == true);
 		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
 		loggingEvent = captorLoggingEvent.getAllValues();
 		logs = new ArrayList<String>();
 		for(LogEvent logEvt:loggingEvent) {
 			logs.add(logEvt.getMessage().getFormattedMessage());
 		}

 		Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=PLMN_ID"));
 		Assert.assertTrue(logs.toString().contains("NfProfile cleared PLMN_ID screening Rule"));
 		Assert.assertTrue(logs.toString().contains("logMsg=NfProfile has passed GlobalScreeningRule, currentScreeningType=PLMN_ID"));
 		Assert.assertTrue(logs.toString().contains("nfScreeningPass=true, failureAction=CONTINUE"));
 		Assert.assertTrue(logs.toString().contains("Profile has passed NfScreening"));
 		
 		

    	System.out.println("Scenario 3");
    	profile.setNfType("UDR");
    	screeningRules = TestDataGenerator.getPlmnIdScreeningRule();
        screeningRules.setAmfScreeningRulesData(screeningRules.getGlobalScreeningRulesData());
        screeningRules.setGlobalScreeningRulesData(null);
 		
 		data = new NfScreening(screeningRules,nrfConfigurations.getGlobalConfig().getNrfInstanceId());

 		rules = new ArrayList<NfScreening>();
 		rules.add(data);
 		rules = new ArrayList<NfScreening>();
 		rules.add(data);
 		when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);

 		pass = false;
 		try {
 			nfScreeningSvc.applyNfScreeningRules(profile);
 			pass = true;
 		} catch(Exception e) {
 			pass = false;
 		}

 		Assert.assertTrue(pass == true);
 		
 		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
    	loggingEvent = captorLoggingEvent.getAllValues();
    	logs = new ArrayList<String>();
    	for(LogEvent logEvt:loggingEvent) {
    		logs.add(logEvt.getMessage().getFormattedMessage());
    	}
    	Assert.assertTrue(logs.toString().contains("logMsg=No Screening rules configured for Global or for NfType, currentScreeningType=PLMN_ID, NfType=UDR"));
    	
 	}

 	@Test
 	public void testApplyNfScreeningRules_PlmnList_GlobalRuleAndNfTypeRule() throws IOException {
        NfScreeningRules screeningRules = TestDataGenerator.getPlmnIdScreeningRule();
 		
 		//GLOBAL Rule
        screeningRules.getGlobalScreeningRulesData().setFailureAction(FailureAction.SEND_ERROR);
        // PCF rule
        screeningRules.setPcfScreeningRulesData(screeningRules.getGlobalScreeningRulesData());
        NfScreening data = new NfScreening(screeningRules,nrfConfigurations.getGlobalConfig().getNrfInstanceId());
		
		List<NfScreening> rules = new ArrayList<NfScreening>();
		rules.add(data);
		
		NfProfile profile = TestDataGenerator.generateNF("PCF");
		List<Plmn> plmnList = new ArrayList<>();
    	plmnList.add(new Plmn("311", "11"));
    	plmnList.add(new Plmn("311", "12"));
    	profile.setPlmnList(plmnList);
    	
		// profile contains one plmnId not present in global rule
		when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);
		
        double count = 0;
 		
 		try {
 			count = Metrics.globalRegistry.get("ocnrf.nfScreening.plmnId.requestRejected").tag("RequesterNfType", "PCF").tag("NrfLevel", "default-ocnrf").counter().count();
 		} catch (MeterNotFoundException e) {
 			count = 0;
 		}
		boolean pass = false;
		try {
		    nfScreeningSvc.applyNfScreeningRules(profile);
		    pass = true;
		} catch(Exception e) {
			pass = false;
		}
		
		Assert.assertTrue(pass == false);
		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
    	List<String> logs = new ArrayList<String>();
    	for(LogEvent logEvt:loggingEvent) {
    		logs.add(logEvt.getMessage().getFormattedMessage());
    	}
    	
    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=PLMN_ID"));
    	Assert.assertTrue(logs.toString().contains("logMsg=NfProfile.plmnList did not clear PLMN_ID Screening Rule, plmnList=[{\"mcc\":\"311\",\"mnc\":\"12\"}]"));
    	Assert.assertTrue(logs.toString().contains("logMsg=GlobalScreeningRule failed with failureAction, currentScreeningType=PLMN_ID, failureAction=SEND_ERROR"));
    	Assert.assertTrue(logs.toString().contains("logMsg=ScreeningRulesData is configured for screeningRule, NfType=PCF, Screening Type=PLMN_ID"));
    	Assert.assertTrue(logs.toString().contains("logMsg=ScreeningRule failed with failureAction, NfType=PCF, Screening Type=PLMN_ID, failureAction=SEND_ERROR"));
    	Assert.assertTrue(logs.toString().contains("nfScreeningPass=false, failureAction=SEND_ERROR"));
    	Assert.assertEquals(count+1,  Metrics.globalRegistry.get("ocnrf.nfScreening.plmnId.requestRejected").tag("RequesterNfType", "PCF").counter().count(),0);
    	// profile contains 2 plmnId which matches the GLOBAL-WHITELIST
    	System.out.println("Scenario 2");
    	plmnList = new ArrayList<>();
    	plmnList.add(new Plmn("311", "11"));
    	plmnList.add(new Plmn("310", "12"));
    	profile.setPlmnList(plmnList);

    	rules = new ArrayList<NfScreening>();
		rules.add(data);
    	when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);

    	pass = false;
    	try {
    		nfScreeningSvc.applyNfScreeningRules(profile);
    		pass = true;
    	} catch(Exception e) {
    		pass = false;
    	}

    	Assert.assertTrue(pass == true);
    	verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
    	loggingEvent = captorLoggingEvent.getAllValues();
    	logs = new ArrayList<String>();
    	for(LogEvent logEvt:loggingEvent) {
    		logs.add(logEvt.getMessage().getFormattedMessage());
    	}

    	Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=PLMN_ID"));
    	Assert.assertTrue(logs.toString().contains("NfProfile cleared PLMN_ID screening Rule"));
    	Assert.assertTrue(logs.toString().contains("logMsg=NfProfile has passed GlobalScreeningRule, currentScreeningType=PLMN_ID"));
    	Assert.assertTrue(logs.toString().contains("logMsg=ScreeningRulesData is configured for screeningRule, NfType=PCF, Screening Type=PLMN_ID"));
    	Assert.assertTrue(logs.toString().contains("nfScreeningPass=true, failureAction=CONTINUE"));
    	Assert.assertTrue(logs.toString().contains("Profile has passed NfScreening"));

 	}
 	
 	@Test
 	public void testApplyNfScreeningRules_PlmnList_NfTypeRule() throws IOException {
        NfScreeningRules screeningRules = TestDataGenerator.getPlmnIdScreeningRule();
 		
 		//PCF Rule
        screeningRules = TestDataGenerator.getPlmnIdScreeningRule();
        screeningRules.setCustomNfScreeningRulesData(screeningRules.getGlobalScreeningRulesData());
        screeningRules.setGlobalScreeningRulesData(null);
        screeningRules.getCustomNfScreeningRulesData().setFailureAction(FailureAction.SEND_ERROR);
        screeningRules.setNfScreeningRulesListType(NfScreeningRulesListType.PLMN_ID);
        screeningRules.setNfScreeningType(NfScreeningType.BLACKLIST);
        
        NfScreening data = new NfScreening(screeningRules,nrfConfigurations.getGlobalConfig().getNrfInstanceId());
		
		List<NfScreening> rules = new ArrayList<NfScreening>();
        rules.add(data);
        
        // PCF Profile has 1 plmn matching blacklist. Reject
        NfProfile profile = TestDataGenerator.generateNF("CUSTOM_PCF");
        List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("311", "11"));
        plmnList.add(new Plmn("310", "12"));
        plmnList.add(new Plmn("311", "12"));
        profile.setPlmnList(plmnList);

        when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);
        double count = 0;
 		
 
        boolean pass = false;
        try {
        	nfScreeningSvc.applyNfScreeningRules(profile);
        	pass = true;
        } catch(Exception e) {
        	pass = false;
        }

        Assert.assertTrue(pass == false);
        verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
        List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
        List<String> logs = new ArrayList<String>();
        for(LogEvent logEvt:loggingEvent) {
        	logs.add(logEvt.getMessage().getFormattedMessage());
        }

        Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=PLMN_ID"));
        Assert.assertTrue(logs.toString().contains("logMsg=NfProfile.plmnList did not clear PLMN_ID Screening Rule, plmnList=[{\"mcc\":\"311\",\"mnc\":\"11\"}, {\"mcc\":\"310\",\"mnc\":\"12\"}"));
        Assert.assertTrue(logs.toString().contains("logMsg=ScreeningRule failed with failureAction, NfType=CUSTOM_PCF, Screening Type=PLMN_ID, failureAction=SEND_ERROR"));
        System.out.println("Scenario 2");
        profile = TestDataGenerator.generateNF("CUSTOM_PCF");
        rules = new ArrayList<NfScreening>();
        rules.add(data);
        when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);
        
        pass = false;
        try {
        	nfScreeningSvc.applyNfScreeningRules(profile);
        	pass = true;
        } catch(Exception e) {
        	pass = false;
        }

        Assert.assertTrue(pass == true);
        verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
        loggingEvent = captorLoggingEvent.getAllValues();
        logs = new ArrayList<String>();
        for(LogEvent logEvt:loggingEvent) {
        	logs.add(logEvt.getMessage().getFormattedMessage());
        }

        Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=PLMN_ID"));
        Assert.assertTrue(logs.toString().contains("logMsg=ScreeningRulesData is configured for screeningRule, NfType=CUSTOM_PCF, Screening Type=PLMN_ID"));
        Assert.assertTrue(logs.toString().contains("logMsg=NfProfile has passed ScreeningRule, NfType=CUSTOM_PCF, Screening Type=PLMN_ID"));
        Assert.assertTrue(logs.toString().contains("nfScreeningPass=true, failureAction=CONTINUE"));
 	}
 		 
    
 	@Test
 	public void testApplyNfScreeningRules_ipEndpointList_GlobalRuleAndNfTypeRule() throws IOException {
 		NfScreeningRules screeningRules = TestDataGenerator.getIpEndpointScreeningRule();

 		//GLOBAL Rule
 		screeningRules.getGlobalScreeningRulesData().setFailureAction(FailureAction.SEND_ERROR);
 		NfScreeningRulesData screeningRulesData2 = new NfScreeningRulesData();
 		List<NfIpEndPoint> nfIpEndPointList2 = new ArrayList<NfIpEndPoint>();

 		screeningRulesData2.setFailureAction(FailureAction.SEND_ERROR);
 		//both present whitelist(global fail,nftype pass )

 		NfIpEndPoint nfIpEndPoint2 = new NfIpEndPoint();
 		//ipv4range+port
 		nfIpEndPoint2.setIpv4AddressRange(new Ipv4AddressRange("192.168.19.100","192.168.19.200"));
 		List<Integer> ports2 = new ArrayList<Integer>();
 		ports2.add(80);
 		nfIpEndPoint2.setPorts(ports2);
 		nfIpEndPointList2.add(nfIpEndPoint2);

 		screeningRulesData2.setNfIpEndPointList(nfIpEndPointList2);
 		// PCF rule
 		screeningRules.setPcfScreeningRulesData(screeningRulesData2);
 		NfScreening data = new NfScreening(screeningRules,nrfConfigurations.getGlobalConfig().getNrfInstanceId());

 		List<NfScreening> rules = new ArrayList<NfScreening>();
 		rules.add(data);

 		NfProfile profile = TestDataGenerator.generateNF("PCF");

 		profile.getNfServices().clear();
 		profile.getIpv4Addresses().clear();
 		profile.getIpv6Addresses().clear();
 		profile.setNfServices(null);
 		profile.getIpv4Addresses().add("192.168.19.100");
 		profile.setIpv6Addresses(null);


 		when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);

 		boolean pass = false;
 		try {
 			nfScreeningSvc.applyNfScreeningRules(profile);
 			pass = true;
 		} catch(Exception e) {
 			pass = false;
 		}

 		Assert.assertTrue(pass == true);
 		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
 		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
 		List<String> logs = new ArrayList<String>();
 		for(LogEvent logEvt:loggingEvent) {
 			logs.add(logEvt.getMessage().getFormattedMessage());
 		}

 		Assert.assertTrue(logs.toString().contains("logMsg=GlobalScreeningRule failed with failureAction, currentScreeningType=NF_IP_ENDPOINT, failureAction=SEND_ERROR"));
 		Assert.assertTrue(logs.toString().contains("logMsg=NfProfile has passed ScreeningRule, Screening Type=NF_IP_ENDPOINT, NfType=PCF"));
 		Assert.assertTrue(logs.toString().contains("nfScreeningPass=true, failureAction=SEND_ERROR"));

 		//both present whitelist(global fail,nftype fail)
 		profile.getIpv4Addresses().add("192.168.19.100");
 		profile.getIpv4Addresses().add("192.168.29.100");
 		pass = false;
 		
 		double count = 0;
  		
  		try {
  			count = Metrics.globalRegistry.get("ocnrf.nfScreening.nfIpEndPoint.requestRejected").tag("RequesterNfType", "PCF").tag("NrfLevel", "default-ocnrf").counter().count();
  		} catch (MeterNotFoundException e) {
  			count = 0;
  		}
 		try {
 			nfScreeningSvc.applyNfScreeningRules(profile);
 			pass = true;
 		} catch(Exception e) {
 			pass = false;
 		}

 		Assert.assertTrue(pass == false);  
 		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
 		loggingEvent = captorLoggingEvent.getAllValues();
 		logs = new ArrayList<String>();
 		for(LogEvent logEvt:loggingEvent) {
 			logs.add(logEvt.getMessage().getFormattedMessage());
 		}
 		Assert.assertTrue(logs.toString().contains("logMsg=ScreeningRule failed with failureAction, NfType=PCF, Screening Type=NF_IP_ENDPOINT, failureAction=SEND_ERROR"));
 		Assert.assertEquals(count+1,  Metrics.globalRegistry.get("ocnrf.nfScreening.nfIpEndPoint.requestRejected").tag("RequesterNfType", "PCF").counter().count(),0);
 	}

 	@Test
 	public void testApplyNfScreeningRules_ipEndpointList_GlobalRuleAndNfTypeBlackListRule() throws IOException {
 		NfScreeningRules screeningRules = TestDataGenerator.getIpEndpointScreeningRule();

 		//GLOBAL Rule
 		screeningRules.getGlobalScreeningRulesData().setFailureAction(FailureAction.SEND_ERROR);
 		NfScreeningRulesData screeningRulesData2 = new NfScreeningRulesData();
 		List<NfIpEndPoint> nfIpEndPointList2 = new ArrayList<NfIpEndPoint>();
 		screeningRules.setNfScreeningType(NfScreeningType.BLACKLIST);
 		screeningRulesData2.setFailureAction(FailureAction.CONTINUE);
 		//both present whitelist(global pass,nftype pass )

 		NfIpEndPoint nfIpEndPoint2 = new NfIpEndPoint();
 		//ipv4range+port
 		nfIpEndPoint2.setIpv4AddressRange(new Ipv4AddressRange("192.168.19.100","192.168.19.200"));
 		List<Integer> ports2 = new ArrayList<Integer>();
 		ports2.add(80);
 		nfIpEndPoint2.setPorts(ports2);
 		nfIpEndPointList2.add(nfIpEndPoint2);

 		screeningRulesData2.setNfIpEndPointList(nfIpEndPointList2);
 		// PCF rule
 		screeningRules.setPcfScreeningRulesData(screeningRulesData2);
 		NfScreening data = new NfScreening(screeningRules,nrfConfigurations.getGlobalConfig().getNrfInstanceId());

 		List<NfScreening> rules = new ArrayList<NfScreening>();
 		rules.add(data);

 		NfProfile profile = TestDataGenerator.generateNF("PCF");

 		profile.getNfServices().clear();
 		profile.getIpv4Addresses().clear();
 		profile.getIpv6Addresses().clear();
 		profile.setNfServices(null);
 		profile.getIpv4Addresses().add("192.168.39.100");
 		profile.setIpv6Addresses(null);

       
 		when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);

 		boolean pass = false;
 		try {
 			nfScreeningSvc.applyNfScreeningRules(profile);
 			pass = true;
 		} catch(Exception e) {
 			pass = false;
 		}

 		Assert.assertTrue(pass == true);
 		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
 		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
 		List<String> logs = new ArrayList<String>();
 		for(LogEvent logEvt:loggingEvent) {
 			logs.add(logEvt.getMessage().getFormattedMessage());
 		}

 		Assert.assertTrue(logs.toString().contains("NfProfile has passed GlobalScreeningRule, currentScreeningType=NF_IP_ENDPOINT"));
 		Assert.assertTrue(logs.toString().contains("logMsg=NfProfile has passed ScreeningRule, NfType=PCF, Screening Type=NF_IP_ENDPOINT"));


 		//both present whitelist(global pass,nftype fail)
 		profile.getIpv4Addresses().clear();
 		profile.getIpv4Addresses().add("192.168.19.100");
 		double count = 0;
   		
   		try {
   			count = Metrics.globalRegistry.get("ocnrf.nfScreening.nfIpEndPoint.requestFailed").tag("RequesterNfType", "PCF").tag("NrfLevel", "default-ocnrf").counter().count();
   		} catch (MeterNotFoundException e) {
   			count = 0;
   		}

 		pass = false;
 		try {
 			nfScreeningSvc.applyNfScreeningRules(profile);
 			pass = true;
 		} catch(Exception e) {
 			pass = false;
 		}

 		Assert.assertTrue(pass == true);  
 		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
 		loggingEvent = captorLoggingEvent.getAllValues();
 		logs = new ArrayList<String>();
 		for(LogEvent logEvt:loggingEvent) {
 			logs.add(logEvt.getMessage().getFormattedMessage());
 		}
 		Assert.assertTrue(logs.toString().contains("logMsg=ScreeningRule failed with failureAction, NfType=PCF, Screening Type=NF_IP_ENDPOINT, failureAction=CONTINUE"));
 		Assert.assertEquals(count+1,  Metrics.globalRegistry.get("ocnrf.nfScreening.nfIpEndPoint.requestFailed").tag("RequesterNfType", "PCF").counter().count(),0);

 	}

 	@Test
 	public void testApplyNfScreeningRules_callbackUriList_GlobalRuleAndNfTypeRule() throws IOException {
 		NfScreeningRules screeningRules = TestDataGenerator.getCallbackUriScreeningRule();
 		NfScreeningRulesData screeningRulesData = screeningRules.getGlobalScreeningRulesData();

 		//GLOBAL Rule
 		screeningRules.getGlobalScreeningRulesData().setFailureAction(FailureAction.SEND_ERROR);
 		NfScreeningRulesData screeningRulesData2 = new NfScreeningRulesData();
 		List<NfCallBackUri> nfCallBackUriList2 = new ArrayList<NfCallBackUri>();

 		screeningRulesData2.setFailureAction(FailureAction.CONTINUE);
 		//both present whitelist(global fail,nftype pass )

 		NfCallBackUri callBackUri2 = new NfCallBackUri();

 		callBackUri2.setFqdn("pcf.oracle.com");
 		List<Integer> ports2 = new ArrayList<Integer>();
 		ports2.add(80);
 		callBackUri2.setPorts(ports2);
 		nfCallBackUriList2.add(callBackUri2);

 		screeningRulesData2.setNfCallBackUriList(nfCallBackUriList2);
 		// PCF rule
 		screeningRules.setPcfScreeningRulesData(screeningRulesData2);
 		screeningRules.getPcfScreeningRulesData().setFailureAction(FailureAction.CONTINUE);
 		NfScreening data = new NfScreening(screeningRules,nrfConfigurations.getGlobalConfig().getNrfInstanceId());

 		List<NfScreening> rules = new ArrayList<NfScreening>();
 		rules.add(data);

 		NfProfile profile = TestDataGenerator.generateNF("PCF");

 		profile.getNfServices().clear();
 		NfService svc = TestDataGenerator.generateService("PCF");
 		svc.getDefaultNotificationSubscriptions().clear();
 		svc.setScheme(UriScheme.HTTP);
 		List<DefaultNotificationSubscription> aList6 = new ArrayList<DefaultNotificationSubscription>();
 		aList6 = new ArrayList<DefaultNotificationSubscription>();
 		aList6.add(new DefaultNotificationSubscription(NotificationType.N1_MESSAGES, URI.create("http://pcf.oracle.com:80"),N1MessageClass.FIVE_GMM));

 		svc.setDefaultNotificationSubscriptions(aList6);
 		profile.getNfServices().add(svc);

 		when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);

 		boolean pass = false;
 		try {
 			nfScreeningSvc.applyNfScreeningRules(profile);
 			pass = true;
 		} catch(Exception e) {
 			pass = false;
 		}
 		System.out.println("scenario 1");
 		Assert.assertTrue(pass == true);
 		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
 		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
 		List<String> logs = new ArrayList<String>();
 		for(LogEvent logEvt:loggingEvent) {
 			logs.add(logEvt.getMessage().getFormattedMessage());
 		}

 		Assert.assertTrue(logs.toString().contains("logMsg=GlobalScreeningRule failed with failureAction, currentScreeningType=CALLBACK_URI, failureAction=SEND_ERROR"));
 		Assert.assertTrue(logs.toString().contains("logMsg=NfProfile has passed ScreeningRule, Screening Type=CALLBACK_URI, NfType=PCF"));
 		Assert.assertTrue(logs.toString().contains("nfScreeningPass=true, failureAction=SEND_ERROR"));

 		//both present whitelist(global fail,nftype fail)
 		profile.getNfServices().get(0).getDefaultNotificationSubscriptions().
 		add(new DefaultNotificationSubscription(NotificationType.N1_MESSAGES, 
 				URI.create("http://pcf.oracle.com:81"),N1MessageClass.FIVE_GMM));

 		System.out.println("scenario 2");
 		double count = 0;
   		
   		try {
   			count = Metrics.globalRegistry.get("ocnrf.nfScreening.callbackUri.requestFailed").tag("RequesterNfType", "PCF").tag("NrfLevel", "default-ocnrf").counter().count();
   		} catch (MeterNotFoundException e) {
   			count = 0;
   		}

 		pass = false;
 		try {
 			nfScreeningSvc.applyNfScreeningRules(profile);
 			pass = true;
 		} catch(Exception e) {
 			pass = false;
 		}

 		Assert.assertTrue(pass == true);  
 		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
 		loggingEvent = captorLoggingEvent.getAllValues();
 		logs = new ArrayList<String>();
 		for(LogEvent logEvt:loggingEvent) {
 			logs.add(logEvt.getMessage().getFormattedMessage());
 		}
 		Assert.assertTrue(logs.toString().contains("logMsg=ScreeningRule failed with failureAction, NfType=PCF, Screening Type=CALLBACK_URI, failureAction=CONTINUE"));
 		Assert.assertEquals(count+1,  Metrics.globalRegistry.get("ocnrf.nfScreening.callbackUri.requestFailed").tag("RequesterNfType", "PCF").counter().count(),0);
 	}

 	@Test
 	public void testApplyNfScreeningRules_callbackUriList_GlobalRuleAndNfTypeBlackListRule() throws IOException {
 		NfScreeningRules screeningRules = TestDataGenerator.getCallbackUriScreeningRule();
 		screeningRules.setNfScreeningType(NfScreeningType.BLACKLIST);
 		NfScreeningRulesData screeningRulesData = screeningRules.getGlobalScreeningRulesData();

 		//GLOBAL Rule
 		screeningRules.getGlobalScreeningRulesData().setFailureAction(FailureAction.SEND_ERROR);
 		NfScreeningRulesData screeningRulesData2 = new NfScreeningRulesData();
 		List<NfCallBackUri> nfCallBackUriList2 = new ArrayList<NfCallBackUri>();

 		screeningRulesData2.setFailureAction(FailureAction.SEND_ERROR);
 		//both present whitelist(global pass,nftype pass )

 		NfCallBackUri callBackUri2 = new NfCallBackUri();

 		callBackUri2.setFqdn("nrf1.oracle.com");
 		List<Integer> ports2 = new ArrayList<Integer>();
 		ports2.add(80);
 		callBackUri2.setPorts(ports2);
 		nfCallBackUriList2.add(callBackUri2);

 		screeningRulesData2.setNfCallBackUriList(nfCallBackUriList2);
 		// PCF rule
 		screeningRules.setPcfScreeningRulesData(screeningRulesData2);
 		NfScreening data = new NfScreening(screeningRules,nrfConfigurations.getGlobalConfig().getNrfInstanceId());

 		List<NfScreening> rules = new ArrayList<NfScreening>();
 		rules.add(data);

 		NfProfile profile = TestDataGenerator.generateNF("PCF");

 		profile.getNfServices().clear();
 		NfService svc = TestDataGenerator.generateService("PCF");
 		svc.getDefaultNotificationSubscriptions().clear();
 		svc.setScheme(UriScheme.HTTP);
 		List<DefaultNotificationSubscription> aList6 = new ArrayList<DefaultNotificationSubscription>();
 		aList6 = new ArrayList<DefaultNotificationSubscription>();
 		aList6.add(new DefaultNotificationSubscription(NotificationType.N1_MESSAGES, URI.create("http://nrf2.oracle.com:80"),N1MessageClass.FIVE_GMM));

 		svc.setDefaultNotificationSubscriptions(aList6);
 		profile.getNfServices().add(svc);

 		when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);

        double count = 0;
 		
 		try {
 			count = Metrics.globalRegistry.get("ocnrf.nfScreening.callbackUri.requestRejected").tag("RequesterNfType", "PCF").tag("NrfLevel", "default-ocnrf").counter().count();
 		} catch (MeterNotFoundException e) {
 			count = 0;
 		}
 		
 		boolean pass = false;
 		try {
 			nfScreeningSvc.applyNfScreeningRules(profile);
 			pass = true;
 		} catch(Exception e) {
 			pass = false;
 		}

 		Assert.assertTrue(pass == true);
 		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
 		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
 		List<String> logs = new ArrayList<String>();
 		for(LogEvent logEvt:loggingEvent) {
 			logs.add(logEvt.getMessage().getFormattedMessage());
 		}

 		Assert.assertTrue(logs.toString().contains("logMsg=NfProfile has passed GlobalScreeningRule, currentScreeningType=CALLBACK_URI"));
 		Assert.assertTrue(logs.toString().contains("logMsg=NfProfile has passed ScreeningRule, NfType=PCF, Screening Type=CALLBACK_URI"));

 		//both present whitelist(global pass,nftype fail)
 		profile.getNfServices().get(0).getDefaultNotificationSubscriptions().
 		add(new DefaultNotificationSubscription(NotificationType.N1_MESSAGES, 
 				URI.create("http://nrf1.oracle.com:80"),N1MessageClass.FIVE_GMM));

 		pass = false;
 		try {
 			nfScreeningSvc.applyNfScreeningRules(profile);
 			pass = true;
 		} catch(Exception e) {
 			pass = false;
 		}

 		Assert.assertTrue(pass == false);  
 		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
 		loggingEvent = captorLoggingEvent.getAllValues();
 		logs = new ArrayList<String>();
 		for(LogEvent logEvt:loggingEvent) {
 			logs.add(logEvt.getMessage().getFormattedMessage());
 		}
 		Assert.assertTrue(logs.toString().contains("logMsg=NfProfile has passed GlobalScreeningRule, currentScreeningType=CALLBACK_URI"));
 		Assert.assertTrue(logs.toString().contains("logMsg=ScreeningRule failed with failureAction, NfType=PCF, Screening Type=CALLBACK_URI, failureAction=SEND_ERROR"));
 		Assert.assertEquals(count+1,  Metrics.globalRegistry.get("ocnrf.nfScreening.callbackUri.requestRejected").tag("RequesterNfType", "PCF").counter().count(),0);

 	}

 	@Test
 	public void testApplyNfScreeningRules_nfFqdnScreeningRule() throws IOException {
        NfScreeningRules screeningRules = TestDataGenerator.getFqdnScreeningRule();
 		
 		//PCF Rule
        screeningRules.setAmfScreeningRulesData(screeningRules.getGlobalScreeningRulesData());
        screeningRules.setGlobalScreeningRulesData(null);
        
        NfScreening data = new NfScreening(screeningRules,nrfConfigurations.getGlobalConfig().getNrfInstanceId());
		
		List<NfScreening> rules = new ArrayList<NfScreening>();
        rules.add(data);
        
        // AMF Profile has 1 nffqdn not matching whitelist. Reject
        NfProfile profile = TestDataGenerator.generateNF("AMF");
        profile.setFqdn("nrf2.tekelec.com");

        when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);
        double count = 0;
        try {
 			count = Metrics.globalRegistry.get("ocnrf.nfScreening.nfFqdn.requestFailed").tag("RequesterNfType", "AMF").tag("NrfLevel", "default-ocnrf").counter().count();
 		} catch (MeterNotFoundException e) {
 			count = 0;
 		}
        
        boolean pass = false;
        try {
        	nfScreeningSvc.applyNfScreeningRules(profile);
        	pass = true;
        } catch(Exception e) {
        	pass = false;
        }

        Assert.assertTrue(pass == true);
        verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
        List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
        List<String> logs = new ArrayList<String>();
        for(LogEvent logEvt:loggingEvent) {
        	logs.add(logEvt.getMessage().getFormattedMessage());
        }

        Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=NF_FQDN"));
        Assert.assertTrue(logs.toString().contains("logMsg=ScreeningRule failed with failureAction, NfType=AMF, Screening Type=NF_FQDN, failureAction=CONTINUE"));
        Assert.assertTrue(logs.toString().contains("nfScreeningPass=false, failureAction=CONTINUE"));
        Assert.assertEquals(count+1,  Metrics.globalRegistry.get("ocnrf.nfScreening.nfFqdn.requestFailed").tag("RequesterNfType", "AMF").counter().count(),0);
        
        
        System.out.println("Scenario 2");
        screeningRules.getAmfScreeningRulesData().setFailureAction(FailureAction.SEND_ERROR);
        rules = new ArrayList<NfScreening>();
        data = new NfScreening(screeningRules,nrfConfigurations.getGlobalConfig().getNrfInstanceId());
        rules.add(data);
        when(nfScreeningRepository.getAllNfScreeningRules(any())).thenReturn(rules);
        count = 0;
        try {
 			count = Metrics.globalRegistry.get("ocnrf.nfScreening.nfFqdn.requestRejected").tag("RequesterNfType", "AMF").tag("NrfLevel", "default-ocnrf").counter().count();
 		} catch (MeterNotFoundException e) {
 			count = 0;
 		}
        pass = false;
        try {
        	nfScreeningSvc.applyNfScreeningRules(profile);
        	pass = true;
        } catch(Exception e) {
        	pass = false;
        }

        Assert.assertTrue(pass == false);
        verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
        loggingEvent = captorLoggingEvent.getAllValues();
        logs = new ArrayList<String>();
        for(LogEvent logEvt:loggingEvent) {
        	logs.add(logEvt.getMessage().getFormattedMessage());
        }

        Assert.assertTrue(logs.toString().contains("Current NfScreeningType being processed, currentScreeningType=PLMN_ID"));
        Assert.assertTrue(logs.toString().contains("logMsg=ScreeningRulesData is configured for screeningRule, NfType=AMF, Screening Type=NF_FQDN"));
        Assert.assertTrue(logs.toString().contains("logMsg=ScreeningRule failed with failureAction, NfType=AMF, Screening Type=NF_FQDN, failureAction=SEND_ERROR"));
        Assert.assertTrue(logs.toString().contains("nfScreeningPass=false, failureAction=SEND_ERROR"));
        Assert.assertEquals(count+1,  Metrics.globalRegistry.get("ocnrf.nfScreening.nfFqdn.requestRejected").tag("RequesterNfType", "AMF").counter().count(),0);
 	}
 	
 	@Test
    public void givenNfProfile_whenNfRegister_NfScreeningFailWithInternalError() throws Exception{
    	String nfInstanceId = UUID.randomUUID().toString();
        String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+nfInstanceId;
        NrfConfigurations nrfConfig = new NrfConfigurations();
    	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getDiscSvc().setDiscResultValidityDuration(Duration.ofHours(1));
    	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
//    	nrfConfig.getRegSvc().setNfLoadChange(0);
//    	nrfConfig.getRegSvc().setDefaultHeartbeatTimerDuration(Duration.ofDays(5));
//    	nrfConfig.getRegSvc().setNrfSupportForProfileChangesInResponse(false);
    	
    	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
    	nrfConfig.getSubSvc().setNotify(new Notify());
    	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
    	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
    	
    	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
    	
    	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
//    	nrfConfig.getGlobalConfig().setPlmnList(plmnList);
    	
    	service.setNrfConfig(nrfConfig);
        URI nfInstanceUri = new URI(location);
    	NfProfile amfProfile = TestDataGenerator.generateNF("AMF");
    	amfProfile.setPlmnList(null);
    	Date now = new Date();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions systemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		NfScreeningSystemOptions nfScreeningSystemOptions = new NfScreeningSystemOptions();
		nfScreeningSystemOptions.setNfScreeningFeatureStatus(NfScreeningFeatureStatus.ENABLED);
		systemOptions.setNfScreeningSystemOptions(nfScreeningSystemOptions);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(systemOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		NrfSystemOptionsDao systemOptionsDaoError = TestDataGenerator.generateNrfSystemOptionsDao_errorResponses();
		NrfSystemOptionsDao systemOptionsDaoEngError = TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses();
		NrfSystemOptionsDao engSystemOptionsDao = TestDataGenerator.generateNrfEngSystemOptionsDao();
		ArrayList<NrfSystemOptionsDao> systemOptionsList = new ArrayList<NrfSystemOptionsDao>() { 
            { 
                add(nrfSystemOptionsDao); 
                add(engSystemOptionsDao); 
                add(systemOptionsDaoError);
                add(systemOptionsDaoEngError);
                
            } 
        }; 
        when(nrfSystemOptionsRepository.findbyRecordOwner(any())).thenReturn(systemOptionsList);
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
       	service.setNrfSystemAndEngineeringOptions(systemOptions, nrfEngSystemOptions);

    	NfInstance nfInstance = new NfInstance(amfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
    	CustomNfInstance customNfInstance = new CustomNfInstance(nfInstance, null);
    	when(nfDbServiceImpl.findNfInstanceByNfInstanceId(any(),any(),any())).thenReturn(customNfInstance);
    	when(nfDbServiceImpl.findNfInstanceForNfRegister(any())).thenReturn(customNfInstance);
		NfHeartBeat nfHeartBeat = new NfHeartBeat(amfProfile.getNfInstanceId(), NFStatus.REGISTERED, amfProfile.getLoad(),amfProfile.getHeartBeatTimer());
        NfStatusMonitor nfStatusMonitor = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());

        when(nfDbServiceImpl.findNfStatusMonitorByNfInstanceId(any(),any())).thenReturn(nfStatusMonitor);
        
        when(nfRepository.save(any(NfInstance.class))).thenReturn(nfInstance);
        
        when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(nfStatusMonitor);
    	
        Exception e = new Exception();
        doThrow(e).when(screeningSvc).applyNfScreeningRules(any());
    	Object o = service.addOrReplaceNfProfile(nfInstanceId, amfProfile, nfInstanceUri);
    	Assert.assertTrue(o instanceof NfPutResponse);
        NfPutResponse nfPutResponse = (NfPutResponse) o;
    	Assert.assertNull(nfPutResponse.getNfProfile().getPlmnList());
    	
    	 verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
         List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
         List<String> logs = new ArrayList<String>();
         for(LogEvent logEvt:loggingEvent) {
         	logs.add(logEvt.getMessage().getFormattedMessage());
         }
         System.out.println(logs.toString());
         Assert.assertTrue(logs.toString().contains("addOrReplaceNfProfile() : NFScreening Failed with exception"));
         Assert.assertTrue(logs.toString().contains("NF profile & heartbeat record updated successfully"));
         Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
      			.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK+1,0);
                  Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
      					.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK+1,0);
        
         
    	
    }
 	
 	 @Test
 	 public void testAddOrReplaceNfProfile_checkNfProfileChangesSupportInd_returnsAddProfile() throws Exception {

 		 // nfProfileChangesSupportInd is true; heartBeat, load and priority is null
 		 // Output contains heartBeat, load and priority with default values
 		 NfProfile profile = TestDataGenerator.generateNF("PCF");
 		 profile.setNfProfileChangesSupportInd(true);
 		 profile.setHeartBeatTimer(null);
 		 profile.setLoad(null);
 		 profile.setPriority(null);
 		 String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
 		 NrfConfigurations nrfConfig = new NrfConfigurations();
 		 nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
 		 nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());

 		 nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
 		 nrfConfig.getSubSvc().setNotify(new Notify());
 		 nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
 		 nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
 		 nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);

 		 nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
 		 List<Plmn> plmnList = new ArrayList<>();
 		 plmnList.add(new Plmn("310", "14"));

 		 service.setNrfConfig(nrfConfig);
 		 URI nfInstanceUri = new URI(location);
 		 String nfInstanceId = profile.getNfInstanceId();

 		 // Create HeartBeat Record
 		 NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
 		 Date now = new Date();
 		 NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
 		 
 		 when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
 		 NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
 		 when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
 		 doNothing().when(client).sendNotificationEvent(any(),any(),any());

 		 NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
 		 when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);

 		 Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
 		 Assert.assertTrue(o instanceof NfPutResponse);
 		 NfPutResponse resp = (NfPutResponse) o;

 		 profile = new NfProfile();
 		 profile.setNfInstanceId(nfInstanceId);
 		 profile.setNfType("PCF");
 		 profile.setNfStatus(NFStatus.REGISTERED);
 		 /* heart beat timer value set to null hence default value i.e 30 to be set from system options */
 		 profile.setHeartBeatTimer(30);
 		 //profile.setLoad(0);
 		// profile.setPriority(5);
 		 profile.setNfProfileChangesInd(true);
 		 Assert.assertNotNull(resp.getNfProfile());
 		 Assert.assertEquals(profile, resp.getNfProfile());

 		 // nfProfileChangesSupportInd is true; heartBeat is below min value
 		 // Output contains heartBeat with min value
 		 profile = TestDataGenerator.generateNF("PCF");
 		 profile.setNfProfileChangesSupportInd(true);
 		 profile.setHeartBeatTimer(10);
 		 nfInstanceId = profile.getNfInstanceId();

 		 
 		 when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
 		 dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
 		 when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
 		 doNothing().when(client).sendNotificationEvent(any(),any(),any());

 		 statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
 		 when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);

 		 o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
 		 Assert.assertTrue(o instanceof NfPutResponse);
 		 resp = (NfPutResponse) o;

 		 profile = new NfProfile();
 		 profile.setNfInstanceId(nfInstanceId);
 		 profile.setNfType("PCF");
 		 profile.setNfStatus(NFStatus.REGISTERED);
 		 profile.setHeartBeatTimer(30);
 		 profile.setNfProfileChangesInd(true);
 		 Assert.assertNotNull(resp.getNfProfile());
 		 Assert.assertEquals(profile, resp.getNfProfile());

 		 // nfProfileChangesSupportInd is true; heartBeat, load and priority is not null
 		 // Output not contains heartBeat, load and priority
 		 profile = TestDataGenerator.generateNF("PCF");
 		 profile.setNfProfileChangesSupportInd(true);
 		 nfInstanceId = profile.getNfInstanceId();

 		 
 		 when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
 		 dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
 		 when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
 		 doNothing().when(client).sendNotificationEvent(any(),any(),any());

 		 statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
 		 when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);

 		 o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
 		 Assert.assertTrue(o instanceof NfPutResponse);
 		 resp = (NfPutResponse) o;

 		 profile = new NfProfile();
 		 profile.setNfInstanceId(nfInstanceId);
 		 profile.setNfType("PCF");
 		 profile.setNfStatus(NFStatus.REGISTERED);
 		 profile.setNfProfileChangesInd(true);
 		 Assert.assertNotNull(resp.getNfProfile());
 		 Assert.assertEquals(profile, resp.getNfProfile());
// 		  Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
//      			.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+1,0);
//                  Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
//      					.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+1,0);

 	 }
 	 
 	 @Test
 	 public void testAddOrReplaceNfProfile_checkNfProfileChangesSupportInd_registerProfile_returnsAddProfile() throws Exception {

 		 // nfProfileChangesSupportInd is false, registered successfully
 		 NfProfile profile = TestDataGenerator.generateNF("PCF");
 		 profile.setNfProfileChangesSupportInd(false);
 		 String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
 		 NrfConfigurations nrfConfig = new NrfConfigurations();
 		 nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
 		 nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());

 		 nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
 		 nrfConfig.getSubSvc().setNotify(new Notify());
 		 nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
 		 nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
 		 nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);

 		 nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
         nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
 		 List<Plmn> plmnList = new ArrayList<>();
 		 plmnList.add(new Plmn("310", "14"));

 		 service.setNrfConfig(nrfConfig);
 		 URI nfInstanceUri = new URI(location);
 		 String nfInstanceId = profile.getNfInstanceId();

 		 // Create HeartBeat Record
 		 NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
 		 Date now = new Date();
 		 NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
 		 NfManagementSystemOptions nfManagement = TestDataGenerator.generateNfManagementSystemOptions();
 		 nfManagement.setNrfSupportForProfileChangesInResponse(false);
 		 ((NrfSystemOptions)nrfSystemOptionsDao.toDomain("v1")).setNfManagementSystemOptions(nfManagement);
 		 
 		 when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
 		 NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
 		 when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
 		 doNothing().when(client).sendNotificationEvent(any(),any(),any());

 		 NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
 		 when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);

 		 Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
 		 Assert.assertTrue(o instanceof NfPutResponse);
 		 NfPutResponse resp = (NfPutResponse) o;

 		 Assert.assertNotNull(resp.getNfProfile());
 		 Assert.assertEquals(profile, resp.getNfProfile());
 		 
 		 // nfProfileChangesSupportInd is true, registered successfully
 		 profile.setNfProfileChangesSupportInd(true);
 		 nfManagement.setNrfSupportForProfileChangesInResponse(true);
 		 ((NrfSystemOptions)nrfSystemOptionsDao.toDomain("v1")).setNfManagementSystemOptions(nfManagement);
 		 
 		 when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
 		 dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
 		 when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
 		 doNothing().when(client).sendNotificationEvent(any(),any(),any());

 		 statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
 		 when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);

 		 o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
 		 Assert.assertTrue(o instanceof NfPutResponse);
 		 resp = (NfPutResponse) o;

 		 NfProfile respProfile = new NfProfile();
 		 respProfile.setNfInstanceId(nfInstanceId);
 		 respProfile.setNfType("PCF");
 		 respProfile.setNfStatus(NFStatus.REGISTERED);
 		 respProfile.setNfProfileChangesInd(true);
 		 Assert.assertNotNull(resp.getNfProfile());
 		 Assert.assertEquals(respProfile, resp.getNfProfile());
 		 
 		 // nfProfileChangesSupportInd is true, heartBeat changes
 		 profile.setNfProfileChangesSupportInd(true);
 		 profile.setHeartBeatTimer(90);

 		 
 		 when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
 		 dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
 		 when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
 		 doNothing().when(client).sendNotificationEvent(any(),any(),any());

 		 statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
 		 when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);

 		 o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
 		 Assert.assertTrue(o instanceof NfPutResponse);
 		 resp = (NfPutResponse) o;

 		 Assert.assertNotNull(resp.getNfProfile());
 		 Assert.assertEquals(respProfile, resp.getNfProfile());
 		  Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
      			.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+3,0);
                  Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
      					.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+3,0);


 	 }
 	 
 	@Test
    public void testAddOrReplaceNfProfile_WhenUriHttps_FQDNAbsent() throws Exception {
        NfProfile profile = TestDataGenerator.generateNF("PCF");
        profile.setFqdn(null);
        profile.getNfServices().get(0).setScheme(UriScheme.HTTPS);
        profile.getNfServices().get(0).setFqdn(null);
        String location = "https://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
        NrfConfigurations nrfConfig = new NrfConfigurations();
        nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);   	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
       	nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
       	service.setNrfConfig(nrfConfig);
        URI nfInstanceUri = new URI(location);
        String nfInstanceId = profile.getNfInstanceId();
        when(nfDbServiceImpl.findNfInstanceByNfInstanceId(any(),any(),any())).thenReturn(null);
        NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
	    
        Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
        Assert.assertTrue(o instanceof NfPutResponse);
        NfPutResponse resp = (NfPutResponse) o;
        Assert.assertNotNull(resp.getProblemDetails());
        Assert.assertEquals(HttpStatus.BAD_REQUEST, resp.getHttpStatusCode());
        verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
        List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
        List<String> logs = new ArrayList<String>();
        for(LogEvent logEvt:loggingEvent) {
    	   logs.add(logEvt.getMessage().getFormattedMessage());
        }
        Assert.assertTrue(logs.toString().contains("NF registration failed with problemDetails, problemDetails="+ resp.getProblemDetails()));        
     //   Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
	 //		.tag("dbOperation",FIND).tag("serviceOperation",UNKNOWN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NRF_SYSTEMOPTIONS).counter().count(), this.count_dbmetrics_unknown_find_nrfSystemOptions_200_OK+1,0);
    }
 	
 	@Test
    public void testAddOrReplaceNfProfile_WhenUriHttps_FQDNinNfProfile() throws Exception {
 		NfProfile profile = TestDataGenerator.generateNF("PCF");
        String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
        profile.getNfServices().get(0).setScheme(UriScheme.HTTPS);
        profile.getNfServices().get(0).setFqdn(null);
        
        NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());   	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
       	
       	service.setNrfConfig(nrfConfig);
        URI nfInstanceUri = new URI(location);
        String nfInstanceId = profile.getNfInstanceId();
        
        // Create HeartBeat Record
        NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
        Date now = new Date();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		
        when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
        NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
        when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
        doNothing().when(client).sendNotificationEvent(any(),any(),any());
        
        NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
        when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
        
        Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
        Assert.assertTrue(o instanceof NfPutResponse);
        NfPutResponse resp = (NfPutResponse) o;
        
        Assert.assertNotNull(resp.getNfProfile());
        Assert.assertEquals(profile, resp.getNfProfile());
        Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
      			.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+1,0);
                  Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
      					.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+1,0);
       }
 	
 	@Test
    public void testAddOrReplaceNfProfile_WhenUriHttps_FQDNinNfServices() throws Exception {
 		NfProfile profile = TestDataGenerator.generateNF("PCF");
        String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
        profile.setFqdn(null);
        profile.getNfServices().get(0).setScheme(UriScheme.HTTPS);
        profile.getNfServices().get(0).setFqdn("PCF-d5g.oracle.com");
        
        NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());      	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);       	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
       	
       	service.setNrfConfig(nrfConfig);
        URI nfInstanceUri = new URI(location);
        String nfInstanceId = profile.getNfInstanceId();
        
        // Create HeartBeat Record
        NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
        Date now = new Date();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		
        when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
        NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
        when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
        doNothing().when(client).sendNotificationEvent(any(),any(),any());
        
        NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
        when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
        
        Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
        Assert.assertTrue(o instanceof NfPutResponse);
        NfPutResponse resp = (NfPutResponse) o;
        
        Assert.assertNotNull(resp.getNfProfile());
        Assert.assertEquals(profile, resp.getNfProfile());
        Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
      			.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+1,0);
                  Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
      					.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+1,0);
       }
 	
	@Test
	public void testAddOrReplaceNfProfile_WhenUriHttps_enableF5Disabled() throws Exception {
		NfProfile profile = TestDataGenerator.generateNF("PCF");
		String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/" + UUID.randomUUID().toString();
		profile.setFqdn(null);
		profile.getNfServices().get(0).setScheme(UriScheme.HTTPS);
		profile.getNfServices().get(0).setFqdn(null);

		NrfConfigurations nrfConfig = new NrfConfigurations();
		nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
		nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
		nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
		nrfConfig.getSubSvc().setNotify(new Notify());
		nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
		nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
		nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
		nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
		nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
		List<Plmn> plmnList = new ArrayList<>();
		plmnList.add(new Plmn("310", "14"));

		service.setNrfConfig(nrfConfig);
		URI nfInstanceUri = new URI(location);
		String nfInstanceId = profile.getNfInstanceId();

		// Create HeartBeat Record
		NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),
				profile.getHeartBeatTimer());
		Date now = new Date();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions systemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		GeneralSystemOptions general = new GeneralSystemOptions();
		List<Plmn> nrfPlmnList = new ArrayList<>();
		Plmn add = new Plmn("310", "14");
		nrfPlmnList.add(add);
		general.setNrfPlmnList(nrfPlmnList);
		general.setEnableF3(true);
		general.setEnableF5(false);
		systemOptions.setGeneralSystemOptions(general);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(systemOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());

		NrfSystemOptionsDao engSystemOptionsDao = TestDataGenerator.generateNrfEngSystemOptionsDao();
		NrfSystemOptionsDao systemOptionsDaoError = TestDataGenerator.generateNrfSystemOptionsDao_errorResponses();
		NrfSystemOptionsDao systemOptionsDaoEngError = TestDataGenerator
				.generateNrfSystemOptionsDao_engErrorResponses();
		ArrayList<NrfSystemOptionsDao> systemOptionsList = new ArrayList<NrfSystemOptionsDao>() {
			{
				add(nrfSystemOptionsDao);
				add(engSystemOptionsDao);
				add(systemOptionsDaoError);
				add(systemOptionsDaoEngError);

			}
		};
		when(nrfSystemOptionsRepository.findbyRecordOwner(any())).thenReturn(systemOptionsList);
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
       	service.setNrfSystemAndEngineeringOptions(systemOptions, nrfEngSystemOptions);
		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
		
        NfInstance dao = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
        when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
        doNothing().when(client).sendNotificationEvent(any(),any(),any());
        
        NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat, nrfConfig.getGlobalConfig().getNrfInstanceId());
        when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
        
        Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
        Assert.assertTrue(o instanceof NfPutResponse);
        NfPutResponse resp = (NfPutResponse) o;
        
        Assert.assertNotNull(resp.getNfProfile());
        Assert.assertEquals(profile, resp.getNfProfile());
        Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
      			.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+1,0);
                  Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
      					.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+1,0);
       }
 	 

 	@Test
	public void updateNfProfile_WhenUriHttps_FQDNAbsent() throws Exception{
 		NrfConfigurations nrfConfig = new NrfConfigurations();
 		nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
        nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
		NfProfile profile = TestDataGenerator.generateNF("AMF");
		profile.setFqdn(null);
		profile.getNfServices().get(0).setScheme(UriScheme.HTTPS);
	    profile.getNfServices().get(0).setFqdn(null);
	    profile.getNfServices().get(1).setScheme(UriScheme.HTTPS);
	    profile.getNfServices().get(1).setFqdn(null);    
		String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+profile.getNfInstanceId();
		URI nfInstanceUri = new URI(location);
		NfInstance nfInstance = new NfInstance(profile, nrfConfig.getGlobalConfig().getNrfInstanceId());
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());      	
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);       	
       	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
        service.setNrfConfig(nrfConfig);
        CustomNfInstance customNfInstance = new CustomNfInstance(nfInstance, null);
		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(any(),any(),any())).thenReturn(customNfInstance);
		List<PatchItem> list = new ArrayList<PatchItem>();
		String patchString = "[{\"op\":\"add\",\"path\":\"/nfServices/0/fqdn\",\"value\":\"null\"}]";
		list.add(new PatchItem("add", "/nfServices/0/fqdn", null, "null"));
		Assert.assertEquals(patchString, new ObjectMapper().writeValueAsString(list));
       	NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
       	service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
		NfPatchResponse retObj = (NfPatchResponse) service.updateNfProfile(UUID.randomUUID().toString(), list,nfInstanceUri,null,null);
		Assert.assertNotNull(retObj.getProblemDetails());
		ProblemDetails prob = retObj.getProblemDetails();
		Assert.assertEquals(HttpStatus.BAD_REQUEST,HttpStatus.valueOf(prob.getStatus()));
		Assert.assertEquals("FQDN should be provided in the NF Profile or NF Service Profile when URI Scheme is https", prob.getDetail());
		Assert.assertEquals("FQDN not provided", prob.getCause());

	}
 	

 	public void getMetricsValues()
	{
		// retrieving register metrics
		try {
			this.count_dbmetrics_nfRegister_nfInstances_201_CREATED = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
						.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_nfRegister_nfInstances_201_CREATED =0;
		}
		
		try {
			this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
						.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED =0;
		}
		try {
			this.count_dbmetrics_nfListRetrieval_find_nfInstances_200_OK = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
						.tag("dbOperation",FIND).tag("serviceOperation","NfListRetrieval").tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_nfListRetrieval_find_nfInstances_200_OK=0;		
			}
		try {
			this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
						.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_nfUpdate_update_nfInstances_200_OK=0;		
			}
		try {
			this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
						.tag("dbOperation",UPDATE).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_nfUpdate_update_nfStatusMonitor_200_OK=0;		
			}
		try {
			this.count_dbmetrics_nfUpdate_find_nfInstances_200_OK = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
						.tag("dbOperation",FIND).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_nfUpdate_find_nfInstances_200_OK=0;		
			}
		try {
			this.count_dbmetrics_nfListRetrieval_find_nfInstances_404_NOT_FOUND = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
						.tag("dbOperation",FIND).tag("serviceOperation",NF_UPDATE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_nfListRetrieval_find_nfInstances_404_NOT_FOUND=0;		
			}
	
		try {
			this.count_dbmetrics_unknown_find_nrfSystemOptions_200_OK = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
						.tag("dbOperation",FIND).tag("serviceOperation",UNKNOWN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NRF_SYSTEMOPTIONS).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_unknown_find_nrfSystemOptions_200_OK=0;		
			}
		try {
			this.count_dbmetrics_delete_find_nrfSystemOptions_200_OK = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.DELETE))
						.tag("dbOperation",FIND).tag("serviceOperation",NF_DELETE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NRF_SYSTEMOPTIONS).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_delete_find_nrfSystemOptions_200_OK=0;		
			}
		
		try {
			this.count_dbmetrics_nfDelete_delete_nfInstances_200_OK = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.DELETE))
						.tag("dbOperation",DELETE).tag("serviceOperation",NF_DELETE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_nfUpdate_find_nfInstances_200_OK=0;		
			}

		try {
			this.count_dbmetrics_nfDelete_delete_nfInstances_200_OK = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.DELETE))
						.tag("dbOperation",DELETE).tag("serviceOperation",NF_DELETE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_nfUpdate_find_nfInstances_200_OK=0;		
			}
		try {
			this.count_dbmetrics_nfDelete_find_nfInstances_200_OK = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.DELETE))
						.tag("dbOperation",FIND).tag("serviceOperation",NF_DELETE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_nfDelete_find_nfInstances_200_OK=0;		
			}
		try {
			this.count_dbmetrics_nfDelete_find_nfStatusMonitor_200_OK = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.DELETE))
						.tag("dbOperation",FIND).tag("serviceOperation",NF_DELETE).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_nfDelete_find_nfStatusMonitor_200_OK=0;		
			}
		try {
			this.count_dbmetrics_find_unknown_nfScreening_200_OK = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
						.tag("dbOperation",FIND).tag("serviceOperation",UNKNOWN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_SCREENING).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_find_unknown_nfScreening_200_OK=0;
		}
		try {
			this.count_dbmetrics_nfRegister_delete_nfInstances_200_OK = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
						.tag("dbOperation",DELETE).tag("serviceOperation","Unknown").tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_nfRegister_delete_nfInstances_200_OK=0;		
			}
		try {
			this.count_dbmetrics_nfRegister_delete_nfStatusMonitor_200_OK = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
						.tag("dbOperation",DELETE).tag("serviceOperation","Unknown").tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_STATUSMONITOR).counter().count();
		} catch (Exception e) {
			this.count_dbmetrics_nfRegister_delete_nfStatusMonitor_200_OK=0;		
			}
			
	}
	
 	@Test
	public void testGetNfProfile_returnsProblemDetails_NRFNotReachable() throws IOException, Exception {
		String nfInstanceId = UUID.randomUUID().toString();		
 		Metrics.globalRegistry.config().commonTags("NfInstanceId", nfInstanceId);
 		Counter count = Metrics.globalRegistry.find("ocnrf.forward.nfProfileRetrieval.rx.responses").tag("NfInstanceId", nfInstanceId).tag("HttpStatusCode", "503").tag("RejectionReason", "NRFCommunicationFailure").counter();
		double response = (count != null) ? count.count() : 0;
		
		/*NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		ObjectMapper om = new ObjectMapper();
		NrfSystemOptions systemOptions = om .readValue(nrfSystemOptionsDao.getDoc(), NrfSystemOptions.class);
		systemOptions.getForwardingSystemOptions().setProfileRetreivalForwardingStatus(FeatureStatus.ENABLED);
		nrfSystemOptionsDao.setDoc(systemOptions.toString());*/
		ProblemDetails problemDetails = new ProblemDetails();
		problemDetails.setStatus(HttpStatus.SERVICE_UNAVAILABLE.value());
		NfResponseInfo responseInfo = new NfResponseInfo();
		responseInfo.setResponse(problemDetails);
		responseInfo.setResponseFromNf(false);
		//when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
		//when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());	
		//when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
		NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
		nrfSystemOptions.getForwardingSystemOptions().setProfileRetreivalForwardingStatus(FeatureStatus.ENABLED);
       	service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
       	
		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.GET,"NfProfileRetrieval")).thenReturn(null);
		/*NrfSystemOptionsDao systemOptionsDaoError = TestDataGenerator.generateNrfSystemOptionsDao_errorResponses();
		NrfSystemOptionsDao systemOptionsDaoEngError = TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses();
		NrfSystemOptionsDao engSystemOptionsDao = TestDataGenerator.generateNrfEngSystemOptionsDao();
		ArrayList<NrfSystemOptionsDao> systemOptionsList = new ArrayList<NrfSystemOptionsDao>() { 
            { 
                add(nrfSystemOptionsDao); 
                add(engSystemOptionsDao); 
                add(systemOptionsDaoError);
                add(systemOptionsDaoEngError);
                
            } 
        };
        when(nrfSystemOptionsRepository.findbyNrfInstanceId(any())).thenReturn(systemOptionsList);*/
		when(nrfForwardingSvc.sendNrfForwardingProfileRetrievalRequest( any(String.class), any(String.class),any())).thenReturn(responseInfo);
		//Mockito.doNothing().when(nrfForwardingSvc).setNrfSystemOptions(any());
		nrfForwardingSvc.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
		forwardingData = new ForwardingData();
		List<Integer> forwardedFrom = new ArrayList<Integer>();
		forwardedFrom.add(1);
//		forwardingData.setForwardedFrom(forwardedFrom);
		forwardingData.setIsForwardingPossible(true);
		HashMap<String,Object> result = service.getNfProfile(nfInstanceId, forwardingData, "UNKNOWN",false);
		
		Assert.assertTrue(result.get("response") instanceof ProblemDetails);
		ProblemDetails retO = (ProblemDetails) result.get("response");
		Assert.assertEquals("NRF not reachable", retO.getTitle());
		Assert.assertEquals(HttpStatus.GATEWAY_TIMEOUT,HttpStatus.valueOf(retO.getStatus()));
		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
		List<String> logs = new ArrayList<String>();
		for(LogEvent logEvt:loggingEvent) {
			logs.add(logEvt.getMessage().getFormattedMessage());
		}
		Assert.assertEquals(response+1, Metrics.globalRegistry.get("ocnrf.forward.nfProfileRetrieval.rx.responses").tag("NfInstanceId", nfInstanceId).tag("HttpStatusCode", "503").tag("RejectionReason", "NRFCommunicationFailure").counter().count(),0);
	}

	@Test
	public void testGetNfProfile_returnsProblemDetails_EgressGatewayError() throws IOException, Exception {
		String nfInstanceId = UUID.randomUUID().toString();		
 		Metrics.globalRegistry.config().commonTags("NfInstanceId", nfInstanceId);
 		Counter count = Metrics.globalRegistry.find("ocnrf.forward.nfProfileRetrieval.rx.responses").tag("NfInstanceId", nfInstanceId).tag("HttpStatusCode", "500").tag("RejectionReason", "NRFCommunicationFailure").counter();
		double response = (count != null) ? count.count() : 0;
		
		/*NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		ObjectMapper om = new ObjectMapper();
		NrfSystemOptions systemOptions = om .readValue(nrfSystemOptionsDao.getDoc(), NrfSystemOptions.class);
		systemOptions.getForwardingSystemOptions().setProfileRetreivalForwardingStatus(FeatureStatus.ENABLED);
		nrfSystemOptionsDao.setDoc(systemOptions.toString());*/
		ProblemDetails problemDetails = new ProblemDetails();
		problemDetails.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
		NfResponseInfo responseInfo = new NfResponseInfo();
		responseInfo.setResponse(problemDetails);
		responseInfo.setResponseFromNf(false);
		//when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
		//when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());	
		//when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
		NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
		nrfSystemOptions.getForwardingSystemOptions().setProfileRetreivalForwardingStatus(FeatureStatus.ENABLED);
       	service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);

		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.GET,"NfProfileRetrieval")).thenReturn(null);
		when(nrfForwardingSvc.sendNrfForwardingProfileRetrievalRequest( any(String.class), any(String.class),any())).thenReturn(responseInfo);
		//Mockito.doNothing().when(nrfForwardingSvc).setNrfSystemOptions(any());
		nrfForwardingSvc.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
		forwardingData = new ForwardingData();
		List<Integer> forwardedFrom = new ArrayList<Integer>();
		forwardedFrom.add(1);
//		forwardingData.setForwardedFrom(forwardedFrom);
		forwardingData.setIsForwardingPossible(true);
		HashMap<String,Object> result = service.getNfProfile(nfInstanceId, forwardingData, "UNKNOWN",false);
		Assert.assertTrue(result.get("response") instanceof ProblemDetails);
		ProblemDetails retO = (ProblemDetails) result.get("response");
		Assert.assertEquals("NRF Internal Error", retO.getTitle());
		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
		List<String> logs = new ArrayList<String>();
		for(LogEvent logEvt:loggingEvent) {
			logs.add(logEvt.getMessage().getFormattedMessage());
		}
		Assert.assertEquals(response+1, Metrics.globalRegistry.get("ocnrf.forward.nfProfileRetrieval.rx.responses").tag("NfInstanceId", nfInstanceId).tag("HttpStatusCode", "500").tag("RejectionReason", "InternalError").counter().count(),0);
	}

	
	@Test
	public void testGetNfProfile_returnsNoProfile_withForwarding() throws IOException, Exception {
		String nfInstanceId = UUID.randomUUID().toString();		
 		Metrics.globalRegistry.config().commonTags("NfInstanceId", nfInstanceId);
 		Counter count = Metrics.globalRegistry.find("ocnrf.forward.nfProfileRetrieval.rx.responses").tag("NfInstanceId", nfInstanceId).tag("HttpStatusCode", "404").tag("RejectionReason", "ErrorFromNRF").counter();
		double response = (count != null) ? count.count() : 0;
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		ObjectMapper om = new ObjectMapper();
		NrfSystemOptions systemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		systemOptions.getForwardingSystemOptions().setProfileRetreivalForwardingStatus(FeatureStatus.ENABLED);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(systemOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		ProblemDetails problemDetails = ProblemDetails.forNotFound();
		NfResponseInfo responseInfo = new NfResponseInfo();
		responseInfo.setResponse(problemDetails);
		responseInfo.setResponseFromNf(true);
		//when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
		//when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());	
		//when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
       	service.setNrfSystemAndEngineeringOptions(systemOptions, nrfEngSystemOptions);

		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.GET,"NfProfileRetrieval")).thenReturn(null);
		when(nrfForwardingSvc.sendNrfForwardingProfileRetrievalRequest( any(String.class),any(String.class),any())).thenReturn(responseInfo);
		//Mockito.doNothing().when(nrfForwardingSvc).setNrfSystemOptions(any());
		//nrfForwardingSvc.setNrfSystemAndEngineeringOptions(systemOptions, nrfEngSystemOptions);
		forwardingData = new ForwardingData();
		List<String> forwardedFrom = new ArrayList<String>();
		forwardedFrom.add("primary");
		forwardingData.setForwardedFrom(forwardedFrom);
		forwardingData.setIsForwardingPossible(true);
		HashMap<String,Object> result = service.getNfProfile(nfInstanceId, forwardingData, "UNKNOWN",false);
		Assert.assertTrue(result.get("response") instanceof ProblemDetails);
		ProblemDetails retO = (ProblemDetails) result.get("response");
		Assert.assertEquals("Not Found", retO.getCause());
		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
		List<String> logs = new ArrayList<String>();
		for(LogEvent logEvt:loggingEvent) {
			logs.add(logEvt.getMessage().getFormattedMessage());
		}
		Assert.assertEquals(response+1, Metrics.globalRegistry.get("ocnrf.forward.nfProfileRetrieval.rx.responses").tag("NfInstanceId", nfInstanceId).tag("HttpStatusCode", "404").tag("RejectionReason", "ErrorFromNRF").counter().count(),0);
	}

    
	@Test
	public void testGetNfProfile_returnsNfProfile_withForwarding() throws IOException, Exception {
		String nfInstanceId = UUID.randomUUID().toString();		
 		Metrics.globalRegistry.config().commonTags("NfInstanceId", nfInstanceId);
 		Counter count = Metrics.globalRegistry.find("ocnrf.forward.nfProfileRetrieval.rx.responses").tag("NfInstanceId", nfInstanceId).tag("HttpStatusCode", "200").tag("RejectionReason", "NotApplicable").counter();
		double response = (count != null) ? count.count() : 0;
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		ObjectMapper om = new ObjectMapper();
		NrfSystemOptions systemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		systemOptions.getForwardingSystemOptions().setProfileRetreivalForwardingStatus(FeatureStatus.ENABLED);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(systemOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
		NfResponseInfo responseInfo = new NfResponseInfo();
		responseInfo.setResponse(nfProfile);
		responseInfo.setResponseFromNf(true);
		//when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
		//when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());	
		//when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
       	service.setNrfSystemAndEngineeringOptions(systemOptions, nrfEngSystemOptions);

		when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.GET,"NfProfileRetrieval")).thenReturn(null);
		when(nrfForwardingSvc.sendNrfForwardingProfileRetrievalRequest( any(String.class), any(String.class),any())).thenReturn(responseInfo);
		//Mockito.doNothing().when(nrfForwardingSvc).setNrfSystemOptions(any());
		nrfForwardingSvc.setNrfSystemAndEngineeringOptions(systemOptions, nrfEngSystemOptions);
		forwardingData = new ForwardingData();
		List<Integer> forwardedFrom = new ArrayList<Integer>();
		forwardedFrom.add(1);
//		forwardingData.setForwardedFrom(forwardedFrom);
		forwardingData.setIsForwardingPossible(true);
		HashMap<String,Object> result = service.getNfProfile(nfInstanceId, forwardingData, "UNKNOWN",false);
		Assert.assertTrue(result.get("response") instanceof NfProfile);
		boolean profileSearched =  (boolean)result.get("profileSearched");
		Assert.assertTrue(profileSearched);
		NfProfile retO = (NfProfile)result.get("response");
		Assert.assertEquals("AMF", retO.getNfType());
		verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
		List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
		List<String> logs = new ArrayList<String>();
		for(LogEvent logEvt:loggingEvent) {
			logs.add(logEvt.getMessage().getFormattedMessage());
		}
		Assert.assertEquals(response+1, Metrics.globalRegistry.get("ocnrf.forward.nfProfileRetrieval.rx.responses").tag("NfInstanceId", nfInstanceId).tag("HttpStatusCode", "200").tag("RejectionReason", "NotApplicable").counter().count(),0);
	}
	
	@Test
    public void testNfRegister_whenDeregisteredRecordPresent_thenProfileRegistered() throws Exception {
        NfProfile profile = TestDataGenerator.generateNF("PCF");
        String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
        NrfConfigurations nrfConfig = new NrfConfigurations();
       	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
       	nrfConfig.getSubSvc().setNotify(new Notify());
       	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
       	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
      	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);    	
       	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
       	nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	List<Plmn> plmnList = new ArrayList<>();
        plmnList.add(new Plmn("310", "14"));
     	service.setNrfConfig(nrfConfig);
        URI nfInstanceUri = new URI(location);
        String nfInstanceId = profile.getNfInstanceId();
        //Create deregistered profile
        NfProfile deregisteredProfile = TestDataGenerator.generateNF("AMF");
        deregisteredProfile.setNfInstanceId(profile.getNfInstanceId());
        deregisteredProfile.setNfStatus(NFStatus.DEREGISTERED);
        NfInstance deregisteredInstance = new NfInstance(deregisteredProfile,nrfConfig.getGlobalConfig().getNrfInstanceId());
        // Create HeartBeat Record
        NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
        Date now = new Date();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();		
		CustomNfInstance customNfInstance = new CustomNfInstance(deregisteredInstance, null);
        when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(customNfInstance);
        when(nfDbServiceImpl.findNfInstanceForNfRegister(nfInstanceId)).thenReturn(null);
        NfInstance dao = new NfInstance(profile, "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
        when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
        doNothing().when(client).sendNotificationEvent(any(),any(),any());        
        NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat,nrfConfig.getGlobalConfig().getNrfInstanceId());
        when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);        
        Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
        Assert.assertTrue(o instanceof NfPutResponse);
        NfPutResponse resp = (NfPutResponse) o;     
        
        Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
			.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+1,0);
        Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
					.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+1,0);
        
        Assert.assertNotNull(resp.getNfProfile());
        Assert.assertEquals(profile, resp.getNfProfile());
        Assert.assertEquals(dao.getRecordOwner(), nrfConfig.getGlobalConfig().getNrfInstanceId());
     }	
	
    @Test
    public void testAddOrReplaceNfProfile_returnsAddProfile_Heartbeat_PCF_NfType_heartbeatInfo() throws Throwable {
    	
    	NrfSystemOptionsDao nrfSystemOptionsDao = new NrfSystemOptionsDao();
		nrfSystemOptionsDao.setConfigType("OCNRF_SYSTEM_OPTIONS");
		NrfSystemOptions systemOptions = new NrfSystemOptions();
		NfScreeningSystemOptions nfScreeningSystemOptions = new NfScreeningSystemOptions();
		nfScreeningSystemOptions.setNfScreeningFeatureStatus(NfScreeningFeatureStatus.DISABLED);
		nfScreeningSystemOptions.setNfScreeningFailureHttpCode(403);
		systemOptions.setNfScreeningSystemOptions(nfScreeningSystemOptions);
		List<Plmn> nrfPlmnList = new ArrayList<>();
		Plmn add = new Plmn("310","14");
		nrfPlmnList.add(add);
		GeneralSystemOptions general = new GeneralSystemOptions();
		general.setNrfPlmnList(nrfPlmnList);
		general.setEnableF3(true);
		general.setEnableF5(true);
		general.setMaximumHopCount(2);
		general.setOcnrfEndPointHost("ocnrf-ingressgateway.ocnrf.svc.cluster.local");
		general.setOcnrfEndPointPort(80);
		systemOptions.setGeneralSystemOptions(general);
		NfManagementSystemOptions nfManagement = TestDataGenerator.generateNfManagementSystemOptions();
		HeartbeatInfo heartbeatInfo = new HeartbeatInfo();
		heartbeatInfo.setNfType("ALL_NF_TYPE");
		heartbeatInfo.setMinHbTimer(Duration.ofSeconds(30));
		heartbeatInfo.setMaxHbTimer(Duration.ofMinutes(5));
		heartbeatInfo.setDefaultHbTimer(Duration.ofSeconds(30));
		heartbeatInfo.setNfHeartbeatMissAllowed(3);
		List<HeartbeatInfo> nfHeartbeatTimers = new ArrayList<HeartbeatInfo>();
		nfHeartbeatTimers.add(heartbeatInfo);
		heartbeatInfo.setNfType("PCF");
		heartbeatInfo.setMinHbTimer(Duration.ofSeconds(50));
		heartbeatInfo.setMaxHbTimer(Duration.ofMinutes(5));
		heartbeatInfo.setDefaultHbTimer(Duration.ofSeconds(50));
		heartbeatInfo.setNfHeartbeatMissAllowed(3);
		nfHeartbeatTimers.add(heartbeatInfo);
		nfManagement.setNfHeartbeatTimers(nfHeartbeatTimers);
		systemOptions.setNfManagementSystemOptions(nfManagement);
		NfDiscoverSystemOptions nfDiscover = new NfDiscoverSystemOptions(); 
		nfDiscover.setDiscoveryValidityPeriod(Duration.ofSeconds(3600));
		nfDiscover.setProfilesCountInDiscoveryResponse(3);
		nfDiscover.setDiscoveryResultLoadThreshold(null);
		systemOptions.setNfDiscoverSystemOptions(nfDiscover);
		NfAccessTokenSystemOptions nfAccessToken = new NfAccessTokenSystemOptions();
		nfAccessToken.setOauthTokenAlgorithm(OauthTokenAlgorithm.ES256);
		nfAccessToken.setOauthTokenExpiryTime(Duration.ofSeconds(3600));
		nfAccessToken.setAuthorizeRequesterNf(AuthorizeRequesterNf.ENABLED);
		nfAccessToken.setAudienceType(AudienceType.NF_INSTANCE_ID);
		nfAccessToken.setLogicalOperatorForScope(LogicalOperatorForScope.AND);
		systemOptions.setNfAccessTokenSystemOptions(nfAccessToken);
		LoggingLevelSystemOptions loggingLevel = new LoggingLevelSystemOptions(); 
		loggingLevel.setNfAccessTokenLogLevel("INFO");
		loggingLevel.setNfDiscoveryLogLevel("INFO");
		loggingLevel.setNfRegistrationLogLevel("INFO");
		loggingLevel.setNfSubscriptionLogLevel("INFO");
		loggingLevel.setNrfAuditorLogLevel("INFO");
		loggingLevel.setNrfConfigurationLogLevel("INFO");
		systemOptions.setLoggingLevelSystemOptions(loggingLevel);
		SlfSystemOptions slfSystemOptions =new SlfSystemOptions();
		List<@NFType String> supportedNfTypeList = new ArrayList<@NFType String> (Arrays.asList("UDR","UDM","PCF","AUSF"));
		slfSystemOptions.setSupportedNfTypeList(supportedNfTypeList);
		slfSystemOptions.setPreferredSubscriberIdType(SubscriberIdType.SUPI);
		List<NfConfig> slfHostConfigList=new ArrayList<NfConfig>();
		NfConfig slfHostConfig =new NfConfig();
		List<NfServiceVersionConfig> apiVersions =new ArrayList<NfServiceVersionConfig>();
		NfServiceVersionConfig version =new NfServiceVersionConfig();
		version.setApiFullVersion("15.5.0");
		version.setApiVersionInUri("v1");
		apiVersions.add(version);
		slfHostConfig.setApiVersions( apiVersions);
		slfHostConfig.setFqdn("abc");
		slfHostConfig.setPort(80);
		slfHostConfig.setPriority(100);
		slfHostConfig.setScheme(UriScheme.HTTP);
		slfHostConfigList.add(slfHostConfig);
		slfSystemOptions.setSlfHostConfig(slfHostConfigList);
		ResponseHttpStatusCodes rerouteOnResponseHttpStatusCodes = new ResponseHttpStatusCodes();
		rerouteOnResponseHttpStatusCodes.setPattern("^[3,5][0-9]{2}$");
		slfSystemOptions.setRerouteOnResponseHttpStatusCodes(rerouteOnResponseHttpStatusCodes);
		systemOptions.setSlfSystemOptions(slfSystemOptions);
		ForwardingSystemOptions forwardingSystemOptions = new ForwardingSystemOptions();
		List<NfConfig> nfConfigList = new ArrayList<>();
		NfConfig nfConfig = new NfConfig();
		nfConfig.setPort(8090);
		nfConfig.setFqdn("oracle.com");
		nfConfig.setScheme(UriScheme.HTTPS);
		nfConfigList.add(nfConfig);
		forwardingSystemOptions.setNrfHostConfig(nfConfigList);
		forwardingSystemOptions.setNrfRerouteOnResponseHttpStatusCodes(rerouteOnResponseHttpStatusCodes);
		forwardingSystemOptions.setProfileRetreivalForwardingStatus(FeatureStatus.DISABLED);
		systemOptions.setForwardingSystemOptions(forwardingSystemOptions);
		GeoRedundancySystemOptions geoRedundancySystemOptions = new GeoRedundancySystemOptions();
		geoRedundancySystemOptions.setGeoRedundancyFeatureStatus(FeatureStatus.DISABLED);
		geoRedundancySystemOptions.setReplicationLatency(Duration.ofSeconds(5));
		geoRedundancySystemOptions.setMonitorNrfServiceStatusInterval(Duration.ofSeconds(1));
		geoRedundancySystemOptions.setMonitorDBReplicationStatusInterval(Duration.ofSeconds(5));
		systemOptions.setGeoRedundancySystemOptions(geoRedundancySystemOptions);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(systemOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		NrfSystemOptions nrfSystemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfSystemOptions.setErrorResponses(((NrfSystemOptions)TestDataGenerator.generateNrfSystemOptionsDao_errorResponses().toDomain("v1")).getErrorResponses());
		  NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
    	  service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
       	
   
    	   NfProfile profile = TestDataGenerator.generateNF("PCF");
           String location = "http://ocnrf-nfregistration/nnrf-nfm/v1/nf-instances/"+UUID.randomUUID().toString();
           NrfConfigurations nrfConfig = new NrfConfigurations();
          	nrfConfig.setDiscSvc(new NrfConfigurations.ServiceConfig());
          	nrfConfig.setRegSvc(new NrfConfigurations.ServiceConfig());
       
          	nrfConfig.setSubSvc(new NrfConfigurations.ServiceConfig());
          	nrfConfig.getSubSvc().setNotify(new Notify());
          	nrfConfig.getSubSvc().getNotify().setNfRegisteredApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfProfileChangedApi(location);
          	nrfConfig.getSubSvc().getNotify().setNfDeregisteredApi(location);
          	
          	nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
          	nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
          	List<Plmn> plmnList = new ArrayList<>();
              plmnList.add(new Plmn("310", "14"));
          	
        	service.setNrfConfig(nrfConfig);
           URI nfInstanceUri = new URI(location);
           String nfInstanceId = profile.getNfInstanceId();
           
           // Create HeartBeat Record
           NfHeartBeat nfHeartBeat = new NfHeartBeat(profile.getNfInstanceId(), profile.getNfStatus(), profile.getLoad(),profile.getHeartBeatTimer());
           Date now = new Date();
   		   
           when(nfDbServiceImpl.findNfInstanceByNfInstanceId(nfInstanceId,RequestMethod.PUT,"NfRegister")).thenReturn(null);
           NfInstance dao = new NfInstance(profile, "6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
           when(nfRepository.save(any(NfInstance.class))).thenReturn(dao);
           doNothing().when(client).sendNotificationEvent(any(),any(),any());
           
           NfStatusMonitor statusDao = new NfStatusMonitor(nfHeartBeat,nrfConfig.getGlobalConfig().getNrfInstanceId());
           when(nfStatusMonitorRepository.save(any(NfStatusMonitor.class))).thenReturn(statusDao);
           
           Object o = service.addOrReplaceNfProfile(nfInstanceId, profile,nfInstanceUri);
           Assert.assertTrue(o instanceof NfPutResponse);
           NfPutResponse resp = (NfPutResponse) o;
         
           
           Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
			.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_INSTANCES).counter().count(), this.count_dbmetrics_nfRegister_nfInstances_201_CREATED+1,0);
            Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.PUT))
					.tag("dbOperation",CREATE).tag("serviceOperation","NfRegister").tag("HttpStatusCode",String.valueOf((HttpStatus.CREATED).value())).tag("tableName", NF_STATUSMONITOR).counter().count(), this.count_dbmetrics_nfRegister_nfStatusMonitor_201_CREATED+1,0);
           
           Assert.assertNotNull(resp.getNfProfile());
           Assert.assertEquals(null, resp.getNfProfile().getAdditionalAttributes());
           Assert.assertEquals(50, resp.getNfProfile().getHeartBeatTimer(),0);
    }
    
public NfStatusMonitor modifyVersionSpecificNfStatusMonitorData(String version,String pojo,NfStatusMonitor nfStatusMonitor) throws JsonMappingException, JsonProcessingException {
		
		/*
		 * This function is used to modify the doc parameter for a particular
		 * version in nfStatusMonitorJsonDocList with new nfStatusMonitorDoc data received
		 */
		VersionedJsonDocList versionJsonDocList = objectMapper.readValue(nfStatusMonitor.getNfStatusMonitorJsonDocList(), VersionedJsonDocList.class);
		List<VersionedJsonDoc> list = versionJsonDocList.getVersionedJsonDocList();
		Iterator<VersionedJsonDoc> iterator = list.iterator();
		VersionedJsonDoc jsonDoc;
		while(iterator.hasNext()) {
			jsonDoc = iterator.next();
			if(jsonDoc.getVersion().equals(version)) {
				jsonDoc.setDoc(pojo.toString());
			}
		}
		versionJsonDocList.setVersionedJsonDocList(list);
		nfStatusMonitor.setNfStatusMonitorJsonDocList(versionJsonDocList.toString());
		return nfStatusMonitor;
	}
	
public String getDocBasedOnVersion(String version,List<VersionedJsonDoc> list) throws IOException {
	
	/*This function extracts the doc field from 
	 * VersionJsonDoc specific to a version for
	 * NfInstance as well as NfStatusMonitor class
	 */
	
	String object = null;
	Iterator<VersionedJsonDoc> iterator = list.iterator();
	
	while(iterator.hasNext()) {
		
		VersionedJsonDoc jsonDoc = (VersionedJsonDoc) iterator.next();
	    if(jsonDoc.getVersion().equals(version)) {

	    	String doc = jsonDoc.getDoc();
	    	object = doc;
	    }
	}
	return object;
}

}

