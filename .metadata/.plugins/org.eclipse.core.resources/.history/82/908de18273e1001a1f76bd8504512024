// Copyright 2020 (C), Oracle and/or its affiliates. All rights reserved.
package com.oracle.cgbu.cne.nrf.hooks.releases;

import java.sql.SQLException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import com.oracle.cgbu.cne.nrf.domain.NrfSystemOptions;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.eclipse.jetty.http.HttpMethod;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.oracle.cgbu.cne.nrf.domain.ErrorCondition;
import com.oracle.cgbu.cne.nrf.domain.ErrorInfo;
import com.oracle.cgbu.cne.nrf.domain.FeatureStatus;
import com.oracle.cgbu.cne.nrf.domain.HeartbeatInfo;
import com.oracle.cgbu.cne.nrf.domain.NfAuthenticationSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.NfManagementSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.NrfSystemOptions;
import com.oracle.cgbu.cne.nrf.hooks.postinstall.ConfigurationClient;
import com.oracle.releasemanagement.Release;
import com.oracle.releasemanagement.ReleaseHooks;
import com.oracle.releasemanagement.ReleaseVersion;

@Component
public class ReleaseHelmHook_1_8_0 extends Release implements ReleaseHooks {

	private static final Logger logger = LogManager.getLogger(ReleaseHelmHook_1_8_0.class);
	@Autowired
	ConfigurationClient configureNrf;
	/*
     * Assigned the release-version (1,8,0) based on the ReadMe file mentioned
     * in the upgrade-common jar.
     */
	@Override
	public ReleaseVersion getReleaseVersion() {
		// TODO Auto-generated method stub
		return new ReleaseVersion(1, 8, 0);
	}

	
	@Override
	public void postUpgrade()
	{
		Object retVal = configureNrf.sendRequest("GET_CONFIG",null);
		if((retVal !=null) && (retVal instanceof NrfSystemOptions))
		{
			
			//modify it to add preloaded default values of the parameters
			NrfSystemOptions updatedNrfSystemOptions = addPreloadedParameters(retVal);
			configureNrf.sendRequest( "SET_CONFIG",nrfSystemOptions);
		}
	}
	
	public NrfSystemOptions addPreloadedParameters(Object retVal)
	{
		NrfSystemOptions nrfSystemOptions = (NrfSystemOptions)retVal;
		NfManagementSystemOptions nfManagementSystemOptions = 
				nrfSystemOptions.getNfManagementSystemOptions();
		//set HB Timers
		HeartbeatInfo heartbeatInfo = new HeartbeatInfo();
		heartbeatInfo.setNfType("ALL_NF_TYPE");
		heartbeatInfo.setMinHbTimer(Duration.ofSeconds(30));
		heartbeatInfo.setMaxHbTimer(Duration.ofMinutes(5));
		heartbeatInfo.setDefaultHbTimer(Duration.ofSeconds(30));
		heartbeatInfo.setNfHeartbeatMissAllowed(3);
		List<HeartbeatInfo> nfHeartbeatTimers = new ArrayList<HeartbeatInfo>();
		nfHeartbeatTimers.add(heartbeatInfo);
		nfManagementSystemOptions.setNfHeartbeatTimers(nfHeartbeatTimers);
		//set the nfManagementSystemOptions back
		nrfSystemOptions.setNfManagementSystemOptions(nfManagementSystemOptions);
		//set AccessToken Auth Param
		//set NfAuthentication System Options
		ErrorInfo nfAuthenticationErrorResponse = new ErrorInfo();
		nfAuthenticationErrorResponse.setErrorCondition(ErrorCondition.Nf_Fqdn_Authentication_Failure);
		nfAuthenticationErrorResponse.setErrorCode(401);
		nfAuthenticationErrorResponse.setErrorResponse("Failed to authenticate NF using FQDN");
		nfAuthenticationErrorResponse.setRetryAfter(Duration.ofMinutes(5));
		List<ErrorInfo> nfAuthenticationErrorInfoList = new ArrayList<ErrorInfo>();
		nfAuthenticationErrorInfoList.add(nfAuthenticationErrorResponse);
		NfAuthenticationSystemOptions nfAuthenticationSystemOptions = new NfAuthenticationSystemOptions();
		nfAuthenticationSystemOptions.setNfRegistrationAuthenticationStatus(FeatureStatus.DISABLED);
		nfAuthenticationSystemOptions.setNfSubscriptionAuthenticationStatus(FeatureStatus.DISABLED);
		nfAuthenticationSystemOptions.setNfDiscoveryAuthenticationStatus(FeatureStatus.DISABLED);
		nfAuthenticationSystemOptions.setAccessTokenAuthenticationStatus(FeatureStatus.DISABLED);
		nfAuthenticationSystemOptions.setNfProfileRetrievalAuthenticationStatus(FeatureStatus.DISABLED);
		nfAuthenticationSystemOptions.setNfListRetrievalAuthenticationStatus(FeatureStatus.DISABLED);
		nfAuthenticationSystemOptions.setCheckIfNfIsRegistered(FeatureStatus.DISABLED);
		nfAuthenticationSystemOptions.setNfAuthenticationErrorResponses(nfAuthenticationErrorInfoList);
		nrfSystemOptions.setNfAuthenticationSystemOptions(nfAuthenticationSystemOptions);
		return nrfSystemOptions;
	}

}
