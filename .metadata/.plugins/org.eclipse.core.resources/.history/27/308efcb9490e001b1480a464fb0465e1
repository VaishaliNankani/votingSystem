package com.oracle.cgbu.cne.nrf.config;

import java.util.List;

import javax.annotation.PostConstruct;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.ThreadContext;
import org.apache.logging.log4j.core.config.Configurator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMethod;

import com.oracle.cgbu.cne.nrf.dao.NrfSystemOptionsDao;
import com.oracle.cgbu.cne.nrf.dao.NrfSystemOptionsRepository;
import com.oracle.cgbu.cne.nrf.domain.ErrorResponses;
import com.oracle.cgbu.cne.nrf.domain.ForwardingOptions;
import com.oracle.cgbu.cne.nrf.domain.GeneralOptions;
import com.oracle.cgbu.cne.nrf.domain.GeoRedundancyOptions;
import com.oracle.cgbu.cne.nrf.domain.LogLevelOptions;
import com.oracle.cgbu.cne.nrf.domain.NfAccessTokenOptions;
import com.oracle.cgbu.cne.nrf.domain.NfAuthenticationOptions;
import com.oracle.cgbu.cne.nrf.domain.NfDiscoveryOptions;
import com.oracle.cgbu.cne.nrf.domain.NfManagementOptions;
import com.oracle.cgbu.cne.nrf.domain.NfScreeningOptions;
import com.oracle.cgbu.cne.nrf.domain.NrfEngSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.NrfSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.SlfOptions;
import com.oracle.cgbu.cne.nrf.domain.SystemOptionsEvent;
import com.oracle.cgbu.cne.nrf.metrics.CommonNrfMetrics;

@Component
@Order(Ordered.HIGHEST_PRECEDENCE)
public class NrfSystemOptionsManager {
	
	private static Logger logger = LogManager.getLogger(NrfSystemOptionsManager.class);
	
	
	private static final String NRF_SYSTEMOPTIONS = "NrfSystemOptions";
	private static final String VERSION = "v1";
	private static final String FIND = "find";
	private static final String INTERNAL_CONFIGURATION_CACHE = "InternalConfigurationCache";
	
	@Autowired
    private ApplicationEventPublisher applicationEventPublisher;	
	
	@Autowired
	private NrfConfigurations nrfConfigurations;
     
	@Autowired
	private NrfSystemOptionsRepository nrfSystemOptionsRepository;
	
	@Autowired
	private CommonNrfMetrics commonNrfMetrics;
	
	private NrfSystemOptions nrfSystemOptions;
	
	private NrfEngSystemOptions nrfEngSystemOptions;
	
	Boolean publishSystemOptions = true;

	public NrfSystemOptions getNrfSystemOptions() {
		return nrfSystemOptions;
	}

	public void setNrfSystemOptions(NrfSystemOptions nrfSystemOptions) {
		this.nrfSystemOptions = nrfSystemOptions;
	}

	public NrfEngSystemOptions getNrfEngSystemOptions() {
		return nrfEngSystemOptions;
	}

	public void setNrfEngSystemOptions(NrfEngSystemOptions nrfEngSystemOptions) {
		this.nrfEngSystemOptions = nrfEngSystemOptions;
	}
	
	@PostConstruct
	public void fillThreadContext() {
		String nrfTxId = "nrf-tx-" + (int) (Math.random() * Integer.MAX_VALUE);
		ThreadContext.clearMap();
		ThreadContext.put("nrfTxId", nrfTxId);
		ThreadContext.put("subsystem", "reloadNrfSystemOptions");
		ThreadContext.put("hostname", System.getenv("HOSTNAME"));

	}

	@Scheduled(fixedRateString = "${nrf.reg-svc.system-options-fetch-interval}")
	public void reloadNrfSystemOptions() {

		logger.trace("reloadNrfSystemOptions() invoked.");

		List<NrfSystemOptionsDao> nrfSystemOptionsDaoList = null;
		try {
			nrfSystemOptionsDaoList = nrfSystemOptionsRepository.findbyRecordOwner(nrfConfigurations
																					.getGlobalConfig()
																					.getNrfInstanceId());
		}
		catch(Exception e) {
			e.printStackTrace();
			logger.error("Something went wrong while fetching NrfSystemOptions. Exception: "+e.getMessage());
			commonNrfMetrics.pegNrfDbMetricsFailuresTotal(RequestMethod.GET, FIND, INTERNAL_CONFIGURATION_CACHE, e, NRF_SYSTEMOPTIONS);
		}

		if(nrfSystemOptionsDaoList != null) {
			
			commonNrfMetrics.pegNrfDbMetricsSuccessTotal(RequestMethod.GET, FIND, INTERNAL_CONFIGURATION_CACHE, NRF_SYSTEMOPTIONS);
			NrfSystemOptions nrfSystemOptions = new NrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = new NrfEngSystemOptions();

			for(NrfSystemOptionsDao nrfSystemOptionsDao : nrfSystemOptionsDaoList) {
				switch(nrfSystemOptionsDao.getConfigType())
				{
					case "FORWARDING_OPTIONS":	{
						ForwardingOptions forwardingOptions = nrfSystemOptionsDao.toDomain(VERSION, ForwardingOptions.class);
						nrfSystemOptions.setForwardingOptions(forwardingOptions);
					}
					break;
					
					case "GENERAL_OPTIONS":	{
						GeneralOptions generalOptions = nrfSystemOptionsDao.toDomain(VERSION, GeneralOptions.class);
						nrfSystemOptions.setGeneralOptions(generalOptions);;
					}
					break;
					
					case "GEOREDUNDANCY_OPTIONS":	{
						GeoRedundancyOptions geoRedundancyOptions = nrfSystemOptionsDao.toDomain(VERSION, GeoRedundancyOptions.class);
						nrfSystemOptions.setGeoRedundancyOptions(geoRedundancyOptions);
					}
					break;
					
					case "LOG_LEVEL_OPTIONS":	{
						LogLevelOptions logLevelOptions = nrfSystemOptionsDao.toDomain(VERSION, LogLevelOptions.class);
						nrfSystemOptions.setLogLevelOptions(logLevelOptions);
					}
					break;
					
					case "NF_ACCESSTOKEN_OPTIONS":	{
						NfAccessTokenOptions nfAccessTokenOptions = nrfSystemOptionsDao.toDomain(VERSION, NfAccessTokenOptions.class);
						nrfSystemOptions.setNfAccessTokenOptions(nfAccessTokenOptions);
					}
					break;
					
					case "NF_AUTHENTICATION_OPTIONS":	{
						NfAuthenticationOptions nfAuthenticationOptions = nrfSystemOptionsDao.toDomain(VERSION, NfAuthenticationOptions.class);
						nrfSystemOptions.setNfAuthenticationOptions(nfAuthenticationOptions);
					}
					break;
					
					case "NF_DISCOVERY_OPTIONS":	{
						NfDiscoveryOptions nfDiscoveryOptions = nrfSystemOptionsDao.toDomain(VERSION, NfDiscoveryOptions.class);
						nrfSystemOptions.setNfDiscoveryOptions(nfDiscoveryOptions);
					}
					break;
					
					case "NF_MANAGEMENT_OPTIONS":	{
						NfManagementOptions nfManagementOptions = nrfSystemOptionsDao.toDomain(VERSION, NfManagementOptions.class);
						nrfSystemOptions.setNfManagementOptions(nfManagementOptions);
					}
					break;
					
					case "NF_SCREENING_OPTIONS":	{
						NfScreeningOptions nfScreeningOptions = nrfSystemOptionsDao.toDomain(VERSION, NfScreeningOptions.class);
						nrfSystemOptions.setNfScreeningOptions(nfScreeningOptions);
					}
					break;
					
					case "OCNRF_ERROR_RESPONSES":	{
						ErrorResponses errorResponses = nrfSystemOptionsDao.toDomain(VERSION, ErrorResponses.class);
						nrfSystemOptions.setErrorResponses(errorResponses);
					}
					break;
					
					case "SLF_OPTIONS":	{
						SlfOptions slfOptions = nrfSystemOptionsDao.toDomain(VERSION, SlfOptions.class);
						nrfSystemOptions.setSlfOptions(slfOptions);
					}
					break;
					
					case "OCNRF_ENG_SYSTEM_OPTIONS": {
						NrfEngSystemOptions convertedNrfEngSystemOptions = (NrfEngSystemOptions) nrfSystemOptionsDao.toDomain_NrfEngSystemOptions(VERSION);
						nrfEngSystemOptions.setNfRegistrationEngSystemOptions(convertedNrfEngSystemOptions.getNfRegistrationEngSystemOptions());
						nrfEngSystemOptions.setNfSubscriptionEngSystemOptions(convertedNrfEngSystemOptions.getNfSubscriptionEngSystemOptions());
						nrfEngSystemOptions.setNfDiscoveryEngSystemOptions(convertedNrfEngSystemOptions.getNfDiscoveryEngSystemOptions());
						nrfEngSystemOptions.setNfAccessTokenEngSystemOptions(convertedNrfEngSystemOptions.getNfAccessTokenEngSystemOptions());
						nrfEngSystemOptions.setGeneralEngSystemOptions(convertedNrfEngSystemOptions.getGeneralEngSystemOptions());
						nrfEngSystemOptions.setNrfAuditorEngSystemOptions(convertedNrfEngSystemOptions.getNrfAuditorEngSystemOptions());
						nrfEngSystemOptions.setGeoRedundancyEngSystemOptions(convertedNrfEngSystemOptions.getGeoRedundancyEngSystemOptions());
					}
					break;
					
					case "OCNRF_ENG_ERROR_RESPONSES":    {
						NrfEngSystemOptions convertedNrfEngSystemOptions = (NrfEngSystemOptions) nrfSystemOptionsDao.toDomain_NrfEngSystemOptions(VERSION);
						nrfEngSystemOptions.setErrorResponses(convertedNrfEngSystemOptions.getErrorResponses());
					}
					break;
				}
			}
			//Updating the loglevel 
			if(nrfSystemOptions.getLogLevelOptions()!=null) {
				if(nrfSystemOptions.getLogLevelOptions().getNfRegistrationLogLevel()!=null){
					if(!(nrfSystemOptions.getLogLevelOptions().getNfRegistrationLogLevel().equals(LogManager.getLogger("com.oracle.cgbu.cne.nrf").getLevel().toString())))
					{
						Configurator.setLevel("com.oracle.cgbu.cne.nrf", Level.toLevel(nrfSystemOptions.getLogLevelOptions().getNfRegistrationLogLevel()));
					}
				}
			}
			
			this.nrfSystemOptions = nrfSystemOptions;
			this.nrfEngSystemOptions = nrfEngSystemOptions;
			logger.trace("Loaded nrfSystemoptions: " + this.nrfSystemOptions.toString());
			logger.trace("Loaded nrfEngSystemOptions: " + this.nrfEngSystemOptions.toString());
			logger.trace("publishSystemOptions : {}",publishSystemOptions);
			if((this.nrfSystemOptions != null) && (this.nrfEngSystemOptions != null) && (publishSystemOptions== true)) {
				publishSystemOptions = false;
				SystemOptionsEvent customSpringEvent = new SystemOptionsEvent(this);
				applicationEventPublisher.publishEvent(customSpringEvent);
				
			}
		}
	}
}
