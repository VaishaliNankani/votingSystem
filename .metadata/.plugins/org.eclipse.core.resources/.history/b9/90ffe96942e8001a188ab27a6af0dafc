// Copyright 2018 (C), Oracle and/or its affiliates. All rights reserved.

package com.oracle.cgbu.cne.nrf.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.security.KeyPair;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.core.Appender;
import org.apache.logging.log4j.core.LogEvent;
import org.apache.logging.log4j.core.Logger;
import org.hibernate.exception.SQLGrammarException;
import org.json.JSONArray;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.web.bind.annotation.RequestMethod;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.protobuf.Method;
import com.oracle.cgbu.cne.nrf.NrfException;
import com.oracle.cgbu.cne.nrf.annotations.NFType;
import com.oracle.cgbu.cne.nrf.config.NrfConfigurations;
import com.oracle.cgbu.cne.nrf.config.NrfConfigurations.GlobalConfig;
import com.oracle.cgbu.cne.nrf.config.NrfConfigurations.ServiceConfig;
import com.oracle.cgbu.cne.nrf.config.UtilityBeansConfiguration;
import com.oracle.cgbu.cne.nrf.dao.NfInstancesRepository;
import com.oracle.cgbu.cne.nrf.dao.NrfSystemOptionsDao;
import com.oracle.cgbu.cne.nrf.dao.NrfSystemOptionsRepository;
import com.oracle.cgbu.cne.nrf.domain.AccessTokenErr;
import com.oracle.cgbu.cne.nrf.domain.AccessTokenReq;
import com.oracle.cgbu.cne.nrf.domain.AccessTokenRsp;
import com.oracle.cgbu.cne.nrf.domain.AudienceType;
import com.oracle.cgbu.cne.nrf.domain.AuthConfig;
import com.oracle.cgbu.cne.nrf.domain.AuthFeatureConfig;
import com.oracle.cgbu.cne.nrf.domain.AuthorizeRequesterNf;
import com.oracle.cgbu.cne.nrf.domain.ErrorCondition;
import com.oracle.cgbu.cne.nrf.domain.ErrorInfo;
import com.oracle.cgbu.cne.nrf.domain.FeatureStatus;
import com.oracle.cgbu.cne.nrf.domain.ForwardingData;
import com.oracle.cgbu.cne.nrf.domain.GenericResponse;
import com.oracle.cgbu.cne.nrf.domain.LogicalOperatorForScope;
import com.oracle.cgbu.cne.nrf.domain.NFStatus;
import com.oracle.cgbu.cne.nrf.domain.NfProfile;
import com.oracle.cgbu.cne.nrf.domain.NfResponseInfo;
import com.oracle.cgbu.cne.nrf.domain.NrfEngSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.NrfSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.OauthTokenAlgorithm;
import com.oracle.cgbu.cne.nrf.domain.Plmn;
import com.oracle.cgbu.cne.nrf.domain.ProblemDetails;
import com.oracle.cgbu.cne.nrf.domain.SearchData;
import com.oracle.cgbu.cne.nrf.domain.SingleNssai;
import com.oracle.cgbu.cne.nrf.domain.VersionedJsonDoc;
import com.oracle.cgbu.cne.nrf.domain.VersionedJsonDocList;
import com.oracle.cgbu.cne.nrf.metrics.CommonNrfMetrics;
import com.oracle.cgbu.cne.nrf.metrics.MetricsDimension;
import com.oracle.cgbu.cne.nrf.forwarding.NrfForwardingService;

import com.oracle.cgbu.cne.nrf.metrics.NrfMetrics;
import com.oracle.cgbu.cne.nrf.domain.NfAccessTokenSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.NfConfig;
import com.oracle.cgbu.cne.nrf.dao.NfInstance;
import com.oracle.cgbu.cne.nrf.service.AccessTokenServiceImpl;
import com.oracle.cgbu.cne.nrf.service.NfUpgradeServiceImpl;
import com.oracle.cgbu.cne.nrf.service.helper.PrivateKeyManager;
import com.oracle.cgbu.cne.nrf.service.helper.ReplicationStatus;
import com.oracle.cgbu.cne.nrf.service.helper.ValidationHelper;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Metrics;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;


public class AccessTokenServiceImplTest {

	@Mock
	private Appender mockAppender;

	@Mock
	private NfUpgradeServiceImpl nfUpgradeServiceImpl;
	
	@Mock
	private NfInstancesRepository nfRepository;
		
	@Captor
	private ArgumentCaptor<LogEvent> captorLoggingEvent;

	private Logger logger;

	@InjectMocks
	private AccessTokenServiceImpl service;
	
	@Mock
	private ValidationHelper validationHelper;
	
	private KeyPair ecKeyPair;
	
	private KeyPair rsaKeyPair;
	
	@Mock
	private CommonNrfMetrics commonNrfMetrics;
	
	@Mock
	MetricsDimension metricsDimension;
	
	
	int count_dbmetrics_nfAccesstoken_find_nrfSystemOptions_200_OK;
	int count_dbmetrics_nfAccesstoken_find_nfInstances_200_OK;
	
	private static String NF_INSTANCES ="NfInstances";
	private static String FIND="find";
	private static String NF_ACCESSTOKEN="NfAccessToken";

	private NrfMetrics nrfMetrics;
	
	@Mock
	private NrfForwardingService nrfQuerySvc;
	
	NrfConfigurations nrfConfig = new NrfConfigurations();
	
	@Before
	public void setUp() {
		MockitoAnnotations.initMocks(this);
		when(mockAppender.getName()).thenReturn("MockAppender");
		when(mockAppender.isStarted()).thenReturn(true);
		when(mockAppender.isStopped()).thenReturn(false);
		logger = (Logger)LogManager.getRootLogger();
		logger.addAppender(mockAppender);
		logger.setLevel(Level.INFO);
		
		PrivateKeyManager privateKeyManager = new PrivateKeyManager();
		
		// generate EC Key Pair
		ecKeyPair = Keys.keyPairFor(SignatureAlgorithm.ES256);
		privateKeyManager.setEcPrivateKey(ecKeyPair.getPrivate());
		
		// generate RSA Key Pair
		rsaKeyPair = Keys.keyPairFor(SignatureAlgorithm.RS256);
		privateKeyManager.setRsaPrivateKey(rsaKeyPair.getPrivate());
		
		service.setPrivateKeyManager(privateKeyManager);
		service.setNrfMetrics(new NrfMetrics());
		service.setCommonNrfMetrics(new CommonNrfMetrics());
		NfUpgradeServiceImpl nfUpgradeServiceImpl = new NfUpgradeServiceImpl();
		nfUpgradeServiceImpl.setObjectMapper(new ObjectMapper());
		service.setNfUpgradeServiceImpl(nfUpgradeServiceImpl);
		
		nrfConfig.setGlobalConfig(new NrfConfigurations.GlobalConfig());
       	nrfConfig.getGlobalConfig().setNrfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
       	
       	NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
       	NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
       	service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
       	service.setObjectMapper(new ObjectMapper());
	}
	
	@After
	public void teardown() {
		logger.removeAppender(mockAppender);
		Metrics.globalRegistry.getMeters().forEach((meter) -> Metrics.globalRegistry.remove(meter));
	}
	
	@Test
	public void givenAccessRequest_thenReturnAccessResponse() throws Exception {
		String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e1bc11";
		AccessTokenRsp response = TestDataGenerator.generateAccessResponse();
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId(nfInstanceId);
		accessTokenReq.setScope(response.getScope());
		accessTokenReq.setGrant_type("client_credentials");
		
		Assert.assertNotNull(response);	
	}
	
	@Test
	public void givenAccessRequest_checktargetNfInstanceId() throws Exception {
		String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e1bc11";
		AccessTokenRsp response = TestDataGenerator.generateAccessResponse();
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId(nfInstanceId);
		accessTokenReq.setScope(response.getScope());
		accessTokenReq.setGrant_type("client_credentials");
		
		// setting targetNfInstanceId to empty
		accessTokenReq.setTargetNfInstanceId("");	
		Assert.assertTrue(accessTokenReq.getTargetNfInstanceId()==null);	
		
		// setting targetNfInstanceId to spaces
		accessTokenReq.setTargetNfInstanceId("  ");	
		Assert.assertTrue(accessTokenReq.getTargetNfInstanceId()==null);	

		// setting targetNfInstanceId to value
		accessTokenReq.setTargetNfInstanceId(nfInstanceId);
		Assert.assertTrue(accessTokenReq.getTargetNfInstanceId()==nfInstanceId);

	}
	
	@Test
	public void givenAccessRequest_checkNfType() throws Exception {
		String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e1bc11";
		AccessTokenRsp response = TestDataGenerator.generateAccessResponse();
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId(nfInstanceId);
		accessTokenReq.setScope(response.getScope());
		accessTokenReq.setGrant_type("client_credentials");
		
		// setting nfType to empty
		accessTokenReq.setNfType("");	
		Assert.assertTrue(accessTokenReq.getNfType()==null);	
		
		// setting nfType to spaces
		accessTokenReq.setNfType("  ");	
		Assert.assertTrue(accessTokenReq.getNfType()==null);	

		// setting nfType to value
		accessTokenReq.setNfType("AMF");
		Assert.assertTrue(accessTokenReq.getNfType()=="AMF");

	}
	
	@Test
	public void givenAccessRequest_checkTargetPlmn() throws Exception {
		String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e1bc11";
		AccessTokenRsp response = TestDataGenerator.generateAccessResponse();
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId(nfInstanceId);
		accessTokenReq.setScope(response.getScope());
		accessTokenReq.setGrant_type("client_credentials");
		
		// setting nfType to empty
		accessTokenReq.setTargetPlmn("");	
		Assert.assertTrue(accessTokenReq.getTargetPlmn()==null);	
		
		// setting nfType to spaces
		accessTokenReq.setTargetPlmn("  ");	
		Assert.assertTrue(accessTokenReq.getTargetPlmn()==null);	
	}
	
	@Test
	public void givenAccessRequest_checkRequesterPlmn() throws Exception {
		String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e1bc11";
		AccessTokenRsp response = TestDataGenerator.generateAccessResponse();
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId(nfInstanceId);
		accessTokenReq.setScope(response.getScope());
		accessTokenReq.setGrant_type("client_credentials");
		
		// setting nfType to empty
		accessTokenReq.setRequesterPlmn("");	
		Assert.assertTrue(accessTokenReq.getRequesterPlmn()==null);	
		
		// setting nfType to spaces
		accessTokenReq.setRequesterPlmn("  ");	
		Assert.assertTrue(accessTokenReq.getRequesterPlmn()==null);	
	}
	
	@Test
	public void testGenerateAccessTokenES256() throws IOException {
		GlobalConfig globalConfig = new GlobalConfig();
		globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(globalConfig);
		service.setNrfConfigurations(nrfConfigurations);
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		
		NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-evts");
		nfProfile.getNfServices().remove(1);
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfigurations.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(nfInstanceList);
		//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
		
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setNfInstanceId(nfInstance.getNfInstanceId());
		accessTokenReq.setScope("namf-evts");
		ObjectMapper om = new ObjectMapper();
		AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenRsp.class);
		Assert.assertEquals("Bearer", response.getToken_type());
		Assert.assertEquals(((NrfSystemOptions)nrfSystemOptionsDao.toDomain("v1")).getNfAccessTokenSystemOptions().getOauthTokenExpiryTime().toSeconds(),(long) response.getExpires_in());
//		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
//      			.tag("dbOperation",FIND).tag("serviceOperation",NF_ACCESSTOKEN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName",NRF_SYSTEMOPTIONS ).counter().count(), this.count_dbmetrics_nfAccesstoken_find_nrfSystemOptions_200_OK+1,0);
		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
      			.tag("dbOperation",FIND).tag("serviceOperation",NF_ACCESSTOKEN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName",NF_INSTANCES ).counter().count(), this.count_dbmetrics_nfAccesstoken_find_nfInstances_200_OK+2,0);
		// Token Validation
		String jwt = response.getAccess_token();
		System.out.println("Validating jwt: "+jwt);
		try {
			Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
			Assert.assertEquals("e596fd1f-36d6-40e5-8a2d-ce2ec0212978", claims.getBody().getIssuer());
			Assert.assertEquals(nfInstance.getNfInstanceId(), claims.getBody().getSubject());
			Assert.assertTrue(claims.getBody().getAudience().contains(nfInstance.getNfInstanceId()));
			Assert.assertEquals(nfProfile.getNfServices().get(0).getServiceName(), claims.getBody().get("scope"));
		}
		catch(Exception e) {
			fail("Token Validation Failed: "+e.getMessage());
		}
	}
	
	@Test
	public void testGenerateAccessTokenRS256() throws IOException {

		NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
		nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		nrfSystemOptions.getNfAccessTokenSystemOptions().setOauthTokenAlgorithm(OauthTokenAlgorithm.RS256);
		service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
		
		NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-evts");
		nfProfile.getNfServices().remove(1);
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		String nfInstanceId = nfInstanceList.get(0).getNfInstanceId();
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(nfInstanceList);
		when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		service.setNrfConfigurations(nrfConfigurations);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setNfInstanceId(nfInstanceList.get(0).getNfInstanceId());
		accessTokenReq.setScope("namf-evts");
		ObjectMapper om = new ObjectMapper();
		AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenRsp.class);
		Assert.assertEquals("Bearer", response.getToken_type());
		Assert.assertEquals(nrfSystemOptions.getNfAccessTokenSystemOptions().getOauthTokenExpiryTime()
													.toSeconds(), response.getExpires_in().intValue());
		
//		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
//      			.tag("dbOperation",FIND).tag("serviceOperation",NF_ACCESSTOKEN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName",NRF_SYSTEMOPTIONS ).counter().count(), this.count_dbmetrics_nfAccesstoken_find_nrfSystemOptions_200_OK+1,0);
		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
      			.tag("dbOperation",FIND).tag("serviceOperation",NF_ACCESSTOKEN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName",NF_INSTANCES ).counter().count(), this.count_dbmetrics_nfAccesstoken_find_nfInstances_200_OK+2,0);
		// Token Validation
		String jwt = response.getAccess_token();
		System.out.println("Validating jwt: "+jwt);
		try {
			Jws<Claims> claims = Jwts.parser().setSigningKey(this.rsaKeyPair.getPublic()).parseClaimsJws(jwt);
			Assert.assertEquals("e596fd1f-36d6-40e5-8a2d-ce2ec0212978", claims.getBody().getIssuer());
			Assert.assertEquals(nfInstanceId, claims.getBody().getSubject());
			Assert.assertTrue(claims.getBody().getAudience().contains(nfInstance.getNfInstanceId()));
			Assert.assertEquals(nfProfile.getNfServices().get(0).getServiceName(), claims.getBody().get("scope"));
		}
		catch(Exception e) {
			fail("Token Validation Failed: "+e.getMessage());
		}
	}
	
	@Test
	public void givenTokenRequest_whenNfInstanceIsRegisteredWithMatchingNfType_ThenReturnTokenResponse() throws IOException{
		
		NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		Boolean isNrfExceptionThrown = false;
		Object b = false;
		accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("namf-comm");
		accessTokenReq.setNfType("PCF");
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-comm");
		nfProfile.getNfServices().get(1).setServiceName("namf-evts");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		nfInstanceList.add(nfInstance);
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
		try {
			b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
		}catch (Exception e) {
			isNrfExceptionThrown = true;
			// TODO: handle exception
		}
//		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
//      			.tag("dbOperation",FIND).tag("serviceOperation",NF_ACCESSTOKEN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName",NRF_SYSTEMOPTIONS ).counter().count(), this.count_dbmetrics_nfAccesstoken_find_nrfSystemOptions_200_OK+1,0);
		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
      			.tag("dbOperation",FIND).tag("serviceOperation",NF_ACCESSTOKEN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName",NF_INSTANCES ).counter().count(), this.count_dbmetrics_nfAccesstoken_find_nfInstances_200_OK+2,0);
		Assert.assertFalse(b instanceof AccessTokenErr);		
	}	
	
	@Test
	public void givenTokenRequest_whenNfInstanceIsNotRegistered_thenReturnError(){
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		Object b = null;
		String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e15555";
		accessTokenReq.setNfInstanceId(nfInstanceId);
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("namf-evts");
		GlobalConfig globalConfig = new GlobalConfig();
		globalConfig.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212979");
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		nrfConfigurations.setGlobalConfig(globalConfig);
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		service.setNrfConfigurations(nrfConfigurations);
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions  = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		when(nfRepository.findByNfInstanceId(nfInstanceId)).thenReturn(null);
		b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
		Assert.assertNotNull(b);
		Assert.assertTrue(b instanceof AccessTokenErr);
		Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.rejected")
							.tag("ClientNfInstanceId", nfInstanceId)
							.tag("Scope", "namf-evts")
							.tag("RejectionReason", "ClientNotAuthorized")
							.counter().count(),0);
//		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
//      			.tag("dbOperation",FIND).tag("serviceOperation",NF_ACCESSTOKEN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName",NRF_SYSTEMOPTIONS ).counter().count(), this.count_dbmetrics_nfAccesstoken_find_nrfSystemOptions_200_OK+1,0);
		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
      			.tag("dbOperation",FIND).tag("serviceOperation",NF_ACCESSTOKEN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName",NF_INSTANCES ).counter().count(), this.count_dbmetrics_nfAccesstoken_find_nfInstances_200_OK+1,0);
	}	
	
	@Test
	public void givenTokenRequest_whenNfTypeDoesNotMatch_thenReturnError() throws IOException{
		
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		
		NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-evts");
		nfProfile.getNfServices().remove(1);
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstance.setRecordOwner(nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstance.setNfStatus(NFStatus.REGISTERED);
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		String nfInstanceId = nfInstanceList.get(0).getNfInstanceId();
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId(nfInstanceList.get(0).getNfInstanceId());
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("namf-loc");
		accessTokenReq.setNfType("PCF");
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");		
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		service.setNrfConfigurations(nrfConfigurations);
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(nfInstanceList);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		Object b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
		Assert.assertNotNull(b);
		Assert.assertTrue(b instanceof AccessTokenErr);
		ObjectMapper om = new ObjectMapper();
		AccessTokenErr error = om.readValue(b.toString(), AccessTokenErr.class);
		Assert.assertEquals("NfType in oAuth request is invalid for the registered profile",error.getError_description());
		Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.rejected")
							.tag("ClientNfInstanceId", nfInstanceId)
							.tag("Scope", "namf-loc")
							.tag("RejectionReason", "ConsumerNFTypeMismatch")
							.counter().count(),0);
//		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
//      			.tag("dbOperation",FIND).tag("serviceOperation",NF_ACCESSTOKEN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName",NRF_SYSTEMOPTIONS ).counter().count(), this.count_dbmetrics_nfAccesstoken_find_nrfSystemOptions_200_OK+1,0);
		Assert.assertEquals(Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
      			.tag("dbOperation",FIND).tag("serviceOperation",NF_ACCESSTOKEN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName",NF_INSTANCES ).counter().count(), this.count_dbmetrics_nfAccesstoken_find_nfInstances_200_OK+1,0);
	}	
	
	@Test
	public void givenTokenRequest_whenAuthorizeRequesterNfIsDisabled_ThenReturnTokenResponse() throws IOException{
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		Object b = false;
		String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e1bc11";
		accessTokenReq.setNfInstanceId(nfInstanceId);
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("namf-mt");
		accessTokenReq.setNfType("PCF");
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
		NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		
		NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
		nrfSystemOptions.getNfAccessTokenSystemOptions().setAuthorizeRequesterNf(AuthorizeRequesterNf.DISABLED);
		nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
		
		when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
		b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
		Assert.assertTrue(b instanceof AccessTokenRsp);
	}	
	
	@Test
	public void givenTokenRequestWithMandatoryParameters1_whenScopeNRFServices_ThenReturnTokenResponse()throws IOException {
		
		NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
		//audData = NF_INSTANCE_ID
		GlobalConfig globalConfig = new GlobalConfig();
		globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(globalConfig);
		service.setNrfConfigurations(nrfConfigurations);
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("nnrf-nfm");
		nfInstance = TestDataGenerator.generateNfInstance();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());

//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		ObjectMapper om = new ObjectMapper();
		AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenRsp.class);
		Assert.assertEquals("Bearer", response.getToken_type());

		Assert.assertEquals(((NrfSystemOptions)nrfSystemOptionsDao.toDomain("v1")).getNfAccessTokenSystemOptions().getOauthTokenExpiryTime()
													.toSeconds(), response.getExpires_in().intValue());
		Assert.assertNull(response.getScope());
		
		// Token Validation
		String jwt = response.getAccess_token();
		System.out.println("Validating jwt: "+jwt);
		try {
			Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
			Assert.assertEquals("e596fd1f-36d6-40e5-8a2d-ce2ec0212978", claims.getBody().getIssuer());
			Assert.assertEquals(nfInstanceId, claims.getBody().getSubject());			
			Assert.assertEquals(Arrays.asList(globalConfig.getNrfInstanceId()).toString(),claims.getBody().getAudience());
		}
		catch(Exception e) {
			fail("Token Validation Failed: "+e.getMessage());
		}
		/*Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.responses")
													.tag("ServiceName", "nnrf-nfm")
													.tag("ClientNfInstanceId", requesterAndTargetNfInstances.get(0).getNfInstanceId())
													.tag("HttpStatusCode", "200")
													.counter().count(),0);*/
	}
	
	@Test
	public void givenTokenRequestWithMandatoryParameters2_whenScopeNRFServices_ThenReturnTokenResponse()throws JsonMappingException, JsonProcessingException {
		//audData = NF_TYPE
		GlobalConfig globalConfig = new GlobalConfig();
		globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(globalConfig);
		service.setNrfConfigurations(nrfConfigurations);
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc11");
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("nnrf-nfm");
		NfInstance nfInstance = TestDataGenerator.generateNfInstance();
		nfInstance.setNfType("NRF");
		
		NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
		nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		nrfSystemOptions.getNfAccessTokenSystemOptions().setAudienceType(AudienceType.NF_TYPE);
		service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
		
		when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		ObjectMapper om = new ObjectMapper();
		AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenRsp.class);
		Assert.assertEquals("Bearer", response.getToken_type());

		Assert.assertEquals(nrfSystemOptions.getNfAccessTokenSystemOptions().getOauthTokenExpiryTime()
													.toSeconds(), response.getExpires_in().intValue());

		Assert.assertNull(response.getScope());
		
		// Token Validation
		String jwt = response.getAccess_token();
		System.out.println("Validating jwt: "+jwt);
		try {
			Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
			Assert.assertEquals("e596fd1f-36d6-40e5-8a2d-ce2ec0212978", claims.getBody().getIssuer());
			Assert.assertEquals(nfInstance.getNfInstanceId(), claims.getBody().getSubject());
			Assert.assertEquals(nfInstance.getNfType(),claims.getBody().getAudience());
		}
		catch(Exception e) {
			fail("Token Validation Failed: "+e.getMessage());
		}
	}
		
	@Test
	public void givenTokenRequestWithTargetTypeNRF_whenScopeNRFServices_ThenReturnTokenResponse()throws JsonMappingException, JsonProcessingException {
		GlobalConfig globalConfig = new GlobalConfig();
		globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(globalConfig);
		service.setNrfConfigurations(nrfConfigurations);
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc11");
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("nnrf-nfm");
		accessTokenReq.setTargetNfType("NRF");
		NfInstance nfInstance = TestDataGenerator.generateNfInstance();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		ObjectMapper om = new ObjectMapper();
		AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenRsp.class);
		Assert.assertEquals("Bearer", response.getToken_type());

		Assert.assertEquals(((NrfSystemOptions)nrfSystemOptionsDao.toDomain("v1")).getNfAccessTokenSystemOptions().getOauthTokenExpiryTime().toSeconds()
													, response.getExpires_in().intValue());

		Assert.assertNull(response.getScope());
		
		// Token Validation
		String jwt = response.getAccess_token();
		System.out.println("Validating jwt: "+jwt);
		try {
			Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
			Assert.assertEquals("e596fd1f-36d6-40e5-8a2d-ce2ec0212978", claims.getBody().getIssuer());
			Assert.assertEquals(nfInstance.getNfInstanceId(), claims.getBody().getSubject());
			Assert.assertEquals(Arrays.asList(globalConfig.getNrfInstanceId()).toString(),claims.getBody().getAudience());
		}
		catch(Exception e) {
			fail("Token Validation Failed: "+e.getMessage());
		}		
		/*Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.responses")
								.tag("ServiceName", "nnrf-nfm")
								.tag("TargetNfType", "NRF")
								.tag("ClientNfInstanceId", "6faf1bbc-6e4a-4454-a507-a14ef8e1bc11")
								.tag("HttpStatusCode", "200")
								.counter().count(),0);*/
	}
		
	@Test
	public void givenTokenRequestWithMatchingTargetNfInstanceId_whenScopeNRFServices_ThenReturnTokenResponse()throws JsonMappingException, JsonProcessingException {
		GlobalConfig globalConfig = new GlobalConfig();
		globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(globalConfig);
		service.setNrfConfigurations(nrfConfigurations);
		NfInstance nfInstance = TestDataGenerator.generateNfInstance();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());

//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc11");
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("nnrf-nfm");
		accessTokenReq.setTargetNfType("NRF");
		accessTokenReq.setTargetNfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
		accessTokenReq.setScope("nnrf-nfm");
		try {
			accessTokenReq.setTargetPlmn("{\"mcc\":\"310\",\"mnc\":\"14\"}");
		}
		catch(Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		ObjectMapper om = new ObjectMapper();
		AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenRsp.class);
		Assert.assertEquals("Bearer", response.getToken_type());

		Assert.assertEquals(((NrfSystemOptions)nrfSystemOptionsDao.toDomain("v1")).getNfAccessTokenSystemOptions().getOauthTokenExpiryTime()
													.toSeconds(), response.getExpires_in().intValue());

		Assert.assertNull(response.getScope());
		
		// Token Validation
		String jwt = response.getAccess_token();
		System.out.println("Validating jwt: "+jwt);
		try {
			Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
			Assert.assertEquals("e596fd1f-36d6-40e5-8a2d-ce2ec0212978", claims.getBody().getIssuer());
			Assert.assertEquals(nfInstance.getNfInstanceId(), claims.getBody().getSubject());
			Assert.assertEquals(Arrays.asList(globalConfig.getNrfInstanceId()).toString(),claims.getBody().getAudience());
		}
		catch(Exception e) {
			fail("Token Validation Failed: "+e.getMessage());
		}		
		/*Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.responses")
							.tag("ServiceName", "nnrf-nfm")
							.tag("TargetNfType", "NRF")
							.tag("TargetNfInstanceId", "33387680-ac84-4877-9b4e-d65d146782d8")
							.tag("ClientNfInstanceId", "6faf1bbc-6e4a-4454-a507-a14ef8e1bc11")
							.tag("HttpStatusCode", "200")
							.counter().count(),0);*/
	}   	
	
	@Test
	public void givenTokenRequestWithIncorrectTargetPlmn_whenScopeNRFServices_ThenReturnError()throws JsonMappingException, JsonProcessingException {
		GlobalConfig globalConfig = new GlobalConfig();
		globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(globalConfig);
		service.setNrfConfigurations(nrfConfigurations);
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc11");
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("nnrf-nfm");
		try {
			accessTokenReq.setTargetPlmn("{\"mcc\":\"310\",\"mnc\":\"16\"}");
		}
		catch(Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		NfInstance nfInstance = TestDataGenerator.generateNfInstance();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		ObjectMapper om = new ObjectMapper();
		AccessTokenErr error = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenErr.class);
		Assert.assertEquals("invalid_request", error.getError());
		Assert.assertEquals("targetPlmn in the oAuth request is invalid for NRF", error.getError_description());
	}
	
	@Test
	public void givenTokenRequestWithInvalidTargetNsiList() throws IOException {
		NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
		accessTokenReq.setNfInstanceId(nfInstanceId);
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("namf-mt");
		accessTokenReq.setNfType("PCF");
	//	accessTokenReq.setTargetNfType("AMF");
		accessTokenReq.setTargetNfInstanceId(nfInstanceId);
		List<String> targetNsiList = new ArrayList<String>();
		targetNsiList.add("slice-1");
		targetNsiList.add("slice-2");
		targetNsiList.add("slice-3");
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		requesterAndTargetNfInstances.add(nfInstance);
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
		try {
			JSONArray jsArray = new JSONArray(targetNsiList);
			accessTokenReq.setTargetNsiList(jsArray.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		ObjectMapper om = new ObjectMapper();
		AccessTokenErr error = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenErr.class);
		Assert.assertEquals("invalid_request", error.getError());
		Assert.assertEquals("No NFs found for the requested profile", error.getError_description());
	}
	
	@Test
	public void givenTokenRequestWithValidTargetNsiList() throws IOException {
		NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
		accessTokenReq.setNfInstanceId(nfInstanceId);
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("namf-mt");
		accessTokenReq.setNfType("PCF");
		accessTokenReq.setTargetNfType("AMF");
		accessTokenReq.setTargetNfInstanceId(nfInstanceId);
		List<String> targetNsiList = new ArrayList<String>();
		targetNsiList.add("slice-1");
		targetNsiList.add("slice-2");
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		requesterAndTargetNfInstances.add(nfInstance);
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
		try {
			JSONArray jsArray = new JSONArray(targetNsiList);
			accessTokenReq.setTargetNsiList(jsArray.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());

//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		ObjectMapper om = new ObjectMapper();
		AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenRsp.class);
		
		// Validation if producerNsiList is set and producerSnssaiList is not set
		String jwt = response.getAccess_token();
		try {
			Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
			Assert.assertEquals(claims.getBody().get("producerNsiList"), targetNsiList);
			Assert.assertFalse(claims.getBody().toString().contains("producerSnssaiList"));
		}
		catch(Exception e) {
			e.printStackTrace();
			fail("Token Validation Failed: "+e.getMessage());
		}
	}
	
	@Test
	public void givenTokenRequestWithNullNsiList() throws IOException {
		NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		Object b = false;
		String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
		accessTokenReq.setNfInstanceId(nfInstanceId);
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("namf-mt");
		accessTokenReq.setNfType("PCF");
		accessTokenReq.setTargetNfType("AMF");
		accessTokenReq.setTargetNfInstanceId(nfInstanceId);
		List<String> targetNsiList = new ArrayList<String>();
		targetNsiList.add("slice-1");
		targetNsiList.add("slice-2");
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		nfProfile.setNsiList(null);
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		requesterAndTargetNfInstances.add(nfInstance);
		GlobalConfig globalConfig = new GlobalConfig();
		globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		nrfConfigurations.setGlobalConfig(globalConfig);
		service.setNrfConfigurations(nrfConfigurations);
		try {
			JSONArray jsArray = new JSONArray(targetNsiList);
			accessTokenReq.setTargetNsiList(jsArray.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());

//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		try {
			b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
		}catch(Exception e) {
			e.printStackTrace();
		}
		Assert.assertFalse(b instanceof AccessTokenErr);
	}
	
	@Test
	public void givenTokenRequestWithInvalidTargetSnssaiList() throws IOException {
		NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
		accessTokenReq.setNfInstanceId(nfInstanceId);
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("namf-mt");
		accessTokenReq.setNfType("PCF");
		accessTokenReq.setTargetNfType("AMF");
		accessTokenReq.setTargetNfInstanceId(nfInstanceId);
		List<SingleNssai> targetSnssaiList = new ArrayList<SingleNssai>();
		targetSnssaiList.add(new SingleNssai("abc", 123));
		targetSnssaiList.add(new SingleNssai("def", 127));
		targetSnssaiList.add(new SingleNssai("ghi", 129));
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		List<SingleNssai> snssaiList = new ArrayList<SingleNssai>();
		snssaiList.add(new SingleNssai("abc", 123));
		snssaiList.add(new SingleNssai("def", 127));
		nfProfile.setsNssais(snssaiList);
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		requesterAndTargetNfInstances.add(nfInstance);
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
		try {
			accessTokenReq.setTargetSnssaiList(targetSnssaiList.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());

//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		ObjectMapper om = new ObjectMapper();
		AccessTokenErr error = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenErr.class);
		Assert.assertEquals("invalid_request", error.getError());
		Assert.assertEquals("No NFs found for the requested profile", error.getError_description());
	}
	
	@Test
	public void givenTokenRequestWithValidTargetSnssaiList_WithoutRequesterAndTargetPlmn() throws IOException {
		NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
		accessTokenReq.setNfInstanceId(nfInstanceId);
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("namf-mt");
		accessTokenReq.setNfType("PCF");
		accessTokenReq.setTargetNfType("AMF");
		accessTokenReq.setTargetNfInstanceId(nfInstanceId);
		List<SingleNssai> targetSnssaiList = new ArrayList<SingleNssai>();
		targetSnssaiList.add(new SingleNssai("abc", 123));
		targetSnssaiList.add(new SingleNssai("def", 127));
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		nfProfile.setsNssais(targetSnssaiList);
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		requesterAndTargetNfInstances.add(nfInstance);
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		service.setNrfConfigurations(nrfConfigurations);
		try {
			accessTokenReq.setTargetSnssaiList(targetSnssaiList.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(accessTokenReq);
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());

//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		ObjectMapper om = new ObjectMapper();
		AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenRsp.class);
		
		// Vaildation if producerSnssaiList is set and producerPlmnId, consumerPlmnId and producerNsiList is not set
		String jwt = response.getAccess_token();
		System.out.println("Validating jwt: "+jwt);
		try {
			Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
			System.out.println(claims);
			List<Map<String, Integer>> obtainedSnssaiList = (List<Map<String, Integer>>)claims.getBody().get("producerSnssaiList");
			HashMap<String, Integer> map = (HashMap<String, Integer>) obtainedSnssaiList.get(0);
			Assert.assertEquals(map.get("sd"),"abc");
			Assert.assertEquals(map.get("sst").toString(),"123");
			map = (HashMap<String, Integer>) obtainedSnssaiList.get(1);
			Assert.assertEquals(map.get("sd"),"def");
			Assert.assertEquals(map.get("sst").toString(),"127");
			Assert.assertEquals(claims.getBody().get("producerPlmnId"), null);
			Assert.assertEquals(claims.getBody().get("consumerPlmnId"), null);
			Assert.assertEquals(claims.getBody().get("producerNsiList"), null);
		}
		catch(Exception e) {
			fail("Token Validation Failed: "+e.getMessage());
		}
	}
	
	@Test
	public void givenTokenRequestWithNullSnssaiList() throws IOException {
		NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		Object b = false;
		String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
		accessTokenReq.setNfInstanceId(nfInstanceId);
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("namf-mt");
		accessTokenReq.setNfType("PCF");
		accessTokenReq.setTargetNfType("AMF");
		accessTokenReq.setTargetNfInstanceId(nfInstanceId);
		List<SingleNssai> targetSnssaiList = new ArrayList<SingleNssai>();
		targetSnssaiList.add(new SingleNssai("abc", 123));
		targetSnssaiList.add(new SingleNssai("def", 127));
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		nfProfile.setsNssais(null);
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		requesterAndTargetNfInstances.add(nfInstance);
		GlobalConfig globalConfig = new GlobalConfig();
		globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		nrfConfigurations.setGlobalConfig(globalConfig);
		service.setNrfConfigurations(nrfConfigurations);
		try {
			accessTokenReq.setTargetSnssaiList(targetSnssaiList.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		try {
			b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
		}catch(Exception e) {
			e.printStackTrace();
		}
		Assert.assertFalse(b instanceof AccessTokenErr);
	}
		
	@Test
	public void givenTokenRequestWithTargetTypeNotNRF_whenScopeNRFServices_ThenReturnError()throws JsonMappingException, JsonProcessingException {
		GlobalConfig globalConfig = new GlobalConfig();
		globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		nrfConfigurations.setGlobalConfig(globalConfig);
		service.setNrfConfigurations(nrfConfigurations);
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc11");
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("nnrf-nfm");
		accessTokenReq.setTargetNfType("PCF");
		NfInstance nfInstance = TestDataGenerator.generateNfInstance();
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());

//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		ObjectMapper om = new ObjectMapper();
		AccessTokenErr error = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenErr.class);
		Assert.assertEquals("invalid_request", error.getError());
		Assert.assertEquals("NF services in scope doesn't belong to targetNftype", error.getError_description());
	}
	
	@Test
	public void givenTokenRequestWithRegisteredTargetNfInstanceNotNRF_whenScopeNRFServices_ThenReturnError()throws JsonMappingException, JsonProcessingException {
		GlobalConfig globalConfig = new GlobalConfig();
		globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
	
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(globalConfig);
		service.setNrfConfigurations(nrfConfigurations);
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc11");
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("nnrf-nfm");
		accessTokenReq.setTargetNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bcdd");
		NfInstance nfInstance = TestDataGenerator.generateNfInstance();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		nfInstance.setNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bcdd");
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		ObjectMapper om = new ObjectMapper();
		AccessTokenErr error = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenErr.class);
		Assert.assertEquals("invalid_request", error.getError());
		Assert.assertEquals("NF services in scope doesn't belongs to the NF registered with the targetNFInstanceId", error.getError_description());
	}
	
	@Test
	public void givenTokenRequest_whenScopeNRFandNonNRFServices_ThenReturnError()throws JsonMappingException, JsonProcessingException {
		GlobalConfig globalConfig = new GlobalConfig();
		globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		nrfConfigurations.setGlobalConfig(globalConfig);
		service.setNrfConfigurations(nrfConfigurations);
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc11");
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("nnrf-nfm nnrf-disc nudm-ee");
		accessTokenReq.setTargetNfType("NRF");
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());

//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		ObjectMapper om = new ObjectMapper();
		AccessTokenErr error = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenErr.class);
		Assert.assertEquals("invalid_scope", error.getError());
		Assert.assertEquals("NF services in scope doesn't belong to same NF type", error.getError_description());
	}
	
	@Test
	public void givenTokenRequest_whenScopeNRFandCustomServices_ThenReturnTokenResponse()throws JsonMappingException, JsonProcessingException {
		GlobalConfig globalConfig = new GlobalConfig();
		globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(globalConfig);
		service.setNrfConfigurations(nrfConfigurations);
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc11");
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("nnrf-nfm nnrf-disc abc");
		accessTokenReq.setTargetNfType("NRF");
		NfInstance nfInstance = TestDataGenerator.generateNfInstance();
		nfInstance.setNfType("NRF");
		
		NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
		nrfSystemOptions.getNfAccessTokenSystemOptions().setAudienceType(AudienceType.NF_TYPE);
		nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
		
		when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		ObjectMapper om = new ObjectMapper();
		AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenRsp.class);
		Assert.assertEquals("Bearer", response.getToken_type());

		Assert.assertEquals(nrfSystemOptions.getNfAccessTokenSystemOptions().getOauthTokenExpiryTime()
													.toSeconds(), response.getExpires_in().intValue());

		Assert.assertEquals("nnrf-nfm nnrf-disc",response.getScope());
		
		// Token Validation
		String jwt = response.getAccess_token();
		System.out.println("Validating jwt: "+jwt);
		try {
			Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
			Assert.assertEquals("e596fd1f-36d6-40e5-8a2d-ce2ec0212978", claims.getBody().getIssuer());
			Assert.assertEquals(nfInstance.getNfInstanceId(), claims.getBody().getSubject());
			Assert.assertEquals(nfInstance.getNfType(),claims.getBody().getAudience());
		}
		catch(Exception e) {
			fail("Token Validation Failed: "+e.getMessage());
		}	
	}
	
	@Test
	public void givenTokenRequest_whenScopeNFMandCustomServices_ThenReturnTokenResponse()throws JsonMappingException, JsonProcessingException {
		GlobalConfig globalConfig = new GlobalConfig();
		globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");		
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		nrfConfigurations.setGlobalConfig(globalConfig);
		service.setNrfConfigurations(nrfConfigurations);
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc11");
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setScope("nnrf-nfm custom_serv1");
		accessTokenReq.setTargetNfType("NRF");
		NfInstance nfInstance = TestDataGenerator.generateNfInstance();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());

//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		ObjectMapper om = new ObjectMapper();
		AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(), AccessTokenRsp.class);
		Assert.assertEquals("Bearer", response.getToken_type());

		Assert.assertEquals(((NrfSystemOptions)nrfSystemOptionsDao.toDomain("v1")).getNfAccessTokenSystemOptions().getOauthTokenExpiryTime()
													.toSeconds(), response.getExpires_in().intValue());

		Assert.assertEquals("nnrf-nfm",response.getScope());
		
		// Token Validation
		String jwt = response.getAccess_token();
		System.out.println("Validating jwt: "+jwt);
		try {
			Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
			Assert.assertEquals("e596fd1f-36d6-40e5-8a2d-ce2ec0212978", claims.getBody().getIssuer());
			Assert.assertEquals(nfInstance.getNfInstanceId(), claims.getBody().getSubject());
			Assert.assertEquals(Arrays.asList(globalConfig.getNrfInstanceId()).toString(),claims.getBody().getAudience());
		}
		catch(Exception e) {
			fail("Token Validation Failed: "+e.getMessage());
		}
	}

	@Test	
	public void testANDWith2Profiles() throws IOException {
		
		NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());

		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-comm");
		nfProfile.getNfServices().get(1).setServiceName("namf-evts");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstanceList.add(nfInstance);
		
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
		accessTokenReq.setScope("namf-evts namf-comm");
		ObjectMapper om = new ObjectMapper();
		AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(),
												AccessTokenRsp.class);
		Assert.assertEquals("Bearer", response.getToken_type());

		Assert.assertEquals(((NrfSystemOptions)nrfSystemOptionsDao.toDomain("v1")).getNfAccessTokenSystemOptions().getOauthTokenExpiryTime().toSeconds(),
									(long)response.getExpires_in());

		
		// Token Validation
		String jwt = response.getAccess_token();
		System.out.println("Validating jwt: "+jwt);
		try {
			Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
			Assert.assertEquals("e596fd1f-36d6-40e5-8a2d-ce2ec0212978", claims.getBody().getIssuer());
			Assert.assertEquals(nfInstanceId, claims.getBody().getSubject());
			Assert.assertTrue(claims.getBody().getAudience().contains(nfInstance.getNfInstanceId()));
			Assert.assertEquals("namf-evts namf-comm", claims.getBody().get("scope"));
		}
		catch(Exception e) {
			fail("Token Validation Failed: "+e.getMessage());
		}
		
		/*Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.responses")
							.tag("ClientNfInstanceId", requesterAndTargetNfInstances.get(0).getNfInstanceId())
							.tag("ServiceName", "namf-evts")
							.tag("HttpStatusCode", "200")
							.counter().count(),0);
		Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.responses")
							.tag("ClientNfInstanceId", requesterAndTargetNfInstances.get(0).getNfInstanceId())
							.tag("ServiceName", "namf-comm")
							.tag("HttpStatusCode", "200")
							.counter().count(),0);*/
	}
	
	@Test
	public void testANDWithNfTypeAud() throws IOException {
		
		NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
		
		NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
		nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		nrfSystemOptions.getNfAccessTokenSystemOptions().setAudienceType(AudienceType.NF_TYPE);
		service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
		
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-comm");
		nfProfile.getNfServices().get(1).setServiceName("namf-evts");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstanceList.add(nfInstance);
		
		//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
		accessTokenReq.setScope("namf-loc namf-mt");
		ObjectMapper om = new ObjectMapper();
		AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(),
												AccessTokenRsp.class);
		Assert.assertEquals("Bearer", response.getToken_type());

		Assert.assertEquals(nrfSystemOptions.getNfAccessTokenSystemOptions().getOauthTokenExpiryTime().toSeconds(),
									(long)response.getExpires_in());

		
		// Token Validation
		String jwt = response.getAccess_token();
		System.out.println("Validating jwt: "+jwt);
		try {
			Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
			Assert.assertEquals("e596fd1f-36d6-40e5-8a2d-ce2ec0212978", claims.getBody().getIssuer());
			Assert.assertEquals(nfInstanceId, claims.getBody().getSubject());
			Assert.assertEquals("AMF", claims.getBody().getAudience());
			Assert.assertEquals("namf-loc namf-mt", claims.getBody().get("scope"));
		}
		catch(Exception e) {
			fail("Token Validation Failed: "+e.getMessage());
		}
		
		/*Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.responses")
				.tag("ClientNfInstanceId", requesterAndTargetNfInstances.get(0).getNfInstanceId())
				.tag("ServiceName", "namf-loc")
				.tag("HttpStatusCode", "200")
				.counter().count(),0);
		Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.responses")
				.tag("ClientNfInstanceId", requesterAndTargetNfInstances.get(0).getNfInstanceId())
				.tag("ServiceName", "namf-mt")
				.tag("HttpStatusCode", "200")
				.counter().count(),0);*/	
	}
	
	@Test
	public void testANDWithNoMatchingProfiles() throws IOException {

		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfSystemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		NfAccessTokenSystemOptions nfAccessToken = TestDataGenerator.generateNfAccessTokenSystemOptions();
		nfAccessToken.setAudienceType(AudienceType.NF_TYPE);
		nrfSystemOptions.setNfAccessTokenSystemOptions(nfAccessToken);
		nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfSystemOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		
		NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-comm");
		nfProfile.getNfServices().get(1).setServiceName("namf-evts");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstanceList.add(nfInstance);
		String nfInstanceId = nfInstanceList.get(0).getNfInstanceId();
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(nfInstanceList);
		when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setNfInstanceId(nfInstanceList.get(0).getNfInstanceId());
		accessTokenReq.setScope("namf-loc namf-evts");
		ObjectMapper om = new ObjectMapper();
		AccessTokenErr accessTokenErr = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(),
														AccessTokenErr.class);
		Assert.assertEquals("invalid_scope", accessTokenErr.getError());
		Assert.assertEquals("No NFs found for the requested scope", accessTokenErr.getError_description());
		Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.rejected")
								.tag("ClientNfInstanceId", nfInstanceId)
								.tag("Scope", "namf-evts,namf-loc")
								.tag("RejectionReason", "ProducerWithRequestedScopeNotFound")
								.counter().count(),0);
	}
	
	@Test(expected = NrfException.class)
	public void testANDWhenDBOperationFails() throws IOException {
		
		NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);

		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfSystemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		NfAccessTokenSystemOptions nfAccessToken =TestDataGenerator.generateNfAccessTokenSystemOptions();
		nfAccessToken.setAudienceType(AudienceType.NF_TYPE);
		nrfSystemOptions.setNfAccessTokenSystemOptions(nfAccessToken);
		nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfSystemOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-comm");
		nfProfile.getNfServices().get(1).setServiceName("namf-evts");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstanceList.add(nfInstance);
		
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		when(nfRepository.filterProfiles(any())).thenReturn(null);
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
		accessTokenReq.setScope("namf-loc namf-evts");
		
		service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
	}
	
	@Test(expected = NrfException.class)
	public void testANDWhenDBOperationHasErrors() throws IOException {

		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfSystemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		NfAccessTokenSystemOptions nfAccessToken = TestDataGenerator.generateNfAccessTokenSystemOptions();
		nfAccessToken.setAudienceType(AudienceType.NF_TYPE);
		nrfSystemOptions.setNfAccessTokenSystemOptions(nfAccessToken);
		nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfSystemOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		
		NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-comm");
		nfProfile.getNfServices().get(1).setServiceName("namf-evts");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstanceList.add(nfInstance);
		
		nfProfile = TestDataGenerator.generateNF("PCF");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		doThrow(SQLGrammarException.class).when(nfRepository).filterProfiles(any());
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
		accessTokenReq.setScope("namf-loc namf-evts");
		
		service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
	}
	
	@Test
	public void testORWith2Profiles() throws IOException {

		NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
		nrfSystemOptions.getNfAccessTokenSystemOptions().setLogicalOperatorForScope(LogicalOperatorForScope.OR);
		nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
		
		NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-comm");
		nfProfile.getNfServices().get(1).setServiceName("namf-evts");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstanceList.add(nfInstance);
		String nfInstanceId1 = nfInstanceList.get(0).getNfInstanceId();
		String nfInstanceId2 = nfInstanceList.get(1).getNfInstanceId(); 
		nfProfile = TestDataGenerator.generateNF("PCF");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
		//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
		accessTokenReq.setScope("namf-loc namf-comm");
		ObjectMapper om = new ObjectMapper();
		AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(),
												AccessTokenRsp.class);
		Assert.assertEquals("Bearer", response.getToken_type());

		Assert.assertEquals(nrfSystemOptions.getNfAccessTokenSystemOptions().getOauthTokenExpiryTime().toSeconds(),
									(long)response.getExpires_in());

		
		// Token Validation
		String jwt = response.getAccess_token();
		System.out.println("Validating jwt: "+jwt);
		try {
			Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
			Assert.assertEquals("e596fd1f-36d6-40e5-8a2d-ce2ec0212978", claims.getBody().getIssuer());
			Assert.assertEquals(nfInstanceId, claims.getBody().getSubject());
			Assert.assertTrue(claims.getBody().getAudience().contains(nfInstanceId1));
			Assert.assertTrue(claims.getBody().getAudience().contains(nfInstanceId2));
			Assert.assertEquals("namf-comm namf-loc", claims.getBody().get("scope"));
		}
		catch(Exception e) {
			fail("Token Validation Failed: "+e.getMessage());
		}
		/*Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.responses")
													.tag("ClientNfInstanceId", requesterAndTargetNfInstances.get(0).getNfInstanceId())
													.tag("ServiceName", "namf-loc")
													.tag("HttpStatusCode", "200")
													.counter().count(),0);
		Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.responses")
													.tag("ClientNfInstanceId", requesterAndTargetNfInstances.get(0).getNfInstanceId())
													.tag("ServiceName", "namf-comm")
													.tag("HttpStatusCode", "200")
													.counter().count(),0);*/
	}
	
	@Test
	public void testORWithNfTypeAud() throws IOException {

		NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
		nrfSystemOptions.getNfAccessTokenSystemOptions().setAudienceType(AudienceType.NF_TYPE);
		nrfSystemOptions.getNfAccessTokenSystemOptions().setLogicalOperatorForScope(LogicalOperatorForScope.OR);
		nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
		
		NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-comm");
		nfProfile.getNfServices().get(1).setServiceName("namf-evts");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstanceList.add(nfInstance);
		
		nfProfile = TestDataGenerator.generateNF("PCF");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
		//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
		accessTokenReq.setScope("namf-evts");
		ObjectMapper om = new ObjectMapper();
		AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(),
												AccessTokenRsp.class);
		Assert.assertEquals("Bearer", response.getToken_type());

		Assert.assertEquals(nrfSystemOptions.getNfAccessTokenSystemOptions().getOauthTokenExpiryTime().toSeconds(),
									(long) response.getExpires_in());

		
		// Token Validation
		String jwt = response.getAccess_token();
		System.out.println("Validating jwt: "+jwt);
		try {
			Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
			Assert.assertEquals("e596fd1f-36d6-40e5-8a2d-ce2ec0212978", claims.getBody().getIssuer());
			Assert.assertEquals(nfInstanceId, claims.getBody().getSubject());
			Assert.assertEquals("AMF", claims.getBody().getAudience());
			Assert.assertEquals("namf-evts", claims.getBody().get("scope"));
		}
		catch(Exception e) {
			fail("Token Validation Failed: "+e.getMessage());
		}
		/*Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.responses")
								.tag("ClientNfInstanceId", requesterAndTargetNfInstances.get(0).getNfInstanceId())
								.tag("ServiceName", "namf-evts")
								.tag("HttpStatusCode", "200")
								.counter().count(),0);*/
	}
	
	@Test
	public void testORWithPartiallyMatchingProfiles() throws IOException {

		NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
		NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
		nrfSystemOptions.getNfAccessTokenSystemOptions().setLogicalOperatorForScope(LogicalOperatorForScope.OR);
		nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
		
		NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().remove(1);
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstance.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstance.setNfStatus(NFStatus.REGISTERED);
		nfInstanceList.add(nfInstance);
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-comm");
		nfProfile.getNfServices().get(1).setServiceName("namf-evts");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstance.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstance.setNfStatus(NFStatus.REGISTERED);
		nfInstanceList.add(nfInstance);
		
		nfProfile = TestDataGenerator.generateNF("PCF");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstance.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstance.setNfStatus(NFStatus.REGISTERED);
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
		String nfInstanceId1 = nfInstanceList.get(0).getNfInstanceId();
		String nfInstanceId2 = nfInstanceList.get(1).getNfInstanceId();
		//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
		accessTokenReq.setScope("namf-loc namf-comm");
		ObjectMapper om = new ObjectMapper();
		AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(),
												AccessTokenRsp.class);
		Assert.assertEquals("Bearer", response.getToken_type());

		Assert.assertEquals(nrfSystemOptions.getNfAccessTokenSystemOptions().getOauthTokenExpiryTime().toSeconds(),
									(long) response.getExpires_in());

		Assert.assertTrue(response.getScope()!=null);
		Assert.assertEquals("namf-comm", response.getScope());
		
		// Token Validation
		String jwt = response.getAccess_token();
		System.out.println("Validating jwt: "+jwt);
		try {
			Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
			Assert.assertEquals("e596fd1f-36d6-40e5-8a2d-ce2ec0212978", claims.getBody().getIssuer());
			Assert.assertEquals(nfInstanceId, claims.getBody().getSubject());
			Assert.assertFalse(claims.getBody().getAudience().contains(nfInstanceId1));
			Assert.assertTrue(claims.getBody().getAudience().contains(nfInstanceId2));
			Assert.assertEquals("namf-comm", claims.getBody().get("scope"));
		}
		catch(Exception e) {
			fail("Token Validation Failed: "+e.getMessage());
		}
		
		/*Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.responses")
								.tag("ClientNfInstanceId", requesterAndTargetNfInstances.get(0).getNfInstanceId())
								.tag("ServiceName", "namf-loc")
								.tag("HttpStatusCode", "200")
								.counter().count(),0);
		Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.responses")
								.tag("ClientNfInstanceId", requesterAndTargetNfInstances.get(0).getNfInstanceId())
								.tag("ServiceName", "namf-comm")
								.tag("HttpStatusCode", "200")
								.counter().count(),0);*/
	}
	
	@Test
	public void testORWithNoMatchingProfiles() throws IOException {
		
		NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfSystemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		NfAccessTokenSystemOptions nfAccessToken = TestDataGenerator.generateNfAccessTokenSystemOptions();
		nfAccessToken.setLogicalOperatorForScope(LogicalOperatorForScope.OR);
		nrfSystemOptions.setNfAccessTokenSystemOptions(nfAccessToken);
			
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfSystemOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-comm");
		nfProfile.getNfServices().remove(1);
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstanceList.add(nfInstance);
		
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
		accessTokenReq.setScope("namf-evts");
		ObjectMapper om = new ObjectMapper();
		AccessTokenErr accessTokenErr = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(),
														AccessTokenErr.class);
		Assert.assertEquals("invalid_scope", accessTokenErr.getError());
		Assert.assertEquals("No NFs found for the requested scope", accessTokenErr.getError_description());
		
		Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.rejected")
								.tag("ClientNfInstanceId", nfInstanceId)
								.tag("Scope", "namf-evts")
								.tag("RejectionReason", "ProducerWithRequestedScopeNotFound")
								.counter().count(),0);
	}
	
	@Test(expected = NrfException.class)
	public void testORWhenDBOperationFails() throws IOException {
		
		NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		
		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfSystemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		NfAccessTokenSystemOptions nfAccessToken = TestDataGenerator.generateNfAccessTokenSystemOptions();
		nfAccessToken.setLogicalOperatorForScope(LogicalOperatorForScope.OR);
		nrfSystemOptions.setNfAccessTokenSystemOptions(nfAccessToken);
		nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfSystemOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-comm");
		nfProfile.getNfServices().get(1).setServiceName("namf-evts");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstanceList.add(nfInstance);
		
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(requesterAndTargetNfInstances);
		when(nfRepository.filterProfiles(any())).thenReturn(null);
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
		accessTokenReq.setScope("namf-loc namf-evts");
		
		service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
	}
	
	@Test(expected = NrfException.class)
	public void testORWhenDBOperationHasErrors() throws IOException {

		NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
		NrfSystemOptions nrfSystemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
		NfAccessTokenSystemOptions nfAccessToken = TestDataGenerator.generateNfAccessTokenSystemOptions();
		nfAccessToken.setLogicalOperatorForScope(LogicalOperatorForScope.OR);
		nrfSystemOptions.setNfAccessTokenSystemOptions(nfAccessToken);
		nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
		List<VersionedJsonDoc> list = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion("v1");
		versionJsonDoc.setDoc(nrfSystemOptions.toString());
		list.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(list);
		nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
		
		NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-mt");
		nfProfile.getNfServices().get(1).setServiceName("namf-loc");
		NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
		nfInstanceList.add(nfInstance);
		nfProfile = TestDataGenerator.generateNF("AMF");
		nfProfile.getNfServices().get(0).setServiceName("namf-comm");
		nfProfile.getNfServices().get(1).setServiceName("namf-evts");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		nfInstanceList.add(nfInstance);
		
		nfProfile = TestDataGenerator.generateNF("PCF");
		nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
		List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
		requesterAndTargetNfInstances.add(nfInstance);
		
//		when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//		when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//		when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
		//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
		when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(requesterAndTargetNfInstances);
		doThrow(SQLGrammarException.class).when(nfRepository).filterProfiles(any());
		NrfConfigurations nrfConfigurations = new NrfConfigurations();
		ServiceConfig accessTokenSvc = new ServiceConfig();
		accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
		nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
		nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
		service.setNrfConfigurations(nrfConfigurations);
		
		AccessTokenReq accessTokenReq = new AccessTokenReq();
		accessTokenReq.setGrant_type("client_credentials");
		accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
		accessTokenReq.setScope("namf-loc namf-evts");
		
		service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
	}
	
	//Validation of scope
		@Test
		public void givenTokenRequest_withValidScope(){
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = false;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e1bc11";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("namf-mt namf-loc");
			accessTokenReq.setNfType("AMF");
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NfInstance nfInstance = TestDataGenerator.generateNfInstance();
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
			when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
			b = service.validateScope(accessTokenReq);
			Assert.assertFalse(b instanceof AccessTokenErr);
		}	

		@Test
		public void givenTokenRequest_withScopesFromDifferentNfTypes() throws IOException{
			NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
			NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
			requesterAndTargetNfInstances.add(nfInstance);
			String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();			
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = false;
			accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("namf-mt nudm-ee");
			accessTokenReq.setNfType("AMF");
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
			nfInstance = TestDataGenerator.generateNfInstance();
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//			when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//			when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
			//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(requesterAndTargetNfInstances);
			b = service.validateScope(accessTokenReq);
			Assert.assertTrue(b instanceof AccessTokenErr);
			Assert.assertEquals(1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.rejected")
									.tag("ClientNfInstanceId", nfInstanceId)
									.tag("Scope", "namf-mt,nudm-ee")
									.tag("RejectionReason", "InconsistentScope")
									.counter().count(),0);
		}	

		@Test
		public void givenTokenRequest_withScopesCustomServices_withoutMandatoryCondition(){
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = false;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e1bc11";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("namf-eee");
			accessTokenReq.setNfType("AMF");
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
			NfInstance nfInstance = TestDataGenerator.generateNfInstance();
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//			when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//			when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
			when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
			b = service.validateScope(accessTokenReq);
			Assert.assertTrue(b instanceof AccessTokenErr);
		}	

		@Test
		public void givenTokenRequest_withScopesCustomServices_withMandatoryConditionalParams(){
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = false;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e1bc11";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("namf-eee");
			accessTokenReq.setNfType("AMF");
			accessTokenReq.setTargetNfType("AMF");
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
			NfInstance nfInstance = TestDataGenerator.generateNfInstance();
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//			when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//			when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
			when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
			b = service.validateScope(accessTokenReq);
			Assert.assertFalse(b instanceof AccessTokenErr);
		}	

		@Test
		public void givenTokenRequest_withScopesCustomServices_withMandatoryConditionalTargetNfInstanceId(){
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = false;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e1bc11";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("namf-eee");
			accessTokenReq.setNfType("AMF");
			accessTokenReq.setTargetNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5c");
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
			NfInstance nfInstance = TestDataGenerator.generateNfInstance();
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//			when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//			when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
			when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
			b = service.validateScope(accessTokenReq);
			Assert.assertFalse(b instanceof AccessTokenErr);
		}	

		@Test 
		public void givenTokenRequest_withSingleScope(){
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = false;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e1bc11";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("namf-mt ");
			accessTokenReq.setNfType("AMF");
			accessTokenReq.setTargetNfType("AMF");
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
			NfInstance nfInstance = TestDataGenerator.generateNfInstance();
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//			when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//			when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
			when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
			b = service.validateScope(accessTokenReq);
			Assert.assertFalse(b instanceof AccessTokenErr);
		}	


		@Test
		public void givenTokenRequest_withValidScope_different_targetNfType(){
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = false;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e1bc11";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("namf-mt ");
			accessTokenReq.setNfType("AMF");
			accessTokenReq.setTargetNfType("PCF");
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
			NfInstance nfInstance = TestDataGenerator.generateNfInstance();
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//			when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//			when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
			when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
			b = service.validateScope(accessTokenReq);
			Assert.assertTrue(b instanceof AccessTokenErr);

		}
		
		//Validate IEs
		@Test
		public void givenTokenRequest_whenNfInstanceIsRegisteredWithMatchingrequesterPlmn_ThenReturnTokenResponse() throws IOException{
			
			NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
			NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
			requesterAndTargetNfInstances.add(nfInstance);
			
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Boolean isNrfExceptionThrown = false;
			Object b = false;
			accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("namf-mt");
			accessTokenReq.setNfType("PCF");
			nfProfile = TestDataGenerator.generateNF("AMF");
			nfProfile.getNfServices().get(0).setServiceName("namf-mt");
			nfProfile.getNfServices().get(1).setServiceName("namf-loc");
			List<Plmn> plmnList = new ArrayList<>();
			plmnList.add(new Plmn("310", "14"));
			nfProfile.setAllowedPlmns(plmnList);
			nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
			nfInstanceList.add(nfInstance);
			try {
				accessTokenReq.setRequesterPlmn("{\"mcc\":\"310\",\"mnc\":\"14\"}");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
			service.setNrfConfigurations(nrfConfigurations);
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//			when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//			when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
			//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(requesterAndTargetNfInstances);
			when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
			try {
			b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
			}catch (Exception e) {
				isNrfExceptionThrown = true;
				// TODO: handle exception
			}
			Assert.assertFalse(b instanceof AccessTokenErr);
			ObjectMapper om = new ObjectMapper();
			AccessTokenRsp response = om.readValue(b.toString(), AccessTokenRsp.class);
			
			// Validation if consumerPlmnId is sent
			String jwt = response.getAccess_token();
			try {
				Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
				Map<String, String> obtainedConsumerPlmn = (Map<String, String>)claims.getBody().get("consumerPlmnId");
				Assert.assertEquals(obtainedConsumerPlmn.get("mcc"), "310");
				Assert.assertEquals(obtainedConsumerPlmn.get("mnc"), "14");
			}
			catch(Exception e) {
				fail("Token Validation Failed: "+e.getMessage());
			}
		}
		
		
		@Test
		public void givenTokenRequest_whenNfInstanceIsRegisteredWithNonMatchingrequesterPlmn_ThenReturnTokenResponse() throws IOException{
			NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
			NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
			requesterAndTargetNfInstances.add(nfInstance);
			
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Boolean isNrfExceptionThrown = false;
			Object b = false;
			accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("namf-evts");
			accessTokenReq.setNfType("PCF");
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(globalConfig);
			service.setNrfConfigurations(nrfConfigurations);
			try {
				accessTokenReq.setRequesterPlmn("{\"mcc\":\"310\",\"mnc\":\"11\"}");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
			nfProfile = TestDataGenerator.generateNF("AMF");
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//			when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//			when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
			nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(requesterAndTargetNfInstances);
			try {
			b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
			}catch (Exception e) {
				isNrfExceptionThrown = true;
				// TODO: handle exception
			}
			Assert.assertTrue(b instanceof AccessTokenErr);
		}
		
		
		@Test
		public void givenTokenRequest_whenNfInstanceIsRegisteredWithMatchingTargetPlmn_ThenReturnTokenResponse() throws IOException{
			
			NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
			NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
			requesterAndTargetNfInstances.add(nfInstance);
			
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Boolean isNrfExceptionThrown = false;
			Object b = false;
			accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("namf-mt");
			accessTokenReq.setNfType("PCF");
			nfProfile = TestDataGenerator.generateNF("AMF");
			nfProfile.getNfServices().get(0).setServiceName("namf-mt");
			nfProfile.getNfServices().get(1).setServiceName("namf-loc");
			nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
			nfInstanceList.add(nfInstance);
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
			service.setNrfConfigurations(nrfConfigurations);
			try {
				accessTokenReq.setTargetPlmn("{\"mcc\":\"310\",\"mnc\":\"14\"}");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//			when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//			when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
			//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(requesterAndTargetNfInstances);
			when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
			try {
			b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
			}catch (Exception e) {
				System.out.println("exception");
				isNrfExceptionThrown = true;
				// TODO: handle exception
			}
			Assert.assertFalse(b instanceof AccessTokenErr);
			ObjectMapper om = new ObjectMapper();
			AccessTokenRsp response = om.readValue(b.toString(), AccessTokenRsp.class);
			
			// Validation if producerPlmnId is sent
			String jwt = response.getAccess_token();
			try {
				Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
				Map<String, String> obtainedProducerPlmn = (Map<String, String>)claims.getBody().get("producerPlmnId");
				Assert.assertEquals(obtainedProducerPlmn.get("mcc"), "310");
				Assert.assertEquals(obtainedProducerPlmn.get("mnc"), "14");
			}
			catch(Exception e) {
				fail("Token Validation Failed: "+e.getMessage());
			}
		}
		
		
		
		@Test
		public void givenTokenRequest_whenNfInstanceIsRegisteredWithMatchingTargetNfType_ThenReturnTokenResponse() throws IOException{
			
			NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
			NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
			requesterAndTargetNfInstances.add(nfInstance);
			
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Boolean isNrfExceptionThrown = false;
			Object b = false;
			String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("namf-mt");
			accessTokenReq.setNfType("PCF");
			accessTokenReq.setTargetNfType("AMF");
			accessTokenReq.setTargetNfInstanceId(nfInstanceId);
			nfProfile = TestDataGenerator.generateNF("AMF");
			nfProfile.getNfServices().get(0).setServiceName("namf-mt");
			nfProfile.getNfServices().get(1).setServiceName("namf-loc");
			nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
			nfInstanceList.add(nfInstance);
			requesterAndTargetNfInstances.add(nfInstance);
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			nrfConfigurations.setGlobalConfig(globalConfig);
			service.setNrfConfigurations(nrfConfigurations);
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
			
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//			when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//			when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
			//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(requesterAndTargetNfInstances);
			when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
			try {
			b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
			}catch (Exception e) {
				isNrfExceptionThrown = true;
				// TODO: handle exception
			}
			Assert.assertFalse(b instanceof AccessTokenErr);
		}
		
		@Test
		public void givenTokenRequest_whenNfInstanceIsRegisteredWithNonMatchingTargetNfType_ThenReturnTokenResponse() throws IOException{
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Boolean isNrfExceptionThrown = false;
			Object b = false;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e1bc11";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("namf-evts");
			accessTokenReq.setNfType("AMF");
			accessTokenReq.setTargetNfType("PCF");
			accessTokenReq.setTargetNfInstanceId(nfInstanceId);
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			nrfConfigurations.setGlobalConfig(globalConfig);
			service.setNrfConfigurations(nrfConfigurations);
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
			NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//			when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//			when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
			NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance);
			try {
			b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
			}catch (Exception e) {
				isNrfExceptionThrown = true;
				// TODO: handle exception
			}
			System.out.println(b);
			Assert.assertTrue(b instanceof AccessTokenErr);
		}
	
		@Test
		public void givenAccessTokenReq_withTargetNfInstanceId_checkAudienceTypeConfigurationNotUsed() throws IOException{
			
			NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
			NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance.setNfStatus(NFStatus.REGISTERED);
			List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
			requesterAndTargetNfInstances.add(nfInstance);
			
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfSystemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			NfAccessTokenSystemOptions nfAccessToken = TestDataGenerator.generateNfAccessTokenSystemOptions();
			nfAccessToken.setAudienceType(AudienceType.NF_TYPE);
			nrfSystemOptions.setNfAccessTokenSystemOptions(nfAccessToken);
			nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfSystemOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());	
			nfProfile = TestDataGenerator.generateNF("AMF");
			nfProfile.getNfServices().get(0).setServiceName("namf-mt");
			nfProfile.getNfServices().get(1).setServiceName("namf-loc");
			NfInstance nfInstance1 = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance1.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance1.setNfStatus(NFStatus.REGISTERED);
			List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
			nfInstanceList.add(nfInstance1);
			requesterAndTargetNfInstances.add(nfInstance1);
			String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
			nfProfile = TestDataGenerator.generateNF("AMF");
			nfProfile.getNfServices().get(0).setServiceName("namf-comm");
			nfProfile.getNfServices().get(1).setServiceName("namf-evts");
			NfInstance nfInstance2 = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance2.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance2.setNfStatus(NFStatus.REGISTERED);
			nfInstanceList.add(nfInstance2);
			List<String> expectedAudience = new ArrayList<String>();
			expectedAudience.add(nfInstance1.getNfInstanceId());
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//			when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//			when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
			//when(nfRepository.findByNfInstanceId(any())).thenReturn(nfInstance1);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(requesterAndTargetNfInstances);
			when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
			service.setNrfConfigurations(nrfConfigurations);
			
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
			accessTokenReq.setScope("namf-loc namf-mt");
			accessTokenReq.setTargetNfInstanceId(nfProfile.getNfInstanceId());
			ObjectMapper om = new ObjectMapper();
			AccessTokenRsp response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(),
													AccessTokenRsp.class);
			Assert.assertEquals("Bearer", response.getToken_type());

			Assert.assertEquals(((NrfSystemOptions)nrfSystemOptionsDao.toDomain("v1")).getNfAccessTokenSystemOptions().getOauthTokenExpiryTime().toSeconds(),
										(long)response.getExpires_in());

			
			// Token Validation
			String jwt = response.getAccess_token();
			System.out.println("Validating jwt: "+jwt);
			try {
				Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
				Assert.assertEquals("e596fd1f-36d6-40e5-8a2d-ce2ec0212978", claims.getBody().getIssuer());
				Assert.assertEquals(nfInstanceId, claims.getBody().getSubject());
				Assert.assertEquals(expectedAudience.toString(), claims.getBody().getAudience());
				Assert.assertEquals("namf-loc namf-mt", claims.getBody().get("scope"));
			}
			catch(Exception e) {
				fail("Token Validation Failed: "+e.getMessage());
			}
			
			//When token request is for NRF Services
			accessTokenReq.setScope("nnrf-disc");
			accessTokenReq.setTargetNfInstanceId(nrfConfigurations.getGlobalConfig().getNrfInstanceId());
			response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(),
													AccessTokenRsp.class);
			Assert.assertEquals("Bearer", response.getToken_type());

			Assert.assertEquals(((NrfSystemOptions)nrfSystemOptionsDao.toDomain("v1")).getNfAccessTokenSystemOptions().getOauthTokenExpiryTime().toSeconds(),
										(long)response.getExpires_in());

			
			// Token Validation
			jwt = response.getAccess_token();
			System.out.println("Validating jwt: "+jwt);
			try {
				Jws<Claims> claims = Jwts.parser().setSigningKey(this.ecKeyPair.getPublic()).parseClaimsJws(jwt);
				Assert.assertEquals("e596fd1f-36d6-40e5-8a2d-ce2ec0212978", claims.getBody().getIssuer());
				Assert.assertEquals(nfInstanceId, claims.getBody().getSubject());
				Assert.assertEquals(Arrays.asList(nrfConfigurations.getGlobalConfig().getNrfInstanceId()).toString(), claims.getBody().getAudience());
			}
			catch(Exception e) {
				fail("Token Validation Failed: "+e.getMessage());
			}

		}
		
		@Test
		public void givenAccessTokenReq_withTargetNfInstanceId_checkNfTypeAllowed() throws IOException{
			
			NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
			NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance.setNfStatus(NFStatus.REGISTERED);
			double expected_metric_count = 0;
			try {
				expected_metric_count = Metrics.globalRegistry.get("ocnrf.accessToken.tx.rejected")
				.tag("ClientNfInstanceId", "e596fd1f-36d6-40e5-8a2d-ce2ec0212978")
				.tag("Scope", "namf-loc,namf-mt")
				.tag("RejectionReason", "ConsumerNfTypeNotAllowed")
				.tag("HttpStatusCode", "400")
				.counter().count();
			} catch (Exception e) {
				
			}
			List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
			requesterAndTargetNfInstances.add(nfInstance);
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfSystemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			NfAccessTokenSystemOptions nfAccessToken = TestDataGenerator.generateNfAccessTokenSystemOptions();
			nfAccessToken.setAudienceType(AudienceType.NF_TYPE);
			nrfSystemOptions.setNfAccessTokenSystemOptions(nfAccessToken);
			nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfSystemOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());	
			nfProfile = TestDataGenerator.generateNF("AMF");
			nfProfile.getNfServices().get(0).setServiceName("namf-mt");
			List<String> allowedNfTypes = new ArrayList<String>();
			allowedNfTypes.add("UDM");
			nfProfile.getNfServices().get(0).setAllowedNfTypes(allowedNfTypes);
			nfProfile.getNfServices().get(1).setServiceName("namf-loc");
			nfProfile.getNfServices().get(1).setAllowedNfTypes(allowedNfTypes);
			NfInstance nfInstance1 = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance1.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance1.setNfStatus(NFStatus.REGISTERED);
			List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
			nfInstanceList.add(nfInstance1);
			requesterAndTargetNfInstances.add(nfInstance1);
			String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
			List<String> expectedAudience = new ArrayList<String>();
			expectedAudience.add(nfInstance1.getNfInstanceId());
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(requesterAndTargetNfInstances);
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
			service.setNrfConfigurations(nrfConfigurations);
			
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
			accessTokenReq.setScope("namf-loc namf-mt");
			accessTokenReq.setTargetNfInstanceId(nfProfile.getNfInstanceId());
			ObjectMapper om = new ObjectMapper();
			AccessTokenErr response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(),
													AccessTokenErr.class);
			Assert.assertEquals("ConsumerNfType not allowed to access the requested profile", response.getError_description());
			Assert.assertEquals("invalid_request",response.getError());
			double metric_count = 0;
			try {
				metric_count = Metrics.globalRegistry.get("ocnrf.accessToken.tx.rejected")
				.tag("Scope", "namf-loc,namf-mt")
				.tag("RejectionReason", "ConsumerNfTypeNotAllowed")
				.tag("HttpStatusCode", "400")
				.counter().count();
			} catch (Exception e) {
				
			}
			Assert.assertEquals(metric_count,expected_metric_count+1,0);
		}

		@Test
		public void givenAccessTokenReq_withTargetNfInstanceId_checkPlmnAllowed() throws Exception{
			
			NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
			NfInstance nfInstance = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance.setNfStatus(NFStatus.REGISTERED);
			List<NfInstance> requesterAndTargetNfInstances = new ArrayList<NfInstance>();
			requesterAndTargetNfInstances.add(nfInstance);
			
			double expected_metric_count = 0;
			try {
				expected_metric_count = Metrics.globalRegistry.get("ocnrf.accessToken.tx.rejected")
				.tag("Scope", "namf-loc,namf-mt")
				.tag("RejectionReason", "ConsumerPlmnNotAllowed")
				.tag("HttpStatusCode", "400")
				.counter().count();
			} catch (Exception e) {
				
			}
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfSystemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			NfAccessTokenSystemOptions nfAccessToken = TestDataGenerator.generateNfAccessTokenSystemOptions();
			nfAccessToken.setAudienceType(AudienceType.NF_TYPE);
			nrfSystemOptions.setNfAccessTokenSystemOptions(nfAccessToken);
			nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfSystemOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());	
			nfProfile = TestDataGenerator.generateNF("AMF");
			nfProfile.getNfServices().get(0).setServiceName("namf-mt");
			List<Plmn> allowedPlmns = new ArrayList<Plmn>();
			Plmn plmn = new Plmn("300", "10");
			allowedPlmns.add(plmn);
			nfProfile.getNfServices().get(0).setAllowedPlmns(allowedPlmns);
			nfProfile.getNfServices().get(1).setServiceName("namf-loc");
			nfProfile.getNfServices().get(1).setAllowedPlmns(allowedPlmns);
			NfInstance nfInstance1 = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance1.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance1.setNfStatus(NFStatus.REGISTERED);
			List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
			nfInstanceList.add(nfInstance1);
			requesterAndTargetNfInstances.add(nfInstance1);
			String nfInstanceId = requesterAndTargetNfInstances.get(0).getNfInstanceId();
			List<String> expectedAudience = new ArrayList<String>();
			expectedAudience.add(nfInstance1.getNfInstanceId());
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(requesterAndTargetNfInstances);
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
			service.setNrfConfigurations(nrfConfigurations);
			
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setNfInstanceId(requesterAndTargetNfInstances.get(0).getNfInstanceId());
			accessTokenReq.setScope("namf-loc namf-mt");
			accessTokenReq.setTargetNfInstanceId(nfProfile.getNfInstanceId());
			accessTokenReq.setRequesterPlmn("{\"mcc\":\"310\",\"mnc\":\"14\"}");
			ObjectMapper om = new ObjectMapper();
			AccessTokenErr response = om.readValue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null).toString(),
													AccessTokenErr.class);
			Assert.assertEquals("RequesterPlmn not allowed to access the requested profile", response.getError_description());
			Assert.assertEquals("invalid_request",response.getError());
			
			double metric_count = 0;
			try {
				metric_count = Metrics.globalRegistry.get("ocnrf.accessToken.tx.rejected")
				.tag("Scope", "namf-loc,namf-mt")
				.tag("RejectionReason", "ConsumerPlmnNotAllowed")
				.tag("HttpStatusCode", "400")
				.counter().count();
			} catch (Exception e) {
				
			}
			Assert.assertEquals(metric_count,expected_metric_count+1,0);
			
			plmn = new Plmn("310", "14");
			allowedPlmns.add(plmn);
			requesterAndTargetNfInstances.remove(nfInstance1);
			nfProfile.setAllowedPlmns(allowedPlmns);
			NfInstance nfInstance2 = new NfInstance(nfProfile, nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance2.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance2.setNfStatus(NFStatus.REGISTERED);
			requesterAndTargetNfInstances.add(nfInstance2);
			accessTokenReq.setTargetNfInstanceId(nfProfile.getNfInstanceId());
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(requesterAndTargetNfInstances);
			Assert.assertTrue(service.generateAccessToken(accessTokenReq,new ForwardingData(),null) instanceof AccessTokenRsp);
			
			// Should not be incremented
			try {
				metric_count = Metrics.globalRegistry.get("ocnrf.accessToken.tx.rejected")
				.tag("Scope", "namf-loc")
				.tag("RejectionReason", "ConsumerPlmnNotAllowed")
				.tag("HttpStatusCode", "400")
				.counter().count();
			} catch (Exception e) {
				
			}
			Assert.assertEquals(metric_count,expected_metric_count+1,0);
		}
		
		public void getMetricsValues()
		{
			// retrieving register metrics
			
			try {
				this.count_dbmetrics_nfAccesstoken_find_nfInstances_200_OK = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
						.tag("dbOperation",FIND).tag("serviceOperation",NF_ACCESSTOKEN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NF_INSTANCES).counter().count();
			} catch (Exception e) {
				this.count_dbmetrics_nfAccesstoken_find_nfInstances_200_OK=0;		
				}
//			try {
//				this.count_dbmetrics_nfAccesstoken_find_nrfSystemOptions_200_OK = (int)Metrics.globalRegistry.get("ocnrf.dbmetrics").tag("method",String.valueOf(RequestMethod.GET))
//						.tag("dbOperation",FIND).tag("serviceOperation",NF_ACCESSTOKEN).tag("HttpStatusCode",String.valueOf((HttpStatus.OK).value())).tag("tableName", NRF_SYSTEMOPTIONS).counter().count();
//			} catch (Exception e) {
//				this.count_dbmetrics_nfAccesstoken_find_nrfSystemOptions_200_OK=0;		
//				}
		
		}
		
		@Test
		public void givenTokenRequest_whenNfInstanceIsNotRegistered_forwardingEnabled_thenReturn_NotReachableError(){
			Counter s = Metrics.globalRegistry.find("ocnrf.forward.accessToken.tx.requests").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").counter();
			double prev_requests = (s != null) ? s.count() : 0;
			Counter t = Metrics.globalRegistry.find("ocnrf.forward.accessToken.rx.responses").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").tag("RejectionReason", "NRFCommunicationFailure").tag("HttpStatusCode","504").counter();
			double prev_responses = (t != null) ? t.count() : 0;
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = null;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e15555";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("nnrf-nfm");
			accessTokenReq.setTargetNfInstanceId(nfInstanceId);
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212979");
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(globalConfig);
			service.setNrfConfigurations(nrfConfigurations);
			
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.ENABLED);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			
			System.out.println(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
			when(nfRepository.findByNfInstanceId(nfInstanceId)).thenReturn(null);
			NfResponseInfo nfResponseInfo = new NfResponseInfo();
			ProblemDetails problemDetails = new ProblemDetails();
			problemDetails.setStatus(HttpStatus.SERVICE_UNAVAILABLE.value());
			nfResponseInfo.setResponse(problemDetails);
			nfResponseInfo.setResponseFromNf(false);
			when(nrfQuerySvc.forwardAccessTokenRequest(any(), any(),any())).thenReturn(nfResponseInfo);
			ForwardingData forwardingData = new ForwardingData();
			forwardingData.setIsForwardingPossible(true);
			b = service.generateAccessToken(accessTokenReq, forwardingData,null);
			ProblemDetails probDetail = (ProblemDetails) b;
			Assert.assertNotNull(b);
			Assert.assertTrue(b instanceof ProblemDetails);
			Assert.assertEquals(probDetail.getTitle(),"NRF not reachable");
			Assert.assertEquals(HttpStatus.valueOf(probDetail.getStatus()), HttpStatus.GATEWAY_TIMEOUT);
			s = Metrics.globalRegistry.find("ocnrf.forward.accessToken.tx.requests").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").counter();
			double prev_response = (s != null) ? s.count() : 0;
			t = Metrics.globalRegistry.find("ocnrf.forward.accessToken.rx.responses").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").tag("RejectionReason", "NRFCommunicationFailure").tag("HttpStatusCode","504").counter();
			double after_responses = (t != null) ? t.count() : 0;
			Assert.assertEquals(prev_response, prev_requests,0.05);
			Assert.assertEquals(after_responses, prev_responses+1,0.05);
		}	
		
		
		@Test
		public void givenTokenRequest_whenNfInstanceIsNotRegistered_forwardingEnabled_thenReturn_EgressGatewayError(){
			Counter s = Metrics.globalRegistry.find("ocnrf.forward.accessToken.tx.requests").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").counter();
			double prev_requests = (s != null) ? s.count() : 0;
			Counter t = Metrics.globalRegistry.find("ocnrf.forward.accessToken.rx.responses").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").tag("HttpStatusCode","500").tag("RejectionReason", "InternalError").counter();
			double prev_responses = (t != null) ? t.count() : 0;
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = null;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e15555";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("nnrf-nfm");
			accessTokenReq.setTargetNfInstanceId(nfInstanceId);
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212979");			
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(globalConfig);
			service.setNrfConfigurations(nrfConfigurations);
			
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.ENABLED);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			
			System.out.println(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
			when(nfRepository.findByNfInstanceId(nfInstanceId)).thenReturn(null);
			NfResponseInfo nfResponseInfo = new NfResponseInfo();
			ProblemDetails problemDetails = new ProblemDetails();
			problemDetails.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
			problemDetails.setTitle("Internal Server Error");
			problemDetails.setCause("Internal Server Error");
			problemDetails.setDetail("Internal Server Error");
			nfResponseInfo.setResponse(problemDetails);
			nfResponseInfo.setResponseFromNf(false);
			when(nrfQuerySvc.forwardAccessTokenRequest(any(), any(),any())).thenReturn(nfResponseInfo);
			ForwardingData forwardingData = new ForwardingData();
			forwardingData.setIsForwardingPossible(true);
			b = service.generateAccessToken(accessTokenReq, forwardingData,null);
			ProblemDetails probDetail = (ProblemDetails) b;
			Assert.assertNotNull(b);
			Assert.assertTrue(b instanceof ProblemDetails);
			Assert.assertEquals(probDetail.getTitle(),"NRF Internal Error.Internal Server Error");
			Assert.assertEquals(HttpStatus.valueOf(probDetail.getStatus()), HttpStatus.INTERNAL_SERVER_ERROR);
			s = Metrics.globalRegistry.find("ocnrf.forward.accessToken.tx.requests").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").counter();
			double prev_response = (s != null) ? s.count() : 0;
			t = Metrics.globalRegistry.find("ocnrf.forward.accessToken.rx.responses").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").tag("HttpStatusCode", "500").tag("RejectionReason", "InternalError").counter();
			double after_responses = (t != null) ? t.count() : 0;
			Assert.assertEquals(prev_response, prev_requests,0.05);
			Assert.assertEquals(after_responses, prev_responses+1,0.05);
		}
		
		@Test
		public void givenTokenRequest_whenNfInstanceIsNotRegistered_forwardingEnabled_thenReturn_ErrorResponse(){
			Counter s = Metrics.globalRegistry.find("ocnrf.forward.accessToken.tx.requests").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").counter();
			double prev_requests = (s != null) ? s.count() : 0;
			Counter t = Metrics.globalRegistry.find("ocnrf.forward.accessToken.rx.responses").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").tag("HttpStatusCode","500").tag("RejectionReason", "ErrorFromNRF").counter();
			double prev_responses = (t != null) ? t.count() : 0;
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = null;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e15555";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("nnrf-nfm");
			accessTokenReq.setTargetNfInstanceId(nfInstanceId);
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212979");
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(globalConfig);
			service.setNrfConfigurations(nrfConfigurations);
			
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.ENABLED);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			
			System.out.println(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
			when(nfRepository.findByNfInstanceId(nfInstanceId)).thenReturn(null);
			NfResponseInfo nfResponseInfo = new NfResponseInfo();
			ProblemDetails problemDetails = new ProblemDetails();
			problemDetails.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
			problemDetails.setTitle("Internal Server Error");
			nfResponseInfo.setResponse(problemDetails);
			nfResponseInfo.setResponseFromNf(true);
			when(nrfQuerySvc.forwardAccessTokenRequest(any(), any(),any())).thenReturn(nfResponseInfo);
			ForwardingData forwardingData = new ForwardingData();
			forwardingData.setIsForwardingPossible(true);
			b = service.generateAccessToken(accessTokenReq, forwardingData,null);
			ProblemDetails probDetail = (ProblemDetails) b;
			Assert.assertNotNull(b);
			Assert.assertTrue(b instanceof ProblemDetails);
			Assert.assertEquals(probDetail.getTitle(), problemDetails.getTitle());
			Assert.assertEquals(HttpStatus.valueOf(probDetail.getStatus()), HttpStatus.INTERNAL_SERVER_ERROR);
			s = Metrics.globalRegistry.find("ocnrf.forward.accessToken.tx.requests").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").counter();
			double prev_response = (s != null) ? s.count() : 0;
			t = Metrics.globalRegistry.find("ocnrf.forward.accessToken.rx.responses").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").tag("HttpStatusCode", "500").tag("RejectionReason", "ErrorFromNRF").counter();
			double after_responses = (t != null) ? t.count() : 0;
			Assert.assertEquals(after_responses, prev_responses+1,0.05);
		}
		
		@Test
		public void givenTokenRequest_whenNfInstanceIsNotRegistered_forwardingEnabled_thenReturn_SuccessResponse(){
			Counter s = Metrics.globalRegistry.find("ocnrf.forward.accessToken.tx.requests").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").counter();
			double prev_requests = (s != null) ? s.count() : 0;
			Counter t = Metrics.globalRegistry.find("ocnrf.forward.accessToken.rx.responses").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").tag("HttpStatusCode","200").tag("RejectionReason", "NotApplicable").counter();
			double prev_responses = (t != null) ? t.count() : 0;
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = null;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e15555";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("nnrf-nfm");
			accessTokenReq.setTargetNfInstanceId(nfInstanceId);
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212979");
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			nrfConfigurations.setGlobalConfig(globalConfig);
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			service.setNrfConfigurations(nrfConfigurations);
			
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.ENABLED);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			
			System.out.println(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
			when(nfRepository.findByNfInstanceId(nfInstanceId)).thenReturn(null);
			NfResponseInfo nfResponseInfo = new NfResponseInfo();
			AccessTokenRsp response = new AccessTokenRsp();
			nfResponseInfo.setResponse(response);
			nfResponseInfo.setResponseFromNf(true);
			when(nrfQuerySvc.forwardAccessTokenRequest(any(), any(),any())).thenReturn(nfResponseInfo);
			ForwardingData forwardingData = new ForwardingData();
			forwardingData.setIsForwardingPossible(true);
			b = service.generateAccessToken(accessTokenReq,forwardingData,null);
			Assert.assertFalse(b instanceof ProblemDetails);
			Assert.assertTrue(b instanceof AccessTokenRsp);
			s = Metrics.globalRegistry.find("ocnrf.forward.accessToken.tx.requests").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").counter();
			double prev_response = (s != null) ? s.count() : 0;
			t = Metrics.globalRegistry.find("ocnrf.forward.accessToken.rx.responses").tag("TargetNfType", "UNKNOWN").tag("RequesterNfType","UNKNOWN").tag("TargetNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("ClientNfInstanceId","6faf1bbc-6e4a-4454-a507-a14ef8e15555").tag("Scope", "nnrf-nfm").tag("HttpStatusCode", "200").tag("RejectionReason", "NotApplicable").counter();
			double after_responses = (t != null) ? t.count() : 0;
			Assert.assertEquals(prev_response, prev_requests,0.05);
			Assert.assertEquals(after_responses, prev_responses+1,0.05);
		}
		
		@Test
		public void givenTokenRequest_whenNfInstanceIsNotRegistered_forwardingEnabled_thenReturnErrorNRFCheck(){
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = null;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e15555";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("nnrf-nfm");
			accessTokenReq.setTargetNfInstanceId(nfInstanceId);
			accessTokenReq.setTargetNfType("nrf");
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212979");
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(globalConfig);
			service.setNrfConfigurations(nrfConfigurations);
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions  = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.ENABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//			when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
			System.out.println(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//			when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
			when(nfRepository.findByNfInstanceId(nfInstanceId)).thenReturn(null);
			NfResponseInfo nfResponseInfo = new NfResponseInfo();
			AccessTokenRsp response = new AccessTokenRsp();
			nfResponseInfo.setResponse(response);
			nfResponseInfo.setResponseFromNf(true);
			when(nrfQuerySvc.forwardAccessTokenRequest(any(), any(),any())).thenReturn(nfResponseInfo);
			b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
			Assert.assertFalse(b instanceof ProblemDetails);
			Assert.assertTrue(b instanceof AccessTokenErr);
		}
		
		@Test
		public void givenTokenRequest_whenNfInstanceIsNotRegistered_forwardingEnabled_thenReturnValidationCheckResponse() throws Exception{
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = null;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e15555";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("nnrf-reg");
			accessTokenReq.setTargetNfInstanceId(nfInstanceId);
			Plmn plmn = new Plmn();
			plmn.setMcc("abc");
			accessTokenReq.setTargetPlmn(plmn.toString());
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
			service.setNrfConfigurations(nrfConfigurations);
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions  = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.ENABLED);
			nrfOptions.getNfAccessTokenSystemOptions().setAuthorizeRequesterNf(AuthorizeRequesterNf.DISABLED);
			
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//			when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
			System.out.println(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//			when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
			when(nfRepository.findByNfInstanceId(nfInstanceId)).thenReturn(null);
			List<NfInstance> nfInstance = new ArrayList<NfInstance>();
			NfInstance nf = new NfInstance();
			nf.setNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e15544");
			nf.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nf.setNfStatus(NFStatus.REGISTERED);
			nfInstance.add(nf);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(nfInstance);
			NfResponseInfo nfResponseInfo = new NfResponseInfo();
			AccessTokenRsp response = new AccessTokenRsp();
			nfResponseInfo.setResponse(response);
			nfResponseInfo.setResponseFromNf(true);
			when(nrfQuerySvc.forwardAccessTokenRequest(any(), any(),any())).thenReturn(nfResponseInfo);
			try {
				b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
			}catch(NrfException e) {
				Assert.assertTrue(e.getProbDetails()!=null);
			}
		}
		
		@Test
		public void givenTokenRequest_whenNfInstanceIsNotRegistered_thenReturnValidationCheckResponses() throws Exception{
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = null;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e15555";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("nnrf-reg");
			accessTokenReq.setTargetNfInstanceId(nfInstanceId);
			accessTokenReq.setTargetNfType("AMF");
			Plmn plmn = new Plmn();
			plmn.setMcc("abc");
			accessTokenReq.setTargetPlmn(plmn.toString());
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			service.setNrfConfigurations(nrfConfigurations);
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions  = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.ENABLED);
			nrfOptions.getNfAccessTokenSystemOptions().setAuthorizeRequesterNf(AuthorizeRequesterNf.DISABLED);
			
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
//			when(nrfSystemOptionsRepository.getOcnrfSystemOptions(any())).thenReturn(nrfSystemOptionsDao);
//			when(nrfSystemOptionsRepository.getOcnrfErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
			System.out.println(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
//			when(nrfSystemOptionsRepository.getOcnrfEnggErrorResponses(any())).thenReturn(TestDataGenerator.generateNrfSystemOptionsDao_engErrorResponses());
			when(nfRepository.findByNfInstanceId(nfInstanceId)).thenReturn(null);
			List<NfInstance> nfInstance = new ArrayList<NfInstance>();
			NfInstance nf = new NfInstance();
			nf.setNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e15544");
			nf.setNfType("UDR");
			nf.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nf.setNfStatus(NFStatus.REGISTERED);
			nfInstance.add(nf);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(nfInstance);
			NfResponseInfo nfResponseInfo = new NfResponseInfo();
			AccessTokenRsp response = new AccessTokenRsp();
			nfResponseInfo.setResponse(response);
			nfResponseInfo.setResponseFromNf(true);
			when(nrfQuerySvc.forwardAccessTokenRequest(any(), any(),any())).thenReturn(nfResponseInfo);
			b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
			Assert.assertTrue(b instanceof AccessTokenErr);		
		}
		
		@Test
		public void givenTokenRequest_whenNfInstanceIsNotRegistered_thenReturnValidationCheckResponses_noNfInstanceIdFound() throws Exception{
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = null;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e15555";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("nnrf-reg");
			accessTokenReq.setTargetNfInstanceId(nfInstanceId);
			accessTokenReq.setTargetNfType("AMF");
			Plmn plmn = new Plmn();
			plmn.setMcc("abc");
			accessTokenReq.setTargetPlmn(plmn.toString());
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212979");
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setGlobalConfig(globalConfig);
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			service.setNrfConfigurations(nrfConfigurations);
			
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.ENABLED);
			nrfSystemOptions.getNfAccessTokenSystemOptions().setAuthorizeRequesterNf(AuthorizeRequesterNf.DISABLED);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			
			System.out.println(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
			when(nfRepository.findByNfInstanceId(nfInstanceId)).thenReturn(null);
			List<NfInstance> nfInstance = new ArrayList<NfInstance>();
			NfResponseInfo nfResponseInfo = new NfResponseInfo();
			AccessTokenRsp response = new AccessTokenRsp();
			nfResponseInfo.setResponse(response);
			nfResponseInfo.setResponseFromNf(true);
			when(nrfQuerySvc.forwardAccessTokenRequest(any(), any(),any())).thenReturn(nfResponseInfo);
			//new ForwardingData() = true;
			b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
			Assert.assertTrue(b instanceof AccessTokenErr);		
			AccessTokenErr error = (AccessTokenErr) b;
			Assert.assertEquals(error.getError_description(), "No NfInstance found with the requested targetNfInstanceId");
		}
		
		
		@Test
		public void givenDetermineScopeAndAudienceForOR() throws Exception{
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = null;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e15555";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("nnrf-reg");
			accessTokenReq.setTargetNfType("AMF");
			List<String> list = new ArrayList<String>();
			accessTokenReq.setTargetNsiList(list.toString());
			Plmn plmn = new Plmn();
			plmn.setMcc("abc");
			accessTokenReq.setTargetPlmn(plmn.toString());
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212979");
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			nrfConfigurations.setGlobalConfig(globalConfig);
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			service.setNrfConfigurations(nrfConfigurations);
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.ENABLED);
			nrfSystemOptions.getNfAccessTokenSystemOptions().setAuthorizeRequesterNf(AuthorizeRequesterNf.DISABLED);
			nrfSystemOptions.getNfAccessTokenSystemOptions().setLogicalOperatorForScope(LogicalOperatorForScope.OR);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			
			System.out.println(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
			when(nfRepository.findByNfInstanceId(nfInstanceId)).thenReturn(null);
			List<NfInstance> nfInstance = new ArrayList<NfInstance>();
			NfResponseInfo nfResponseInfo = new NfResponseInfo();
			AccessTokenRsp response = new AccessTokenRsp();
			nfResponseInfo.setResponse(response);
			nfResponseInfo.setResponseFromNf(true);
			when(nrfQuerySvc.forwardAccessTokenRequest(any(), any(),any())).thenReturn(nfResponseInfo);
			//new ForwardingData() = true;
			NfInstance nf = new NfInstance();
			nf.setNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e15544");
			nf.setNfType("UDR");
			nf.setNfStatus(NFStatus.REGISTERED);
			nf.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			NfProfile profile = TestDataGenerator.generateNF("UDR");
			
			List<VersionedJsonDoc> listVersionDoc = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			List<VersionedJsonDoc> list1 = new ArrayList<>();
			versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(profile.toString());
			list1.add(versionJsonDoc);
			
			versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list1);
			nf.setNfProfileJsonDocList(versionJsonDocList.toString());

			nfInstance.add(nf);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(nfInstance);
			when(nfRepository.filterProfiles(any())).thenReturn(nfInstance);
			//new ForwardingData() = true;
			b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
			Assert.assertTrue(b instanceof AccessTokenRsp);		
		}
		
		@Test
		public void givenDetermineScopeAndAudienceForOR_emptyNfInstanceList() throws Exception{
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			Object b = null;
			String nfInstanceId = "6faf1bbc-6e4a-4454-a507-a14ef8e15555";
			accessTokenReq.setNfInstanceId(nfInstanceId);
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("namf-reg");
			accessTokenReq.setTargetNfType("AMF");
			List<String> list = new ArrayList<String>();
			accessTokenReq.setTargetNsiList(list.toString());
			accessTokenReq.setTargetSnssaiList(list.toString());
			Plmn plmn = new Plmn();
			plmn.setMcc("abc");
			accessTokenReq.setTargetPlmn(plmn.toString());
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212979");
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			nrfConfigurations.setGlobalConfig(globalConfig);
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			service.setNrfConfigurations(nrfConfigurations);
			
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.ENABLED);
			nrfSystemOptions.getNfAccessTokenSystemOptions().setAuthorizeRequesterNf(AuthorizeRequesterNf.DISABLED);
			nrfSystemOptions.getNfAccessTokenSystemOptions().setLogicalOperatorForScope(LogicalOperatorForScope.OR);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			System.out.println(TestDataGenerator.generateNrfSystemOptionsDao_errorResponses());
			when(nfRepository.findByNfInstanceId(nfInstanceId)).thenReturn(null);
			List<NfInstance> nfInstance = new ArrayList<NfInstance>();
			NfResponseInfo nfResponseInfo = new NfResponseInfo();
			AccessTokenRsp response = new AccessTokenRsp();
			nfResponseInfo.setResponse(response);
			nfResponseInfo.setResponseFromNf(true);
			when(nrfQuerySvc.forwardAccessTokenRequest(any(),any(),any())).thenReturn(nfResponseInfo);
			//new ForwardingData() = true;
			NfInstance nf = new NfInstance();
			nf.setNfInstanceId("6faf1bbc-6e4a-4454-a507-a14ef8e15544");
			nf.setNfType("UDR");
			nf.setNfStatus(NFStatus.REGISTERED);
			nf.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			NfProfile profile = TestDataGenerator.generateNF("UDR");
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			List<VersionedJsonDoc> list1 = new ArrayList<>();
			versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(profile.toString());
			list1.add(versionJsonDoc);
			
			versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list1);
			nf.setNfProfileJsonDocList(versionJsonDocList.toString());
			nfInstance.add(nf);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(nfInstance);
			when(nfRepository.filterProfiles(any())).thenReturn(nfInstance);
			//new ForwardingData() = true;
			b = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
			Assert.assertTrue(b instanceof AccessTokenRsp);		
		}
		
		@Test
		public void testValidateAuthorizeNf() {
			//Verifying the NF Authorization
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getNfAccessTokenSystemOptions().setLogicalOperatorForScope(LogicalOperatorForScope.AND);
			List<AuthConfig> authConfig = new ArrayList<AuthConfig>();
			AuthConfig authcfg = new AuthConfig();
			authcfg.setRequesterNfType("PCF");
			authcfg.setTargetNfType("AMF");
			List<String> allowedServices = new ArrayList<String>();
			allowedServices.add("namf-mt");
			allowedServices.add("namf-loc");
			//Setting two allowed services
			authcfg.setServiceNames(allowedServices);
			authConfig.add(authcfg);
			nrfSystemOptions.getNfAccessTokenSystemOptions().getAuthFeatureConfig().setAuthConfig(authConfig);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			Set<String> requestedScope = new HashSet<String>();
			requestedScope.add("namf-mt");
			requestedScope.add("namf-loc");
			requestedScope.add("namf-comm");
			//Sending scope which is not configured, hence not authorized
			Assert.assertEquals(service.authorizeNf(requestedScope, "PCF", "AMF"),null);
			requestedScope.remove("namf-comm");
			//Sending scope which is configured, hence authorized
			Assert.assertEquals(service.authorizeNf(requestedScope, "PCF", "AMF"),"namf-mt namf-loc");
			requestedScope.remove("namf-mt");
			//Sending scope which is configured, hence authorized
			Assert.assertEquals(service.authorizeNf(requestedScope, "PCF", "AMF"),"namf-loc");
			requestedScope.add("namf-comm");
			//Sending scope which is not configured, hence not authorized
			Assert.assertEquals(service.authorizeNf(requestedScope, "PCF", "AMF"),null);
			Assert.assertEquals(service.authorizeNf(requestedScope, "PCF", "CHF"),null);
			Assert.assertEquals(service.authorizeNf(requestedScope, "AMF", "CHF"),null);
			Assert.assertEquals(service.authorizeNf(requestedScope, "PCF", "CUSTOM_CHF"),null);
			nrfSystemOptions.getNfAccessTokenSystemOptions().setLogicalOperatorForScope(LogicalOperatorForScope.OR);
			//Setting logicalOperator to OR
			Assert.assertEquals(service.authorizeNf(requestedScope, "PCF", "AMF"),"namf-loc");
			requestedScope.add("namf-loc");
			//Receiving scope which is only authorized
			Assert.assertEquals(service.authorizeNf(requestedScope, "PCF", "AMF"),"namf-loc");
			requestedScope.remove("namf-loc");
			//Sending scope which is not configured hence rejected
			Assert.assertEquals(service.authorizeNf(requestedScope, "PCF", "AMF"),null);
			Assert.assertEquals(service.authorizeNf(requestedScope, "PCF", "CHF"),null);
			Assert.assertEquals(service.authorizeNf(requestedScope, "UDM", "AMF"),null);
		}
		
		@Test
		public void testAccessToken_Forwarded_RequesterNfType() throws IOException {
			//Test to verify scope and Audience for logicalOperator for OR
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
			service.setNrfConfigurations(nrfConfigurations);
			List<NfInstance> nfInstances = new ArrayList<NfInstance>();
			NfProfile nfProfile1 = TestDataGenerator.generateNF("PCF");
			nfProfile1.getNfServices().get(0).setServiceName("npcf-bdtpolicycontrol");
			nfProfile1.getNfServices().get(1).setServiceName("npcf-eventexposure");
			NfInstance nfInstance1 = new NfInstance(nfProfile1, nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance1.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance1.setNfStatus(NFStatus.REGISTERED);
			nfInstances.add(nfInstance1);
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			accessTokenReq.setNfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212979");
			accessTokenReq.setTargetNfInstanceId(nfInstance1.getNfInstanceId());
			//Setting scope which has one service configured and other not configured 
			accessTokenReq.setScope("npcf-policyauthorization npcf-bdtpolicycontrol");
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			List<AuthConfig> authConfig = new ArrayList<AuthConfig>();
			AuthConfig authcfg = new AuthConfig();
			authcfg.setRequesterNfType("AMF");
			authcfg.setTargetNfType("PCF");
			List<String> allowedServices = new ArrayList<String>();
			allowedServices.add("npcf-bdtpolicycontrol");
			allowedServices.add("npcf-eventexposure");
			authcfg.setServiceNames(allowedServices);
			authConfig.add(authcfg);
			nrfSystemOptions.getNfAccessTokenSystemOptions().getAuthFeatureConfig().setAuthConfig(authConfig);
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getNfAccessTokenSystemOptions().getAuthFeatureConfig().setAuthFeatureStatus(FeatureStatus.ENABLED);
			nrfSystemOptions.getNfAccessTokenSystemOptions().setLogicalOperatorForScope(LogicalOperatorForScope.OR);
			List<ErrorInfo> errorInfo = new ArrayList<ErrorInfo>();
			ErrorInfo errInfo = new ErrorInfo();
			errInfo.setErrorCondition(ErrorCondition.RequesterNf_Unauthorized);
			errInfo.setErrorResponse("Unauthorised NF");
			errInfo.setErrorCode(404);
			errInfo.setRetryAfter(Duration.ofSeconds(5));
			errorInfo.add(errInfo);
			nrfSystemOptions.getNfAccessTokenSystemOptions().getAuthFeatureConfig().setAuthErrorResponses(errorInfo);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(nfInstances);
			ForwardingData forwardingData = new ForwardingData();
			List<String> forwardedFrom = new ArrayList<String>();
			forwardedFrom.add("10.75.225");
			forwardingData.setForwardedFrom(forwardedFrom);
			Object object = service.generateAccessToken(accessTokenReq, forwardingData,"AMF");
			Assert.assertTrue(object instanceof AccessTokenRsp);
			AccessTokenRsp accessTokenRsp = (AccessTokenRsp) object;
			//Verifying that scope returned consists of one configured scope
			Assert.assertEquals(accessTokenRsp.getScope(),"npcf-bdtpolicycontrol");
			object = service.generateAccessToken(accessTokenReq, forwardingData,"NRF");
			Assert.assertTrue(object instanceof GenericResponse);
		}
		
		@Test
		public void testAccessToken_Forwarded_RequesterNfType_TargetNfInstance_Not_Registered() throws IOException {
			//Test to verify scope and Audience for logicalOperator for OR
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
			service.setNrfConfigurations(nrfConfigurations);
			List<NfInstance> nfInstances = new ArrayList<NfInstance>();
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			accessTokenReq.setNfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212979");
			accessTokenReq.setTargetNfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212939");
			//Setting scope which has one service configured and other not configured 
			accessTokenReq.setScope("npcf-policyauthorization npcf-bdtpolicycontrol");
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			List<AuthConfig> authConfig = new ArrayList<AuthConfig>();
			AuthConfig authcfg = new AuthConfig();
			authcfg.setRequesterNfType("AMF");
			authcfg.setTargetNfType("PCF");
			List<String> allowedServices = new ArrayList<String>();
			allowedServices.add("npcf-bdtpolicycontrol");
			allowedServices.add("npcf-eventexposure");
			authcfg.setServiceNames(allowedServices);
			authConfig.add(authcfg);
			nrfSystemOptions.getNfAccessTokenSystemOptions().getAuthFeatureConfig().setAuthConfig(authConfig);
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getNfAccessTokenSystemOptions().getAuthFeatureConfig().setAuthFeatureStatus(FeatureStatus.ENABLED);
			nrfSystemOptions.getNfAccessTokenSystemOptions().setLogicalOperatorForScope(LogicalOperatorForScope.OR);
			List<ErrorInfo> errorInfo = new ArrayList<ErrorInfo>();
			ErrorInfo errInfo = new ErrorInfo();
			errInfo.setErrorCondition(ErrorCondition.RequesterNf_Unauthorized);
			errInfo.setErrorResponse("Unauthorised NF");
			errInfo.setErrorCode(404);
			errInfo.setRetryAfter(Duration.ofSeconds(5));
			errorInfo.add(errInfo);
			nrfSystemOptions.getNfAccessTokenSystemOptions().getAuthFeatureConfig().setAuthErrorResponses(errorInfo);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(nfInstances);
			ForwardingData forwardingData = new ForwardingData();
			List<String> forwardedFrom = new ArrayList<String>();
			forwardedFrom.add("10.75.225");
			forwardingData.setForwardedFrom(forwardedFrom);
			Object object = service.generateAccessToken(accessTokenReq, forwardingData,"AMF");
			Assert.assertTrue(object instanceof AccessTokenErr);
		}
		
		@Test
		public void testValidateScopeAndAudienceForOR() throws IOException{
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
			service.setNrfConfigurations(nrfConfigurations);
			
			List<NfInstance> nfInstances = new ArrayList<NfInstance>();
			NfProfile nfProfile1 = TestDataGenerator.generateNF("PCF");
			nfProfile1.getNfServices().get(0).setServiceName("npcf-bdtpolicycontrol");
			nfProfile1.getNfServices().get(1).setServiceName("npcf-eventexposure");
			NfInstance nfInstance1 = new NfInstance(nfProfile1, nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance1.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance1.setNfStatus(NFStatus.REGISTERED);
			NfProfile nfProfile2 = TestDataGenerator.generateNF("AMF");
			NfInstance nfInstance2 = new NfInstance(nfProfile2, nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance2.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance2.setNfStatus(NFStatus.REGISTERED);
			nfInstances.add(nfInstance1);
			nfInstances.add(nfInstance2);
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			accessTokenReq.setNfType("AMF");
			accessTokenReq.setNfInstanceId(nfInstance2.getNfInstanceId());
			accessTokenReq.setTargetNfInstanceId(nfInstance1.getNfInstanceId());
			accessTokenReq.setScope("npcf-bdtpolicycontrol");
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getNfAccessTokenSystemOptions().getAuthFeatureConfig().setAuthFeatureStatus(FeatureStatus.DISABLED);
			nrfSystemOptions.getNfAccessTokenSystemOptions().setLogicalOperatorForScope(LogicalOperatorForScope.OR);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(nfInstances);
			Object object = service.generateAccessToken(accessTokenReq, new ForwardingData(),null);
			Assert.assertTrue(object instanceof AccessTokenRsp);
			
			double metric_count = 0;
			try {
				metric_count = Metrics.globalRegistry.get("ocnrf.accessToken.tx.rejected")
					.tag("Scope", "npcf-policyauthorization")
					.tag("RejectionReason", "ConsumerNfTypeNotAllowed")
					.counter().count();
			} catch( Exception e) {
				
			}
			AccessTokenRsp accessTokenRsp = (AccessTokenRsp) object;
			accessTokenReq.setScope("npcf-policyauthorization");
			object = service.generateAccessToken(accessTokenReq, new ForwardingData(),null);
			Assert.assertTrue(object instanceof AccessTokenErr);
			AccessTokenErr accessTokenErr = (AccessTokenErr) object;
			Assert.assertTrue(accessTokenErr.getError_description().equals("No NFs found for the requested scope"));
			double expeced_metric_count = 0;
			try {
				expeced_metric_count = Metrics.globalRegistry.get("ocnrf.accessToken.tx.rejected")
					.tag("Scope", "npcf-policyauthorization")
					.tag("RejectionReason", "ProducerWithRequestedScopeNotFound")
					.counter().count();
			} catch( Exception e) {
				
			}
			Assert.assertEquals(expeced_metric_count, metric_count+1,0);
		}
		
		@Test
		public void testValidateScopeAndAudienceForOR_Authorized() throws IOException{
			//Test to verify scope and Audience for logicalOperator for OR
		
			double initial_rejected = 0;
			
			
			try {
				initial_rejected = Metrics.globalRegistry.get("ocnrf.accessToken.tx.rejected")
						.tag("Scope", "npcf-policyauthorization,npcf-bdtpolicycontrol")
						.tag("RejectionReason", "AuthScreeningFailed")
						.counter().count();
				
				}catch (Exception e) {
					
				}
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
			service.setNrfConfigurations(nrfConfigurations);
			List<NfInstance> nfInstances = new ArrayList<NfInstance>();
			NfProfile nfProfile1 = TestDataGenerator.generateNF("PCF");
			nfProfile1.getNfServices().get(0).setServiceName("npcf-bdtpolicycontrol");
			nfProfile1.getNfServices().get(1).setServiceName("npcf-eventexposure");
			NfInstance nfInstance1 = new NfInstance(nfProfile1, nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance1.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance1.setNfStatus(NFStatus.REGISTERED);
			NfProfile nfProfile2 = TestDataGenerator.generateNF("AMF");
			NfInstance nfInstance2 = new NfInstance(nfProfile2, nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance2.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance2.setNfStatus(NFStatus.REGISTERED);
			nfInstances.add(nfInstance1);
			nfInstances.add(nfInstance2);
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			accessTokenReq.setNfType("AMF");
			accessTokenReq.setNfInstanceId(nfInstance2.getNfInstanceId());
			accessTokenReq.setTargetNfInstanceId(nfInstance1.getNfInstanceId());
			//Setting scope which has one service configured and other not configured 
			accessTokenReq.setScope("npcf-policyauthorization npcf-bdtpolicycontrol");
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			List<AuthConfig> authConfig = new ArrayList<AuthConfig>();
			AuthConfig authcfg = new AuthConfig();
			authcfg.setRequesterNfType("AMF");
			authcfg.setTargetNfType("PCF");
			List<String> allowedServices = new ArrayList<String>();
			allowedServices.add("npcf-bdtpolicycontrol");
			allowedServices.add("npcf-eventexposure");
			authcfg.setServiceNames(allowedServices);
			authConfig.add(authcfg);
			nrfSystemOptions.getNfAccessTokenSystemOptions().getAuthFeatureConfig().setAuthConfig(authConfig);
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getNfAccessTokenSystemOptions().getAuthFeatureConfig().setAuthFeatureStatus(FeatureStatus.ENABLED);
			nrfSystemOptions.getNfAccessTokenSystemOptions().setLogicalOperatorForScope(LogicalOperatorForScope.OR);
			List<ErrorInfo> errorInfo = new ArrayList<ErrorInfo>();
			ErrorInfo errInfo = new ErrorInfo();
			errInfo.setErrorCondition(ErrorCondition.RequesterNf_Unauthorized);
			errInfo.setErrorResponse("Unauthorised NF");
			errInfo.setErrorCode(404);
			errInfo.setRetryAfter(Duration.ofSeconds(5));
			errorInfo.add(errInfo);
			nrfSystemOptions.getNfAccessTokenSystemOptions().getAuthFeatureConfig().setAuthErrorResponses(errorInfo);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(nfInstances);
			Object object = service.generateAccessToken(accessTokenReq, new ForwardingData(),null);
			Assert.assertTrue(object instanceof AccessTokenRsp);
			AccessTokenRsp accessTokenRsp = (AccessTokenRsp) object;
			//Verifying that scope returned consists of one configured scope
			Assert.assertEquals(accessTokenRsp.getScope(),"npcf-bdtpolicycontrol");
			
			accessTokenReq.setScope("npcf-policyauthorization");
			//Setting scope which is not configured
			object = service.generateAccessToken(accessTokenReq, new ForwardingData(),null);
			Assert.assertTrue(object instanceof GenericResponse);
			GenericResponse genericResponse = (GenericResponse)object;
			Assert.assertTrue(genericResponse.getResponse() instanceof ProblemDetails);
			//Verifying that ProblemDetails is returned
			ProblemDetails problemDetails = (ProblemDetails)genericResponse.getResponse();
			Assert.assertEquals(problemDetails.getStatus().longValue(), 404);
			Assert.assertEquals(problemDetails.getTitle(), "Unauthorised NF");
			Assert.assertTrue(genericResponse.getHeaders().containsKey(HttpHeaders.RETRY_AFTER));
			Assert.assertEquals(genericResponse.getHeaders().getFirst((HttpHeaders.RETRY_AFTER)),"5");
			Assert.assertEquals(initial_rejected + 1,Metrics.globalRegistry.get("ocnrf.accessToken.tx.rejected")
					.tag("Scope", "npcf-policyauthorization")
					.tag("RejectionReason", "AuthScreeningFailed")
					.counter().count(),0);
			errInfo.setErrorCode(400);
			nrfSystemOptions.getNfAccessTokenSystemOptions().getAuthFeatureConfig().setAuthErrorResponses(errorInfo);
			object = service.generateAccessToken(accessTokenReq, new ForwardingData(),null);
			Assert.assertTrue(object instanceof AccessTokenErr);
		}
		
		@Test
		public void testValidateScopeAndAudienceForAND_Authorized() throws IOException{
			//Test to verify scope and Audience for logicalOperator for AND
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(this.nrfConfig.getGlobalConfig());
			service.setNrfConfigurations(nrfConfigurations);
			List<NfInstance> nfInstances = new ArrayList<NfInstance>();
			NfProfile nfProfile1 = TestDataGenerator.generateNF("PCF");
			nfProfile1.getNfServices().get(0).setServiceName("npcf-bdtpolicycontrol");
			nfProfile1.getNfServices().get(1).setServiceName("npcf-eventexposure");
			NfInstance nfInstance1 = new NfInstance(nfProfile1, nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance1.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance1.setNfStatus(NFStatus.REGISTERED);
			NfProfile nfProfile2 = TestDataGenerator.generateNF("AMF");
			NfInstance nfInstance2 = new NfInstance(nfProfile2, nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance2.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance2.setNfStatus(NFStatus.REGISTERED);
			nfInstances.add(nfInstance1);
			nfInstances.add(nfInstance2);
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			accessTokenReq.setNfType("AMF");
			accessTokenReq.setNfInstanceId(nfInstance2.getNfInstanceId());
			accessTokenReq.setTargetNfInstanceId(nfInstance1.getNfInstanceId());
			//Setting scope which is configured, so that token can be issued
			accessTokenReq.setScope("npcf-bdtpolicycontrol");
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			List<AuthConfig> authConfig = new ArrayList<AuthConfig>();
			AuthConfig authcfg = new AuthConfig();
			authcfg.setRequesterNfType("AMF");
			authcfg.setTargetNfType("PCF");
			List<String> allowedServices = new ArrayList<String>();
			allowedServices.add("npcf-bdtpolicycontrol");
			allowedServices.add("npcf-eventexposure");
			authcfg.setServiceNames(allowedServices);
			authConfig.add(authcfg);
			nrfSystemOptions.getNfAccessTokenSystemOptions().getAuthFeatureConfig().setAuthConfig(authConfig);
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getNfAccessTokenSystemOptions().getAuthFeatureConfig().setAuthFeatureStatus(FeatureStatus.ENABLED);
			nrfSystemOptions.getNfAccessTokenSystemOptions().setLogicalOperatorForScope(LogicalOperatorForScope.AND);
			List<ErrorInfo> errorInfo = new ArrayList<ErrorInfo>();
			ErrorInfo errInfo = new ErrorInfo();
			errInfo.setErrorCondition(ErrorCondition.RequesterNf_Unauthorized);
			errInfo.setErrorResponse("Unauthorised NF");
			errInfo.setErrorCode(404);
			errInfo.setRetryAfter(Duration.ofSeconds(5));
			errorInfo.add(errInfo);
			nrfSystemOptions.getNfAccessTokenSystemOptions().getAuthFeatureConfig().setAuthErrorResponses(errorInfo);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(nfInstances);
			System.out.println(nrfSystemOptions);
			Object object = service.generateAccessToken(accessTokenReq, new ForwardingData(),null);
			Assert.assertTrue(object instanceof AccessTokenRsp);
			AccessTokenRsp accessTokenRsp = (AccessTokenRsp) object;
			Assert.assertEquals(accessTokenRsp.getScope(),null);
			accessTokenReq.setTargetNfType("PCF");
			accessTokenReq.setTargetNfInstanceId("");
			object = service.generateAccessToken(accessTokenReq, new ForwardingData(),null);
			Assert.assertTrue(object instanceof AccessTokenRsp);
			accessTokenRsp = (AccessTokenRsp) object;
			//Verifying that scope returned is null since it hasn't changed
			Assert.assertEquals(accessTokenRsp.getScope(),null);
			accessTokenReq.setScope("npcf-policyauthorization");
			//Setting scope which is not configured, so that token can't be issued
			object = service.generateAccessToken(accessTokenReq, new ForwardingData(),null);
			Assert.assertTrue(object instanceof GenericResponse);
			GenericResponse genericResponse = (GenericResponse)object;
			Assert.assertTrue(genericResponse.getResponse() instanceof ProblemDetails);
			ProblemDetails problemDetails = (ProblemDetails)genericResponse.getResponse();
			//Verifying that problemDetails is returned
			Assert.assertEquals(problemDetails.getStatus().longValue(), 404);
			Assert.assertEquals(problemDetails.getTitle(), "Unauthorised NF");
			Assert.assertTrue(genericResponse.getHeaders().containsKey(HttpHeaders.RETRY_AFTER));
			Assert.assertEquals(genericResponse.getHeaders().getFirst((HttpHeaders.RETRY_AFTER)),"5");
			accessTokenReq.setScope("npcf-policyauthorization npcf-bdtpolicycontrol");
			//Setting scope which has one service configured and other not configured, so that token can't be issued
			object = service.generateAccessToken(accessTokenReq, new ForwardingData(),null);
			Assert.assertTrue(object instanceof GenericResponse);
			genericResponse = (GenericResponse)object;
			//Verifying that problemDetails is returned
			Assert.assertTrue(genericResponse.getResponse() instanceof ProblemDetails);
			problemDetails = (ProblemDetails)genericResponse.getResponse();
			Assert.assertEquals(problemDetails.getStatus().longValue(), 404);
			Assert.assertEquals(problemDetails.getTitle(), "Unauthorised NF");
			Assert.assertTrue(genericResponse.getHeaders().containsKey(HttpHeaders.RETRY_AFTER));
			Assert.assertEquals(genericResponse.getHeaders().getFirst((HttpHeaders.RETRY_AFTER)),"5");
		}
		
		@Test
		public void testValidateAccessTokenReq_returnsSuccessResponse() throws IOException {
			service.setNrfConfigurations(this.nrfConfig);
			List<NfInstance> nfInstances = new ArrayList<NfInstance>();
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setScope("namf-mt");
			NfProfile nfProfile1 = TestDataGenerator.generateNF("PCF");
			NfInstance nfInstance1 = new NfInstance(nfProfile1,this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance1.setLastUpdateTimestamp(new Date());
			nfInstance1.setNfInstanceId(nfProfile1.getNfInstanceId());
			nfInstance1.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			accessTokenReq.setTargetNfInstanceId(nfProfile1.getNfInstanceId());
			nfInstances.add(nfInstance1);
			NfProfile nfProfile2 = TestDataGenerator.generateNF("AMF");
			NfInstance nfInstance2 = new NfInstance(nfProfile2,"6faf1bbc-6e4a-4454-a507-a14ef8e1bc5d");
			nfInstance2.setNfInstanceId(nfProfile2.getNfInstanceId());
			nfInstance2.setRecordOwner("6faf1bbc-6e4a-4454-a507-a14ef8e1bc5d");
			nfInstance2.setLastUpdateTimestamp(new Date());
			nfInstances.add(nfInstance2);
			accessTokenReq.setNfInstanceId(nfProfile2.getNfInstanceId());
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(nfInstances);
			
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getNfAccessTokenSystemOptions().setAuthorizeRequesterNf(AuthorizeRequesterNf.DISABLED);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			
			GenericResponse response = service.validateAccessTokenReq(accessTokenReq,"AMF",nfInstance1,nfInstance2);
			Assert.assertTrue(response.getResponse() instanceof NfInstance);
		}
				
		public NfInstance modifyVersionSpecificNfInstanceData(String version,NfInstance nfDao,String profile) throws JsonMappingException, JsonProcessingException {
			
			/*
			 * This function is used to modify the doc parameter for a particular
			 * version in nfProfileJsonDocList with new profile data received
			 */	
			System.out.println("inside");
			System.out.println(nfDao.getNfProfileJsonDocList());
			VersionedJsonDocList versionJsonDocList = new ObjectMapper().readValue(nfDao.getNfProfileJsonDocList(), VersionedJsonDocList.class);
			List<VersionedJsonDoc> list = versionJsonDocList.getVersionedJsonDocList();
			Iterator<VersionedJsonDoc> iterator = list.iterator();
			VersionedJsonDoc jsonDoc;
			while(iterator.hasNext()) {
				jsonDoc = iterator.next();
				if(jsonDoc.getVersion().equals(version)) {
					jsonDoc.setDoc(profile);
				}
			}
			versionJsonDocList.setVersionedJsonDocList(list);
			nfDao.setNfProfileJsonDocList(versionJsonDocList.toString());
			return nfDao;
		}
		
		@Test
		public void testPerformNfAuthenticationUsingFqdn_whenNoNfInstanceFound_1() throws IOException {
			service.setNrfConfigurations(this.nrfConfig);
			//Remote records not considered when replication off
			List<NfInstance> nfInstances = new ArrayList<NfInstance>();
			NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
			NfInstance nfInstance = new NfInstance(nfProfile,"e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nfInstance.setLastUpdateTimestamp(new Date());
			nfInstance.setNfInstanceId(nfProfile.getNfInstanceId());
			nfInstance.setRecordOwner("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nfInstances.add(nfInstance);
			ProblemDetails problemDetails = new ProblemDetails();
			problemDetails.setStatus(401);
			problemDetails.setCause("Could not find nfInstance");
			problemDetails.setDetail("Failed to authenticate NF using FQDN");
			problemDetails.setTitle("Failed to authenticate NF using FQDN");
			AccessTokenReq accessTokenReq = new AccessTokenReq(); 
			accessTokenReq.setNfInstanceId(nfProfile.getNfInstanceId());
			GenericResponse genericResponse = new GenericResponse();
			genericResponse.setResponse(problemDetails);
			ReplicationStatus.setReplicationStatus(false);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(nfInstances);
			List<NfInstance> nfInstancesList = service.fetchNfInstances(accessTokenReq);
			verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
			List<LogEvent> loggingEvent1 = captorLoggingEvent.getAllValues();
			List<String> logs1 = new ArrayList<String>();
			for(LogEvent logEvt:loggingEvent1) {
				logs1.add(logEvt.getMessage().getFormattedMessage());
			}
			Assert.assertTrue(logs1.toString().contains("Replication is inactive, returning own records only"));
			Assert.assertTrue(nfInstancesList.isEmpty());			
		}
		
		@Test
		public void testPerformNfAuthenticationUsingFqdn_whenNoNfInstanceFound_2() throws IOException {
			service.setNrfConfigurations(this.nrfConfig);
			//No records found for given nfInstanceId
			List<NfInstance> nfInstances = new ArrayList<NfInstance>();
			NfProfile nfProfile = TestDataGenerator.generateNF("PCF");
			NfInstance nfInstance = new NfInstance(nfProfile,this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstance.setLastUpdateTimestamp(new Date());
			nfInstance.setNfInstanceId(nfProfile.getNfInstanceId());
			nfInstance.setRecordOwner(this.nrfConfig.getGlobalConfig().getNrfInstanceId());
			nfInstances.add(nfInstance);
			ProblemDetails problemDetails = new ProblemDetails();
			problemDetails.setStatus(401);
			problemDetails.setCause("Could not find nfInstance");
			problemDetails.setDetail("Failed to authenticate NF using FQDN");
			problemDetails.setTitle("Failed to authenticate NF using FQDN");
			GenericResponse genericResponse = new GenericResponse();
			genericResponse.setResponse(problemDetails);
			AccessTokenReq accessTokenReq = new AccessTokenReq(); 
			accessTokenReq.setNfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(null);
			List<NfInstance> nfInstancesList = service.fetchNfInstances(accessTokenReq);
			Assert.assertTrue(nfInstancesList.isEmpty());
		}
		
		@Test
		public void testPerformNfAuthenticationUsingFqdn_whenFeatureDisabled() throws Exception {
			//FQDN authentication should not be performed when accessTokenAuthenticationStatus is DISABLED
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(globalConfig);
			service.setNrfConfigurations(nrfConfigurations);
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
			NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
			nfProfile.getNfServices().get(0).setServiceName("namf-evts");
			nfProfile.getNfServices().remove(1);
			NfInstance nfInstance = new NfInstance(nfProfile, nrfConfigurations.getGlobalConfig().getNrfInstanceId());
			List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
			nfInstanceList.add(nfInstance);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(nfInstanceList);
			when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setNfInstanceId(nfInstance.getNfInstanceId());
			accessTokenReq.setScope("namf-evts");
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getNfAccessTokenSystemOptions().setAuthorizeRequesterNf(AuthorizeRequesterNf.DISABLED);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			Object accessTokenRsp = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
			Assert.assertNotNull(accessTokenRsp);	
			Assert.assertTrue(accessTokenRsp instanceof AccessTokenRsp);
			verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
			List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
			List<String> logs = new ArrayList<String>();
			for(LogEvent logEvt:loggingEvent) {
				logs.add(logEvt.getMessage().getFormattedMessage());
			}
			Assert.assertFalse(logs.toString().contains("Attempting to perform NF Authentication using FQDN"));
		}
		
		@Test
		public void testPerformNfAuthenticationUsingFqdn_success_whenFeatureEnabled() throws Exception {
			//FQDN authentication should be performed when accessTokenAuthenticationStatus is ENABLED
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(globalConfig);
			service.setNrfConfigurations(nrfConfigurations);
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			nrfOptions.getNfAuthenticationSystemOptions().setAccessTokenAuthenticationStatus(FeatureStatus.ENABLED);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
			NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
			nfProfile.getNfServices().get(0).setServiceName("namf-evts");
			nfProfile.getNfServices().remove(1);
			NfInstance nfInstance = new NfInstance(nfProfile, nrfConfigurations.getGlobalConfig().getNrfInstanceId());
			List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
			nfInstanceList.add(nfInstance);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(nfInstanceList);
			when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setNfInstanceId(nfInstance.getNfInstanceId());
			accessTokenReq.setScope("namf-evts");
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getNfAccessTokenSystemOptions().setAuthorizeRequesterNf(AuthorizeRequesterNf.DISABLED);
			nrfSystemOptions.getNfAuthenticationSystemOptions().setAccessTokenAuthenticationStatus(FeatureStatus.ENABLED);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			when(validationHelper.parseOcXfccDnsHeader()).thenReturn("PCF.d5g.oracle.com");
			GenericResponse genericResponse = new GenericResponse();
			genericResponse.setResponse("Success");
			when(validationHelper.performNfAuthenticationBasedOnNfInstance(nfInstance)).thenReturn(genericResponse);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(nfInstanceList);
			Object accessTokenRsp = service.generateAccessToken(accessTokenReq,new ForwardingData(),null);
			Assert.assertNotNull(accessTokenRsp);	
			Assert.assertTrue(accessTokenRsp instanceof AccessTokenRsp);
			verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
			List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
			List<String> logs = new ArrayList<String>();
			for(LogEvent logEvt:loggingEvent) {
				logs.add(logEvt.getMessage().getFormattedMessage());
			}
			Assert.assertTrue(logs.toString().contains("Attempting to perform NF Authentication using FQDN"));
			Assert.assertTrue(logs.toString().contains("NF Authentication using FQDN was successful"));
		}
		
		@Test
		public void testPerformNfAuthenticationUsingFqdn_failure_whenFeatureEnabled_returnsProblemDetails() throws Exception {
			//FQDN authentication should be performed when accessTokenAuthenticationStatus is ENABLED
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(globalConfig);
			service.setNrfConfigurations(nrfConfigurations);
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			nrfOptions.getNfAuthenticationSystemOptions().setAccessTokenAuthenticationStatus(FeatureStatus.ENABLED);
			ErrorInfo errorInfo = nrfOptions.getNfAuthenticationSystemOptions().getNfAuthenticationErrorResponses().get(0);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
			NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
			nfProfile.getNfServices().get(0).setServiceName("namf-evts");
			nfProfile.getNfServices().remove(1);
			NfInstance nfInstance = new NfInstance(nfProfile, nrfConfigurations.getGlobalConfig().getNrfInstanceId());
			List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
			nfInstanceList.add(nfInstance);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(nfInstanceList);
			when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setNfInstanceId(nfInstance.getNfInstanceId());
			accessTokenReq.setScope("namf-evts");
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getNfAccessTokenSystemOptions().setAuthorizeRequesterNf(AuthorizeRequesterNf.DISABLED);
			nrfSystemOptions.getNfAuthenticationSystemOptions().setAccessTokenAuthenticationStatus(FeatureStatus.ENABLED);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			when(validationHelper.parseOcXfccDnsHeader()).thenReturn("PCF.d5g.oracle.com");
			GenericResponse genericResponse = new GenericResponse();
			ProblemDetails problemDetails = new ProblemDetails();
			problemDetails.setStatus(errorInfo.getErrorCode());
			problemDetails.setDetail(errorInfo.getErrorResponse());
			problemDetails.setCause("Could not find nfInstance");
			genericResponse.setResponse(problemDetails);
			when(validationHelper.performNfAuthenticationBasedOnNfInstance(any())).thenReturn(genericResponse);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(null);
			Object accessTokenRsp = service.generateAccessToken(accessTokenReq,new ForwardingData());
			Assert.assertNotNull(accessTokenRsp);	
			Assert.assertTrue(accessTokenRsp instanceof GenericResponse);
			GenericResponse response = (GenericResponse)accessTokenRsp;
			Assert.assertTrue(response.getResponse() instanceof ProblemDetails);
			Assert.assertEquals(response.getResponse().toString(),problemDetails.toString());
			verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
			List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
			List<String> logs = new ArrayList<String>();
			for(LogEvent logEvt:loggingEvent) {
				logs.add(logEvt.getMessage().getFormattedMessage());
			}
			Assert.assertTrue(logs.toString().contains("Attempting to perform NF Authentication using FQDN"));
			Assert.assertTrue(logs.toString().contains("NF Authentication failed for service operation NFAccessToken"));
		}
		
		@Test
		public void testPerformNfAuthenticationUsingFqdn_failure_whenFeatureEnabled_returnsAccessTokenErr() throws Exception {
			//FQDN authentication should be performed when accessTokenAuthenticationStatus is ENABLED
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(globalConfig);
			service.setNrfConfigurations(nrfConfigurations);
			NrfSystemOptionsDao nrfSystemOptionsDao = TestDataGenerator.generateNrfSystemOptionsDao();
			NrfSystemOptions nrfOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain("v1");
			nrfOptions.getForwardingSystemOptions().setAccessTokenForwardingStatus(FeatureStatus.DISABLED);
			nrfOptions.getNfAuthenticationSystemOptions().setAccessTokenAuthenticationStatus(FeatureStatus.ENABLED);
			ErrorInfo errorInfo = nrfOptions.getNfAuthenticationSystemOptions().getNfAuthenticationErrorResponses().get(0);
			errorInfo.setErrorCode(400);
			List<ErrorInfo> errorInfoList = new ArrayList<ErrorInfo>();
			errorInfoList.add(errorInfo);
			nrfOptions.getNfAuthenticationSystemOptions().setNfAuthenticationErrorResponses(errorInfoList);
			List<VersionedJsonDoc> list = new ArrayList<>();
			VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
			versionJsonDoc.setVersion("v1");
			versionJsonDoc.setDoc(nrfOptions.toString());
			list.add(versionJsonDoc);
			VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
			versionJsonDocList.setVersionedJsonDocList(list);
			nrfSystemOptionsDao.setConfigurationJsonDocList(versionJsonDocList.toString());
			NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
			nfProfile.getNfServices().get(0).setServiceName("namf-evts");
			nfProfile.getNfServices().remove(1);
			NfInstance nfInstance = new NfInstance(nfProfile, nrfConfigurations.getGlobalConfig().getNrfInstanceId());
			List<NfInstance> nfInstanceList = new ArrayList<NfInstance>();
			nfInstanceList.add(nfInstance);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(), any())).thenReturn(nfInstanceList);
			when(nfRepository.filterProfiles(any())).thenReturn(nfInstanceList);
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setNfInstanceId(nfInstance.getNfInstanceId());
			accessTokenReq.setScope("namf-evts");
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getNfAccessTokenSystemOptions().setAuthorizeRequesterNf(AuthorizeRequesterNf.DISABLED);
			nrfSystemOptions.getNfAuthenticationSystemOptions().setAccessTokenAuthenticationStatus(FeatureStatus.ENABLED);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			when(validationHelper.parseOcXfccDnsHeader()).thenReturn("PCF.d5g.oracle.com");
			GenericResponse genericResponse = new GenericResponse();
			AccessTokenErr accessTokenErr = new AccessTokenErr();
			accessTokenErr.setError(errorInfo.getErrorCondition().toString());
			accessTokenErr.setError_description(errorInfo.getErrorResponse());
			genericResponse.setResponse(accessTokenErr);
			when(validationHelper.performNfAuthenticationBasedOnNfInstance(any())).thenReturn(genericResponse);
			when(nfRepository.fetchRequesterAndTargetNfInstances(any(),any())).thenReturn(null);
			Object accessTokenRsp = service.generateAccessToken(accessTokenReq,new ForwardingData());
			Assert.assertNotNull(accessTokenRsp);	
			Assert.assertTrue(accessTokenRsp instanceof GenericResponse);
			GenericResponse response = (GenericResponse)accessTokenRsp;
			Assert.assertTrue(response.getResponse() instanceof AccessTokenErr);
			Assert.assertEquals(response.getResponse().toString(),accessTokenErr.toString());
			verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
			List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
			List<String> logs = new ArrayList<String>();
			for(LogEvent logEvt:loggingEvent) {
				logs.add(logEvt.getMessage().getFormattedMessage());
			}
			Assert.assertTrue(logs.toString().contains("Attempting to perform NF Authentication using FQDN"));
			Assert.assertTrue(logs.toString().contains("NF Authentication failed for service operation NFAccessToken"));
		}
		
		@Test
		public void testPerformNfAuthenticationUsingFqdn_whenOcXfccDnsHeaderNotPresent() throws Exception {
			//Return internal server error when OcXfccDnsHeader is not present in request but accessTokenAuthenticationStatus is ENABLED
			GlobalConfig globalConfig = new GlobalConfig();
			globalConfig.setNrfInstanceId("33387680-ac84-4877-9b4e-d65d146782d8");
			NrfConfigurations nrfConfigurations = new NrfConfigurations();
			ServiceConfig accessTokenSvc = new ServiceConfig();
			accessTokenSvc.setNrfInstanceId("e596fd1f-36d6-40e5-8a2d-ce2ec0212978");
			nrfConfigurations.setAccessTokenSvc(accessTokenSvc);
			nrfConfigurations.setGlobalConfig(globalConfig);
			service.setNrfConfigurations(nrfConfigurations);
			NfProfile nfProfile = TestDataGenerator.generateNF("AMF");
			nfProfile.getNfServices().get(0).setServiceName("namf-evts");
			nfProfile.getNfServices().remove(1);
			NfInstance nfInstance = new NfInstance(nfProfile, nrfConfigurations.getGlobalConfig().getNrfInstanceId());
			AccessTokenReq accessTokenReq = new AccessTokenReq();
			accessTokenReq.setGrant_type("client_credentials");
			accessTokenReq.setNfInstanceId(nfInstance.getNfInstanceId());
			accessTokenReq.setScope("namf-evts");
			NrfSystemOptions nrfSystemOptions = TestDataGenerator.generateNrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = TestDataGenerator.generateNrfEngSystemOptions();
			nrfSystemOptions.getNfAuthenticationSystemOptions().setAccessTokenAuthenticationStatus(FeatureStatus.ENABLED);
			service.setNrfSystemAndEngineeringOptions(nrfSystemOptions, nrfEngSystemOptions);
			when(validationHelper.parseOcXfccDnsHeader()).thenReturn(null);
			ProblemDetails problemDetails = ProblemDetails.forInternalError();
			problemDetails.setCause("NF Authentication for access token request failed as OC-XFCC-DNS header not present");
			Object accessTokenRsp = service.generateAccessToken(accessTokenReq,new ForwardingData());
			Assert.assertNotNull(accessTokenRsp);	
			Assert.assertTrue(accessTokenRsp instanceof ProblemDetails);
			ProblemDetails actualProblemDetails = (ProblemDetails)accessTokenRsp;
			Assert.assertEquals(actualProblemDetails.toString(),problemDetails.toString());
			verify(mockAppender,atLeastOnce()).append((LogEvent)captorLoggingEvent.capture());
			List<LogEvent> loggingEvent = captorLoggingEvent.getAllValues();
			List<String> logs = new ArrayList<String>();
			for(LogEvent logEvt:loggingEvent) {
				logs.add(logEvt.getMessage().getFormattedMessage());
			}
			Assert.assertTrue(logs.toString().contains("NF Authentication for access token request failed as OC-XFCC-DNS header not present"));
		}

}