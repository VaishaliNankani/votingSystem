package com.oracle.cgbu.cne.nrf.config;

import java.util.List;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.config.Configurator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMethod;

import com.oracle.cgbu.cne.nrf.dao.NrfSystemOptionsDao;
import com.oracle.cgbu.cne.nrf.dao.NrfSystemOptionsRepository;
import com.oracle.cgbu.cne.nrf.domain.NrfEngSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.NrfSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.SystemOptionsEvent;
import com.oracle.cgbu.cne.nrf.metrics.CommonNrfMetrics;
import com.oracle.cgbu.cne.nrf.metrics.MetricsDimension;

@Component
public class NrfSystemOptionsManager {
	
	private static Logger logger = LogManager.getLogger(NrfSystemOptionsManager.class);
	
	
	private static final String NRF_SYSTEMOPTIONS = "NrfSystemOptions";
	private static final String FIND = "find";
	private static final String VERSION = "v1";
	private static final String INTERNAL_CONFIGURATION_CACHE = "InternalConfigurationCache";
	
	@Autowired
	private NrfConfigurations nrfConfigurations;
     
	@Autowired
	private NrfSystemOptionsRepository nrfSystemOptionsRepository;
	
	@Autowired
	private CommonNrfMetrics commonNrfMetrics;
	
	@Autowired
	private MetricsDimension metricsDimension;
	
	private NrfSystemOptions nrfSystemOptions;
	
	private NrfEngSystemOptions nrfEngSystemOptions;

	@Autowired
    private ApplicationEventPublisher applicationEventPublisher;
	
	Boolean publishSystemOptions = true;
	
	public NrfSystemOptions getNrfSystemOptions() {
		return nrfSystemOptions;
	}

	public void setNrfSystemOptions(NrfSystemOptions nrfSystemOptions) {
		this.nrfSystemOptions = nrfSystemOptions;
	}

	public NrfEngSystemOptions getNrfEngSystemOptions() {
		return nrfEngSystemOptions;
	}

	public void setNrfEngSystemOptions(NrfEngSystemOptions nrfEngSystemOptions) {
		this.nrfEngSystemOptions = nrfEngSystemOptions;
	}
	
	@Scheduled(fixedRateString = "${nrf.sub-svc.system-options-fetch-interval}")
	public void reloadNrfSystemOptions() {

		logger.trace("reloadNrfSystemOptions() invoked.");

		metricsDimension.setServiceOperation(INTERNAL_CONFIGURATION_CACHE);	
		metricsDimension.setMethod(RequestMethod.GET);
		List<NrfSystemOptionsDao> nrfSystemOptionsDaoList = null;
		try {
			nrfSystemOptionsDaoList = nrfSystemOptionsRepository.findbyRecordOwner(nrfConfigurations
																					.getGlobalConfig()
																					.getNrfInstanceId());
		}
		catch(Exception e) {
			e.printStackTrace();
			logger.error("Something went wrong while fetching NrfSystemOptions. Exception: "+e.getMessage());
			commonNrfMetrics.pegNrfDbMetricsFailuresTotal(RequestMethod.GET, FIND, INTERNAL_CONFIGURATION_CACHE, e, NRF_SYSTEMOPTIONS);
		}

		if(nrfSystemOptionsDaoList != null) {
			
			commonNrfMetrics.pegNrfDbMetricsSuccessTotal(RequestMethod.GET, FIND, INTERNAL_CONFIGURATION_CACHE, NRF_SYSTEMOPTIONS);
			NrfSystemOptions nrfSystemOptions = new NrfSystemOptions();
			NrfEngSystemOptions nrfEngSystemOptions = new NrfEngSystemOptions();

			for(NrfSystemOptionsDao nrfSystemOptionsDao : nrfSystemOptionsDaoList) {
				switch(nrfSystemOptionsDao.getConfigType())
				{
					case "OCNRF_SYSTEM_OPTIONS":    {
						NrfSystemOptions convertedNrfsystemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain(VERSION);
						nrfSystemOptions.setGeneralSystemOptions(convertedNrfsystemOptions.getGeneralSystemOptions());
						nrfSystemOptions.setNfScreeningSystemOptions(convertedNrfsystemOptions.getNfScreeningSystemOptions());
						nrfSystemOptions.setNfAccessTokenSystemOptions(convertedNrfsystemOptions.getNfAccessTokenSystemOptions());
						nrfSystemOptions.setNfManagementSystemOptions(convertedNrfsystemOptions.getNfManagementSystemOptions());
						nrfSystemOptions.setNfDiscoverSystemOptions(convertedNrfsystemOptions.getNfDiscoverSystemOptions());
						nrfSystemOptions.setSlfSystemOptions(convertedNrfsystemOptions.getSlfSystemOptions());
						nrfSystemOptions.setForwardingSystemOptions(convertedNrfsystemOptions.getForwardingSystemOptions());
						nrfSystemOptions.setGeoRedundancySystemOptions(convertedNrfsystemOptions.getGeoRedundancySystemOptions());
<<<<<<< HEAD
						nrfSystemOptions.setNfAuthenticationSystemOptions(convertedNrfsystemOptions.getNfAuthenticationSystemOptions());
=======
						nrfSystemOptions.setLoggingLevelSystemOptions(convertedNrfsystemOptions.getLoggingLevelSystemOptions());
>>>>>>> development
					}
					break;
		
					case "OCNRF_ERROR_RESPONSES":   {
						NrfSystemOptions convertedNrfsystemOptions = (NrfSystemOptions) nrfSystemOptionsDao.toDomain(VERSION);
						nrfSystemOptions.setErrorResponses(convertedNrfsystemOptions.getErrorResponses());
					}
					break;
					
					case "OCNRF_ENG_SYSTEM_OPTIONS": {
						NrfEngSystemOptions convertedNrfEngSystemOptions = (NrfEngSystemOptions) nrfSystemOptionsDao.toDomain_NrfEngSystemOptions(VERSION);
						nrfEngSystemOptions.setNfRegistrationEngSystemOptions(convertedNrfEngSystemOptions.getNfRegistrationEngSystemOptions());
						nrfEngSystemOptions.setNfSubscriptionEngSystemOptions(convertedNrfEngSystemOptions.getNfSubscriptionEngSystemOptions());
						nrfEngSystemOptions.setNfDiscoveryEngSystemOptions(convertedNrfEngSystemOptions.getNfDiscoveryEngSystemOptions());
						nrfEngSystemOptions.setNfAccessTokenEngSystemOptions(convertedNrfEngSystemOptions.getNfAccessTokenEngSystemOptions());
						nrfEngSystemOptions.setGeneralEngSystemOptions(convertedNrfEngSystemOptions.getGeneralEngSystemOptions());
						nrfEngSystemOptions.setNrfAuditorEngSystemOptions(convertedNrfEngSystemOptions.getNrfAuditorEngSystemOptions());
						nrfEngSystemOptions.setGeoRedundancyEngSystemOptions(convertedNrfEngSystemOptions.getGeoRedundancyEngSystemOptions());
					}
					break;
		
					case "OCNRF_ENG_ERROR_RESPONSES":    {
						NrfEngSystemOptions convertedNrfEngSystemOptions = (NrfEngSystemOptions) nrfSystemOptionsDao.toDomain_NrfEngSystemOptions(VERSION);
						nrfEngSystemOptions.setErrorResponses(convertedNrfEngSystemOptions.getErrorResponses());
					}
					break;
				}
			}
			if(nrfSystemOptions.getLoggingLevelSystemOptions().getNfSubscriptionLogLevel()!=null) {
			if(!(nrfSystemOptions.getLoggingLevelSystemOptions().getNfSubscriptionLogLevel().equals(LogManager.getRootLogger().getLevel().toString())))
			{
				Configurator.setAllLevels(LogManager.getRootLogger().getName(),Level.toLevel(nrfSystemOptions.getLoggingLevelSystemOptions().getNfSubscriptionLogLevel()));
			}
			}
			this.nrfSystemOptions = nrfSystemOptions;
			this.nrfEngSystemOptions = nrfEngSystemOptions;
			logger.trace("Loaded nrfSystemoptions: " + this.nrfSystemOptions.toString());
			logger.trace("Loaded nrfEngSystemOptions: " + this.nrfEngSystemOptions.toString());
			logger.trace("publishSystemOptions : {}",publishSystemOptions);
			if((this.nrfSystemOptions != null) && (this.nrfEngSystemOptions != null) && (publishSystemOptions== true)) {
				publishSystemOptions = false;
				SystemOptionsEvent customSpringEvent = new SystemOptionsEvent(this);
				applicationEventPublisher.publishEvent(customSpringEvent);
				
			}
		}
	}
}
