package com.oracle.cgbu.cne.nrf.dao;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.oracle.cgbu.cne.nrf.NrfException;
import com.oracle.cgbu.cne.nrf.domain.EpochTime;
import com.oracle.cgbu.cne.nrf.domain.ErrorInfo;
import com.oracle.cgbu.cne.nrf.domain.ErrorResponses;
import com.oracle.cgbu.cne.nrf.domain.ForwardingOptions;
import com.oracle.cgbu.cne.nrf.domain.GeneralOptions;
import com.oracle.cgbu.cne.nrf.domain.GeoRedundancyOptions;
import com.oracle.cgbu.cne.nrf.domain.HeartbeatInfo;
import com.oracle.cgbu.cne.nrf.domain.LogLevelOptions;
import com.oracle.cgbu.cne.nrf.domain.NfAccessTokenOptions;
import com.oracle.cgbu.cne.nrf.domain.NfAuthenticationOptions;
import com.oracle.cgbu.cne.nrf.domain.NfDiscoveryOptions;
import com.oracle.cgbu.cne.nrf.domain.NfManagementOptions;
import com.oracle.cgbu.cne.nrf.domain.NfScreeningOptions;
import com.oracle.cgbu.cne.nrf.domain.NrfEngSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.NrfSystemOptions;
import com.oracle.cgbu.cne.nrf.domain.NrfSystemOptionsId;
import com.oracle.cgbu.cne.nrf.domain.ProblemDetails;
import com.oracle.cgbu.cne.nrf.domain.SimpleAbstractDto;
import com.oracle.cgbu.cne.nrf.domain.SlfOptions;
import com.oracle.cgbu.cne.nrf.domain.VersionedJsonDoc;
import com.oracle.cgbu.cne.nrf.domain.VersionedJsonDocList;

@Entity
@IdClass(NrfSystemOptionsId.class)
@Table(name = "NrfSystemOptions")
public class NrfSystemOptionsDao extends SimpleAbstractDto{	
	
	private static final ObjectMapper objectMapper = new ObjectMapper();
	private static Logger logger = LogManager.getLogger(NrfSystemOptionsDao.class);
	
	@Id
	@Column(name = "configType", nullable = false, updatable = false)
	@NotNull
	private String configType;

	@Id
	@NotNull
	@Column(name = "recordOwner", nullable = false, updatable = false)
	private String recordOwner;
	
	@NotNull
	@Column(name = "configurationJsonDocList", columnDefinition = "json")
	private String configurationJsonDocList;
	
	@NotNull
	@Column(name="lastUpdateTimestamp", nullable=false)
	private long lastUpdateTimestamp;
	

	public NrfSystemOptionsDao() {
		super();
	}

	public NrfSystemOptionsDao(NrfSystemOptionsDao  oldNrfSystemOptionsDao, NrfSystemOptions nrfSystemOptions,String version) {
		this.configType = oldNrfSystemOptionsDao.getConfigType();
		this.recordOwner = oldNrfSystemOptionsDao.getRecordOwner();
		NrfSystemOptions nrfSystemOptionsOld = (NrfSystemOptions) oldNrfSystemOptionsDao.toDomain(version);
		if(this.configType.equals("OCNRF_SYSTEM_OPTIONS"))
		{
			if (nrfSystemOptions.getNfScreeningOptions()!=null) { 
				NfScreeningOptions NfScreeningOptions = nrfSystemOptions.getNfScreeningOptions();
				NfScreeningOptions nfScreeningSystemOptionsOld = nrfSystemOptionsOld.getNfScreeningOptions();
				nfScreeningSystemOptionsOld.setNfScreeningFeatureStatus((NfScreeningOptions.getNfScreeningFeatureStatus()!=null)?
						NfScreeningOptions.getNfScreeningFeatureStatus():
							nfScreeningSystemOptionsOld.getNfScreeningFeatureStatus());
				nfScreeningSystemOptionsOld.setNfScreeningFailureHttpCode((NfScreeningOptions.getNfScreeningFailureHttpCode()!=null)?
						NfScreeningOptions.getNfScreeningFailureHttpCode():
							nfScreeningSystemOptionsOld.getNfScreeningFailureHttpCode());
				nrfSystemOptionsOld.setNfScreeningOptions(nfScreeningSystemOptionsOld);
			}

			if(nrfSystemOptions.getNfManagementOptions()!=null) {
				NfManagementOptions nfManagement = nrfSystemOptions.getNfManagementOptions();
				NfManagementOptions nfManagementOld = nrfSystemOptionsOld.getNfManagementOptions();
				
				if (nfManagement.getNfHeartbeatTimers()!=null &&
						!nfManagement.getNfHeartbeatTimers().isEmpty()) {					
					nfManagementOld.setNfHeartbeatTimers(nfManagement.getNfHeartbeatTimers());
				}
				nfManagementOld.setNfNotifyLoadThreshold((nfManagement.getNfNotifyLoadThreshold()!=null)?
						nfManagement.getNfNotifyLoadThreshold():
							nfManagementOld.getNfNotifyLoadThreshold());
				nfManagementOld.setNrfSupportForProfileChangesInResponse((nfManagement.getNrfSupportForProfileChangesInResponse()!=null)?
						nfManagement.getNrfSupportForProfileChangesInResponse():
							nfManagementOld.getNrfSupportForProfileChangesInResponse());
				nfManagementOld.setSubscriptionValidityDuration((nfManagement.getSubscriptionValidityDuration()!=null)?
						nfManagement.getSubscriptionValidityDuration():
							nfManagementOld.getSubscriptionValidityDuration());
				nfManagementOld.setNrfSupportForProfileChangesInNotification((nfManagement.getNrfSupportForProfileChangesInNotification()!=null)?
						nfManagement.getNrfSupportForProfileChangesInNotification():
							nfManagementOld.getNrfSupportForProfileChangesInNotification());
				nfManagementOld.setNfProfileSuspendDuration((nfManagement.getNfProfileSuspendDuration()!=null)?
						nfManagement.getNfProfileSuspendDuration():
							nfManagementOld.getNfProfileSuspendDuration());
				nfManagementOld.setErrorResponseCodeForServiceUnavailable((nfManagement.getErrorResponseCodeForServiceUnavailable()!=null)?
						nfManagement.getErrorResponseCodeForServiceUnavailable():
							nfManagementOld.getErrorResponseCodeForServiceUnavailable());
				nfManagementOld.setRetryAfter((nfManagement.getRetryAfter()!=null)?
						nfManagement.getRetryAfter():
							nfManagementOld.getRetryAfter());
				nfManagementOld.setAcceptAdditionalAttributes((nfManagement.getAcceptAdditionalAttributes()!=null)?
						nfManagement.getAcceptAdditionalAttributes():
							nfManagementOld.getAcceptAdditionalAttributes());

				nrfSystemOptionsOld.setNfManagementOptions(nfManagementOld);
			}

			if (nrfSystemOptions.getGeneralOptions()!=null) {
				GeneralOptions general = nrfSystemOptions.getGeneralOptions();
			    GeneralOptions generalOld = nrfSystemOptionsOld.getGeneralOptions();
			    generalOld.setNrfPlmnList((general.getNrfPlmnList()!=null)?
				    	general.getNrfPlmnList():
					    	generalOld.getNrfPlmnList());
			    generalOld.setEnableF3((general.isEnableF3()!=null)?
				    	general.isEnableF3():
	                    	generalOld.isEnableF3());
			    generalOld.setEnableF5((general.getEnableF5()!=null)?
				    	general.getEnableF5():
	                    	generalOld.getEnableF5());
			    generalOld.setMaximumHopCount((general.getMaximumHopCount()!=null)?
					general.getMaximumHopCount():
						generalOld.getMaximumHopCount());
			    generalOld.setAddLoadInNFProfile((general.getAddLoadInNFProfile()!=null)?
						general.getAddLoadInNFProfile():
							generalOld.getAddLoadInNFProfile());
				generalOld.setAddPriorityInNFProfile((general.getAddPriorityInNFProfile()!=null)?
						general.getAddPriorityInNFProfile():
							generalOld.getAddPriorityInNFProfile());
				generalOld.setDefaultPriority((general.getDefaultPriority()!=null)?
						general.getDefaultPriority():
							generalOld.getDefaultPriority());
				generalOld.setDefaultLoad((general.getDefaultLoad()!=null)?
						general.getDefaultLoad():
							generalOld.getDefaultLoad());
				generalOld.setOcnrfEndPointHost((general.getOcnrfEndPointHost()!=null && !(general.getOcnrfEndPointHost().isEmpty()) )?
				        general.getOcnrfEndPointHost():
				        	generalOld.getOcnrfEndPointHost());
				generalOld.setOcnrfEndPointPort((general.getOcnrfEndPointPort()!=null)?
				        general.getOcnrfEndPointPort():
				        	generalOld.getOcnrfEndPointPort());
				 nrfSystemOptionsOld.setGeneralOptions(generalOld);
			}
			
			if (nrfSystemOptions.getNfDiscoveryOptions()!=null) {
				NfDiscoveryOptions nfDiscover = nrfSystemOptions.getNfDiscoveryOptions();
				NfDiscoveryOptions nfDiscoverOld = nrfSystemOptionsOld.getNfDiscoveryOptions();
				nfDiscoverOld.setDiscoveryValidityPeriod((nfDiscover.getDiscoveryValidityPeriod()!=null)?
						nfDiscover.getDiscoveryValidityPeriod():
							nfDiscoverOld.getDiscoveryValidityPeriod());
				
				nfDiscoverOld.setDiscoveryResultLoadThreshold(
						(nfDiscover.getDiscoveryResultLoadThreshold()!=null)?
						    (nfDiscover.getDiscoveryResultLoadThreshold()==0 ? null 
								: nfDiscover.getDiscoveryResultLoadThreshold())
						    :nfDiscoverOld.getDiscoveryResultLoadThreshold());
				nfDiscoverOld.setProfilesCountInDiscoveryResponse(
						(nfDiscover.getProfilesCountInDiscoveryResponse()!=null)?
							(nfDiscover.getProfilesCountInDiscoveryResponse()==0 ? null
						        : nfDiscover.getProfilesCountInDiscoveryResponse())
							:nfDiscoverOld.getProfilesCountInDiscoveryResponse());
				nrfSystemOptionsOld.setNfDiscoveryOptions(nfDiscoverOld);
			}
			
			if (nrfSystemOptions.getNfAccessTokenOptions()!=null) {
				NfAccessTokenOptions nfAccessToken = nrfSystemOptions.getNfAccessTokenOptions();
				NfAccessTokenOptions nfAccessTokenOld = nrfSystemOptionsOld.getNfAccessTokenOptions();
				nfAccessTokenOld.setOauthTokenExpiryTime((nfAccessToken.getOauthTokenExpiryTime()!=null)?
						nfAccessToken.getOauthTokenExpiryTime():
							nrfSystemOptionsOld.getNfAccessTokenOptions().getOauthTokenExpiryTime());							
				nfAccessTokenOld.setOauthTokenAlgorithm((nfAccessToken.getOauthTokenAlgorithm()!=null)?
						nfAccessToken.getOauthTokenAlgorithm():
							nfAccessTokenOld.getOauthTokenAlgorithm());
				nfAccessTokenOld.setAuthorizeRequesterNf((nfAccessToken.getAuthorizeRequesterNf()!=null)?
						nfAccessToken.getAuthorizeRequesterNf():
							nfAccessTokenOld.getAuthorizeRequesterNf());
				nfAccessTokenOld.setLogicalOperatorForScope((nfAccessToken.getLogicalOperatorForScope()!=null)?
						nfAccessToken.getLogicalOperatorForScope():
							nfAccessTokenOld.getLogicalOperatorForScope());
				nfAccessTokenOld.setAudienceType((nfAccessToken.getAudienceType()!=null)?
						nfAccessToken.getAudienceType():
							nfAccessTokenOld.getAudienceType());
				if (nfAccessToken.getAuthFeatureConfig()!=null) {
					nfAccessTokenOld.getAuthFeatureConfig().setAuthConfig((nfAccessToken.getAuthFeatureConfig().getAuthConfig()!=null)?
							nfAccessToken.getAuthFeatureConfig().getAuthConfig()
							:nfAccessTokenOld.getAuthFeatureConfig().getAuthConfig());
					if (nfAccessToken.getAuthFeatureConfig().getAuthErrorResponses() != null) {
						List<ErrorInfo> authErrorResponsesList = new ArrayList<ErrorInfo>();
						ErrorInfo authErrorResponse;
						for (int i = 0;i<nfAccessTokenOld.getAuthFeatureConfig().getAuthErrorResponses().size();i++) {
							authErrorResponse = nfAccessToken.getAuthFeatureConfig().getAuthErrorResponses().get(i);
							List<ErrorInfo> authErrorInfoListOld=nfAccessTokenOld.getAuthFeatureConfig().getAuthErrorResponses();  
							for(ErrorInfo authErrorInfoOld : authErrorInfoListOld ) {
								if(authErrorInfoOld.getErrorCondition().equals(authErrorResponse.getErrorCondition())){
									authErrorInfoOld.setResponseCode((authErrorResponse.getResponseCode()!=null)?
											authErrorResponse.getResponseCode():authErrorInfoOld.getResponseCode());
									authErrorInfoOld.setErrorResponse((authErrorResponse.getErrorResponse()!=null)?
											authErrorResponse.getErrorResponse():authErrorInfoOld.getErrorResponse());	
									authErrorInfoOld.setRedirectUrl((authErrorResponse.getRedirectUrl()!=null)?
											authErrorResponse.getRedirectUrl():authErrorInfoOld.getRedirectUrl());		
									authErrorInfoOld.setRetryAfter((authErrorResponse.getRetryAfter()!=null)?
											authErrorResponse.getRetryAfter():authErrorInfoOld.getRetryAfter());
									authErrorResponsesList.add(authErrorInfoOld);
								}
							}
						}
						nfAccessToken.getAuthFeatureConfig().setAuthErrorResponses(authErrorResponsesList);
					}
					nfAccessTokenOld.getAuthFeatureConfig().setAuthFeatureStatus((nfAccessToken.getAuthFeatureConfig().getAuthFeatureStatus()!=null)?
							nfAccessToken.getAuthFeatureConfig().getAuthFeatureStatus()
							:nfAccessTokenOld.getAuthFeatureConfig().getAuthFeatureStatus());
				}
				nrfSystemOptionsOld.setNfAccessTokenOptions(nfAccessTokenOld);

			}

			if (nrfSystemOptions.getLogLevelOptions()!=null) {
				LogLevelOptions loggingLevel = nrfSystemOptions.getLogLevelOptions();
				LogLevelOptions loggingLevelOld = nrfSystemOptionsOld.getLogLevelOptions();
				loggingLevelOld.setNfAccessTokenLogLevel((loggingLevel.getNfAccessTokenLogLevel()!=null)?
						loggingLevel.getNfAccessTokenLogLevel():
							loggingLevelOld.getNfAccessTokenLogLevel());
				loggingLevelOld.setNfDiscoveryLogLevel((loggingLevel.getNfDiscoveryLogLevel()!=null)?
						loggingLevel.getNfDiscoveryLogLevel():
							loggingLevelOld.getNfDiscoveryLogLevel());
				loggingLevelOld.setNfRegistrationLogLevel((loggingLevel.getNfRegistrationLogLevel()!=null)?
						loggingLevel.getNfRegistrationLogLevel():
							loggingLevelOld.getNfRegistrationLogLevel());
				loggingLevelOld.setNfSubscriptionLogLevel((loggingLevel.getNfSubscriptionLogLevel()!=null)?
						loggingLevel.getNfSubscriptionLogLevel():
							loggingLevelOld.getNfSubscriptionLogLevel());
				loggingLevelOld.setNrfAuditorLogLevel((loggingLevel.getNrfAuditorLogLevel()!=null)?
						loggingLevel.getNrfAuditorLogLevel():
							loggingLevelOld.getNrfAuditorLogLevel());
				loggingLevelOld.setNrfConfigurationLogLevel((loggingLevel.getNrfConfigurationLogLevel()!=null)?
						loggingLevel.getNrfConfigurationLogLevel():
							loggingLevelOld.getNrfConfigurationLogLevel());

				nrfSystemOptionsOld.setLogLevelOptions(loggingLevelOld);
			}


			if(nrfSystemOptions.getSlfOptions()!=null) {

				SlfOptions SlfOptions = nrfSystemOptions.getSlfOptions();
				SlfOptions slfSystemOptionsOld=nrfSystemOptionsOld.getSlfOptions();

				slfSystemOptionsOld.setSupportedNfTypeList((SlfOptions.getSupportedNfTypeList()!=null)?
						SlfOptions.getSupportedNfTypeList():
							slfSystemOptionsOld.getSupportedNfTypeList());
				slfSystemOptionsOld.setPreferredSubscriberIdType((SlfOptions.getPreferredSubscriberIdType()!=null)?
						SlfOptions.getPreferredSubscriberIdType():
							slfSystemOptionsOld.getPreferredSubscriberIdType());

				slfSystemOptionsOld.setSlfHostConfig((SlfOptions.getSlfHostConfig()!=null)?
						SlfOptions.getSlfHostConfig():
							slfSystemOptionsOld.getSlfHostConfig());
				slfSystemOptionsOld.setRerouteOnResponseHttpStatusCodes((SlfOptions.getRerouteOnResponseHttpStatusCodes()!=null)?
						SlfOptions.getRerouteOnResponseHttpStatusCodes():
							slfSystemOptionsOld.getRerouteOnResponseHttpStatusCodes());
				
				nrfSystemOptionsOld.setSlfOptions(slfSystemOptionsOld);

			}
			
			if(nrfSystemOptions.getForwardingOptions()!=null) {
				ForwardingOptions ForwardingOptions = nrfSystemOptions.getForwardingOptions();
				ForwardingOptions forwardingSystemOptionsOld = nrfSystemOptionsOld.getForwardingOptions();
				
				forwardingSystemOptionsOld.setAccessTokenForwardingStatus((ForwardingOptions.getAccessTokenForwardingStatus()!=null)?
						ForwardingOptions.getAccessTokenForwardingStatus():
							forwardingSystemOptionsOld.getAccessTokenForwardingStatus());
				forwardingSystemOptionsOld.setDiscoveryForwardingStatus((ForwardingOptions.getDiscoveryForwardingStatus()!=null)?
						ForwardingOptions.getDiscoveryForwardingStatus():
							forwardingSystemOptionsOld.getDiscoveryForwardingStatus());
				forwardingSystemOptionsOld.setProfileRetrievalForwardingStatus((ForwardingOptions.getProfileRetrievalForwardingStatus()!=null)?
						ForwardingOptions.getProfileRetrievalForwardingStatus():
							forwardingSystemOptionsOld.getProfileRetrievalForwardingStatus());
				forwardingSystemOptionsOld.setSubscriptionForwardingStatus((ForwardingOptions.getSubscriptionForwardingStatus()!=null)?
						ForwardingOptions.getSubscriptionForwardingStatus():
							forwardingSystemOptionsOld.getSubscriptionForwardingStatus());
				forwardingSystemOptionsOld.setNrfHostConfig((ForwardingOptions.getNrfHostConfig()!=null)?
						ForwardingOptions.getNrfHostConfig():
							forwardingSystemOptionsOld.getNrfHostConfig());
				forwardingSystemOptionsOld.setNrfRerouteOnResponseHttpStatusCodes((ForwardingOptions.getNrfRerouteOnResponseHttpStatusCodes()!=null)?
						ForwardingOptions.getNrfRerouteOnResponseHttpStatusCodes():
							forwardingSystemOptionsOld.getNrfRerouteOnResponseHttpStatusCodes());
						
				nrfSystemOptionsOld.setForwardingOptions(forwardingSystemOptionsOld);
				
			}
			
			if(nrfSystemOptions.getGeoRedundancyOptions()!=null) {
				GeoRedundancyOptions GeoRedundancyOptions = nrfSystemOptions.getGeoRedundancyOptions();
				GeoRedundancyOptions geoRedundancySystemOptionsOld = nrfSystemOptionsOld.getGeoRedundancyOptions();
				geoRedundancySystemOptionsOld.setGeoRedundancyFeatureStatus((GeoRedundancyOptions.getGeoRedundancyFeatureStatus()!=null)?
						GeoRedundancyOptions.getGeoRedundancyFeatureStatus():
							geoRedundancySystemOptionsOld.getGeoRedundancyFeatureStatus());
				geoRedundancySystemOptionsOld.setReplicationLatency((GeoRedundancyOptions.getReplicationLatency()!=null)?
						GeoRedundancyOptions.getReplicationLatency():
							geoRedundancySystemOptionsOld.getReplicationLatency());
				geoRedundancySystemOptionsOld.setMonitorNrfServiceStatusInterval((GeoRedundancyOptions.getMonitorNrfServiceStatusInterval()!=null)?
						GeoRedundancyOptions.getMonitorNrfServiceStatusInterval():
							geoRedundancySystemOptionsOld.getMonitorNrfServiceStatusInterval());
				geoRedundancySystemOptionsOld.setMonitorDBReplicationStatusInterval((GeoRedundancyOptions.getMonitorDBReplicationStatusInterval()!=null)?
						GeoRedundancyOptions.getMonitorDBReplicationStatusInterval():
							geoRedundancySystemOptionsOld.getMonitorDBReplicationStatusInterval());
				nrfSystemOptions.setGeoRedundancyOptions(geoRedundancySystemOptionsOld);
			}
			
			if(nrfSystemOptions.getNfAuthenticationOptions()!=null) {
				NfAuthenticationOptions NfAuthenticationOptions = nrfSystemOptions.getNfAuthenticationOptions();
				NfAuthenticationOptions nfAuthenticationSystemOptionsOld = nrfSystemOptionsOld.getNfAuthenticationOptions();
				nfAuthenticationSystemOptionsOld.setNfRegistrationAuthenticationStatus((NfAuthenticationOptions.getNfRegistrationAuthenticationStatus()!=null)?
						NfAuthenticationOptions.getNfRegistrationAuthenticationStatus():
							nfAuthenticationSystemOptionsOld.getNfRegistrationAuthenticationStatus());
				nfAuthenticationSystemOptionsOld.setNfSubscriptionAuthenticationStatus((NfAuthenticationOptions.getNfSubscriptionAuthenticationStatus()!=null)?
						NfAuthenticationOptions.getNfSubscriptionAuthenticationStatus():
							nfAuthenticationSystemOptionsOld.getNfSubscriptionAuthenticationStatus());
				nfAuthenticationSystemOptionsOld.setNfDiscoveryAuthenticationStatus((NfAuthenticationOptions.getNfDiscoveryAuthenticationStatus()!=null)?
						NfAuthenticationOptions.getNfDiscoveryAuthenticationStatus():
							nfAuthenticationSystemOptionsOld.getNfDiscoveryAuthenticationStatus());
				nfAuthenticationSystemOptionsOld.setAccessTokenAuthenticationStatus((NfAuthenticationOptions.getAccessTokenAuthenticationStatus()!=null)?
						NfAuthenticationOptions.getAccessTokenAuthenticationStatus():
							nfAuthenticationSystemOptionsOld.getAccessTokenAuthenticationStatus());
				nfAuthenticationSystemOptionsOld.setNfProfileRetrievalAuthenticationStatus((NfAuthenticationOptions.getNfProfileRetrievalAuthenticationStatus()!=null)?
						NfAuthenticationOptions.getNfProfileRetrievalAuthenticationStatus():
							nfAuthenticationSystemOptionsOld.getNfProfileRetrievalAuthenticationStatus());
				nfAuthenticationSystemOptionsOld.setNfListRetrievalAuthenticationStatus((NfAuthenticationOptions.getNfListRetrievalAuthenticationStatus()!=null)?
						NfAuthenticationOptions.getNfListRetrievalAuthenticationStatus():
							nfAuthenticationSystemOptionsOld.getNfListRetrievalAuthenticationStatus());
				nfAuthenticationSystemOptionsOld.setCheckIfNfIsRegistered((NfAuthenticationOptions.getCheckIfNfIsRegistered()!=null)?
						NfAuthenticationOptions.getCheckIfNfIsRegistered():
							nfAuthenticationSystemOptionsOld.getCheckIfNfIsRegistered());
				
				if(NfAuthenticationOptions.getNfAuthenticationErrorResponses()!=null) {
					List<ErrorInfo> nfAuthenticationErrorInfoList = NfAuthenticationOptions.getNfAuthenticationErrorResponses();
					for (ErrorInfo nfAuthenticationErrorInfoNew : nfAuthenticationErrorInfoList) {
						List<ErrorInfo> nfAuthenticationErrorInfoListOld = nfAuthenticationSystemOptionsOld.getNfAuthenticationErrorResponses();
						for(ErrorInfo nfAuthenticationErrorInfoOld : nfAuthenticationErrorInfoListOld) {
							if(nfAuthenticationErrorInfoOld.getErrorCondition().equals(nfAuthenticationErrorInfoNew.getErrorCondition())) {
								nfAuthenticationErrorInfoOld.setResponseCode((nfAuthenticationErrorInfoNew.getResponseCode()!=null)?
										nfAuthenticationErrorInfoNew.getResponseCode():nfAuthenticationErrorInfoOld.getResponseCode());
								nfAuthenticationErrorInfoOld.setErrorResponse((nfAuthenticationErrorInfoNew.getErrorResponse()!=null)?
										nfAuthenticationErrorInfoNew.getErrorResponse():nfAuthenticationErrorInfoOld.getErrorResponse());	
								nfAuthenticationErrorInfoOld.setRedirectUrl((nfAuthenticationErrorInfoNew.getRedirectUrl()!=null)?
										nfAuthenticationErrorInfoNew.getRedirectUrl():nfAuthenticationErrorInfoOld.getRedirectUrl());		
								nfAuthenticationErrorInfoOld.setRetryAfter((nfAuthenticationErrorInfoNew.getRetryAfter()!=null)?
										nfAuthenticationErrorInfoNew.getRetryAfter():nfAuthenticationErrorInfoOld.getRetryAfter());
							}
						}
					}
				}
				
				nrfSystemOptions.setNfAuthenticationOptions(nfAuthenticationSystemOptionsOld);
			}
			
		}
			
		else {

			if(nrfSystemOptions.getErrorResponses()!=null) {
				ErrorResponses errorResponses = nrfSystemOptions.getErrorResponses();
				ErrorResponses errorResponsesOld=nrfSystemOptionsOld.getErrorResponses();
				if(errorResponses.getSlfErrorResponses()!=null) {
					List<ErrorInfo> errorInfoList=errorResponses.getSlfErrorResponses();
					for (ErrorInfo errorInfoNew : errorInfoList){
						List<ErrorInfo> errorInfoListOld=errorResponsesOld.getSlfErrorResponses();  
						for(ErrorInfo errorInfoOld : errorInfoListOld ) {
							if(errorInfoOld.getErrorCondition().equals(errorInfoNew.getErrorCondition())){
								errorInfoOld.setResponseCode((errorInfoNew.getResponseCode()!=null)?
										errorInfoNew.getResponseCode():errorInfoOld.getResponseCode());
								errorInfoOld.setErrorResponse((errorInfoNew.getErrorResponse()!=null)?
										errorInfoNew.getErrorResponse():errorInfoOld.getErrorResponse());
								errorInfoOld.setRetryAfter((errorInfoNew.getRetryAfter()!=null)?
										errorInfoNew.getRetryAfter():errorInfoOld.getRetryAfter());
								errorInfoOld.setRedirectUrl((errorInfoNew.getRedirectUrl()!=null)?
										errorInfoNew.getRedirectUrl():errorInfoOld.getRedirectUrl());
							}
						}
					}
				}
				if(errorResponses.getNrfForwardingErrorResponses()!=null) {
					List<ErrorInfo> nrfForwardingErrorInfoList=errorResponses.getNrfForwardingErrorResponses();
					for (ErrorInfo nrfForwardingErrorInfoNew : nrfForwardingErrorInfoList){
						List<ErrorInfo> nrfForwardingErrorInfoListOld=errorResponsesOld.getNrfForwardingErrorResponses();  
						for(ErrorInfo nrfForwardingErrorInfoOld : nrfForwardingErrorInfoListOld ) {
							if(nrfForwardingErrorInfoOld.getErrorCondition().equals(nrfForwardingErrorInfoNew.getErrorCondition())){
								nrfForwardingErrorInfoOld.setResponseCode((nrfForwardingErrorInfoNew.getResponseCode()!=null)?
										nrfForwardingErrorInfoNew.getResponseCode():nrfForwardingErrorInfoOld.getResponseCode());
								nrfForwardingErrorInfoOld.setErrorResponse((nrfForwardingErrorInfoNew.getErrorResponse()!=null)?
										nrfForwardingErrorInfoNew.getErrorResponse():nrfForwardingErrorInfoOld.getErrorResponse());		
								nrfForwardingErrorInfoOld.setRetryAfter((nrfForwardingErrorInfoNew.getRetryAfter()!=null)?
										nrfForwardingErrorInfoNew.getRetryAfter():nrfForwardingErrorInfoOld.getRetryAfter());
								nrfForwardingErrorInfoOld.setRedirectUrl((nrfForwardingErrorInfoNew.getRedirectUrl()!=null)?
										nrfForwardingErrorInfoNew.getRedirectUrl():nrfForwardingErrorInfoOld.getRedirectUrl());
							}
						}
					}
				}
				/*
				if(errorResponses.getGeneralErrorResponses()!=null) {
					List<ErrorInfo> generalErrorInfoList=errorResponses.getGeneralErrorResponses();
					for (ErrorInfo generalErrorInfoNew : generalErrorInfoList){
						List<ErrorInfo> generalErrorInfoListOld=errorResponsesOld.getGeneralErrorResponses();  
						for(ErrorInfo generalErrorInfoOld : generalErrorInfoListOld ) {
							if(generalErrorInfoOld.getErrorCondition().equals(generalErrorInfoNew.getErrorCondition())){
								generalErrorInfoOld.setErrorCode((generalErrorInfoNew.getErrorCode()!=null)?
										generalErrorInfoNew.getErrorCode():generalErrorInfoOld.getErrorCode());
								generalErrorInfoOld.setErrorResponse((generalErrorInfoNew.getErrorResponse()!=null)?
										generalErrorInfoNew.getErrorResponse():generalErrorInfoOld.getErrorResponse());	
								generalErrorInfoOld.setRedirectURL((generalErrorInfoNew.getRedirectURL()!=null)?
										generalErrorInfoNew.getRedirectURL():generalErrorInfoOld.getRedirectURL());		
								generalErrorInfoOld.setRetryAfter((generalErrorInfoNew.getRetryAfter()!=null)?
										generalErrorInfoNew.getRetryAfter():generalErrorInfoOld.getRetryAfter());								
							}
						}
					}
				}
				*/
				nrfSystemOptionsOld.setErrorResponses(errorResponsesOld);

			}
		}
		
		

		Date currDate = new Date();
		nrfSystemOptionsOld.setLastUpdateTimestamp(currDate);
        this.setLastUpdateTimestamp(currDate);
        List<VersionedJsonDoc> versionedDoclist = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion(version);
		versionJsonDoc.setDoc(nrfSystemOptionsOld.toString());
		versionedDoclist.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(versionedDoclist);
		this.configurationJsonDocList = versionJsonDocList.toString();
	}
	
	public NrfSystemOptionsDao(NrfSystemOptionsDao oldNrfSystemOptionsDao, NrfEngSystemOptions nrfEngSystemOptions,String version) {
		this.configType = oldNrfSystemOptionsDao.getConfigType();
		this.recordOwner = oldNrfSystemOptionsDao.getRecordOwner();
		NrfEngSystemOptions nrfEngSystemOptionsOld = (NrfEngSystemOptions) oldNrfSystemOptionsDao.toDomain_NrfEngSystemOptions(version);
		if(nrfEngSystemOptions.getErrorResponses()!=null) {
			ErrorResponses errorResponses = nrfEngSystemOptions.getErrorResponses();
			ErrorResponses errorResponsesOld=nrfEngSystemOptionsOld.getErrorResponses();
			List<ErrorInfo> errorInfoList=errorResponses.getSlfErrorResponses();
			for (ErrorInfo errorInfoNew : errorInfoList){
				int counter = 0;
				List<ErrorInfo> errorInfoListOld=errorResponsesOld.getSlfErrorResponses(); 
				for(ErrorInfo errorInfoOld : errorInfoListOld ) {
					if(errorInfoOld.getErrorCondition().equals(errorInfoNew.getErrorCondition())){
						errorInfoOld.setResponseCode((errorInfoNew.getResponseCode()!=null)?
								errorInfoNew.getResponseCode():errorInfoOld.getResponseCode());
						errorInfoOld.setErrorResponse((errorInfoNew.getErrorResponse()!=null)?
								errorInfoNew.getErrorResponse():errorInfoOld.getErrorResponse());
						errorInfoOld.setErrorDetectionResultCode((errorInfoNew.getErrorDetectionResultCode()!=null)?
								errorInfoNew.getErrorDetectionResultCode():errorInfoOld.getErrorDetectionResultCode());
						errorInfoOld.setUseErrorCodeReturned((errorInfoNew.getUseErrorCodeReturned()!=null)?
								errorInfoNew.getUseErrorCodeReturned():errorInfoOld.getUseErrorCodeReturned());
						errorInfoOld.setRetryAfter((errorInfoNew.getRetryAfter()!=null)?
								errorInfoNew.getRetryAfter():errorInfoOld.getRetryAfter());
						errorInfoOld.setRedirectUrl((errorInfoNew.getRedirectUrl()!=null)?
								errorInfoNew.getRedirectUrl():errorInfoOld.getRedirectUrl());
						counter++;
					}
				}
				if(counter == 0) {
					errorInfoListOld.add(errorInfoNew);
				}
			}
			nrfEngSystemOptionsOld.setErrorResponses(errorResponsesOld);
		}
		
		Date currDate = new Date();
		nrfEngSystemOptionsOld.setLastUpdateTimestamp(currDate);
        this.setLastUpdateTimestamp(currDate);
        List<VersionedJsonDoc> versionedDoclist = new ArrayList<>();
		VersionedJsonDoc versionJsonDoc = new VersionedJsonDoc();
		versionJsonDoc.setVersion(version);
		versionJsonDoc.setDoc(nrfEngSystemOptionsOld.toString());
		versionedDoclist.add(versionJsonDoc);
		VersionedJsonDocList versionJsonDocList = new VersionedJsonDocList();
		versionJsonDocList.setVersionedJsonDocList(versionedDoclist);
		this.configurationJsonDocList = versionJsonDocList.toString();
	}

	

public Object toDomain(String version) {
		
		Map<String, Object> logMsg = new LinkedHashMap<String, Object>();
		logMsg.clear();
		logMsg.put("logMsg", "Entering toDomain function");
		logMsg.put("version",version);
		logger.trace(logMsg.toString());
		
		NrfSystemOptions nrfSystemOptions = null;
		VersionedJsonDocList versionedJsonDocList = null;
		try {
			versionedJsonDocList = objectMapper.readValue(this.getConfigurationJsonDocList(), VersionedJsonDocList.class);
		} catch (Exception exception) {
			ProblemDetails prob = ProblemDetails.forInternalError();
			prob.setCause("Could not fetch VersionedJsonDocList due to an unexpected error.");
			logMsg.clear();
			logMsg.put("logMsg", exception.getMessage());
			logMsg.put("stackTrace", Arrays.toString(exception.getStackTrace()));
			logMsg.put("versionJsonDocList",this.getConfigurationJsonDocList());
			logger.error(logMsg.toString());
			throw new NrfException(prob);
		}
		List<VersionedJsonDoc> versionedDocList = versionedJsonDocList.getVersionedJsonDocList();
		if (!versionedDocList.isEmpty()) {
			Iterator<VersionedJsonDoc> versionedDocListIterator = versionedDocList.iterator();
			VersionedJsonDoc jsonDoc;
			while (versionedDocListIterator.hasNext()) {
				jsonDoc = versionedDocListIterator.next();
				if (jsonDoc.getVersion().equals(version)) {
					logMsg.clear();
					logMsg.put("logMsg", "Record");
					logMsg.put("VersionedJsonDoc",jsonDoc.toString());
					logger.trace(logMsg.toString());
					try {
						nrfSystemOptions = objectMapper.readValue(jsonDoc.getDoc(),
								NrfSystemOptions.class);
					} catch (Exception e) {
						ProblemDetails prob = ProblemDetails.forInternalError();
						prob.setCause("Could not fetch NrfSystemOptions due to an unexpected error.");
						logMsg.clear();
						logMsg.put("logMsg", e.getMessage());
						logMsg.put("stackTrace", Arrays.toString(e.getStackTrace()));
						logMsg.put("jsonDoc", jsonDoc.getDoc());
						logger.error(logMsg.toString());
						throw new NrfException(prob);
					}

				}
			}
		}
		logMsg.clear();
		logMsg.put("logMsg", "Exit from toDomain function");
		logMsg.put("version",version);
		logMsg.put("Doc", nrfSystemOptions);
		logger.trace(logMsg.toString());
		return nrfSystemOptions;
	}
	
public Object toDomain_NrfEngSystemOptions(String version) {
	
	Map<String, Object> logMsg = new LinkedHashMap<String, Object>();
	logMsg.clear();
	logMsg.put("logMsg", "Entering toDomain_NrfEngSystemOptions function");
	logMsg.put("version",version);
	logger.trace(logMsg.toString());
	
	NrfEngSystemOptions nrfEngSystemOptions = null;
	VersionedJsonDocList versionedJsonDocList = null;
	try {
		versionedJsonDocList = objectMapper.readValue(this.getConfigurationJsonDocList(), VersionedJsonDocList.class);
	} catch (Exception exception) {
		ProblemDetails prob = ProblemDetails.forInternalError();
		prob.setCause("Could not fetch VersionedJsonDocList due to an unexpected error.");
		logMsg.clear();
		logMsg.put("logMsg", exception.getMessage());
		logMsg.put("stackTrace",  Arrays.toString(exception.getStackTrace()));
		logMsg.put("versionJsonDocList",this.getConfigurationJsonDocList());
		logger.error(logMsg.toString());
		throw new NrfException(prob);
	}
	List<VersionedJsonDoc> versionedDocList = versionedJsonDocList.getVersionedJsonDocList();
	if (!versionedDocList.isEmpty()) {
		Iterator<VersionedJsonDoc> versionedDocListIterator = versionedDocList.iterator();
		VersionedJsonDoc jsonDoc;
		while (versionedDocListIterator.hasNext()) {
			jsonDoc = versionedDocListIterator.next();
			if (jsonDoc.getVersion().equals(version)) {
				logMsg.clear();
				logMsg.put("logMsg", "Record");
				logMsg.put("VersionedJsonDoc",jsonDoc.toString());
				logger.trace(logMsg.toString());
				try {
					nrfEngSystemOptions = objectMapper.readValue(jsonDoc.getDoc(),
							NrfEngSystemOptions.class);
				} catch (Exception e) {
					ProblemDetails prob = ProblemDetails.forInternalError();
					prob.setCause("Could not fetch NrfEngSystemOptions due to an unexpected error.");
					logMsg.clear();
					logMsg.put("logMsg", e.getMessage());
					logMsg.put("stackTrace", Arrays.toString(e.getStackTrace()));
					logMsg.put("jsonDoc", jsonDoc.getDoc());
					logger.error(logMsg.toString());
					throw new NrfException(prob);
				}

			}
		}
	}
	logMsg.clear();
	logMsg.put("logMsg", "Exit from toDomain_NrfEngSystemOptions function");
	logMsg.put("version",version);
	logMsg.put("Doc", nrfEngSystemOptions);
	logger.trace(logMsg.toString());
	return nrfEngSystemOptions;
}

	
	
	public long getLastUpdateTimestamp() {
		return lastUpdateTimestamp;
	}

	public void setLastUpdateTimestamp(Object lastUpdateTimestamp) {
		if(lastUpdateTimestamp instanceof Date) {
			this.lastUpdateTimestamp = EpochTime.fetchEpochFromDate((Date) lastUpdateTimestamp);
		}else{
			this.lastUpdateTimestamp = (long)lastUpdateTimestamp;
		}
	}

	public String getConfigType() {
		return configType;
	}

	public void setConfigType(String configType) {
		this.configType = configType;
	}

	public String getRecordOwner() {
		return recordOwner;
	}

	public void setRecordOwner(String recordOwner) {
		this.recordOwner = recordOwner;
	}

	public String getConfigurationJsonDocList() {
		return configurationJsonDocList;
	}

	public void setConfigurationJsonDocList(String configurationJsonDocList) {
		this.configurationJsonDocList = configurationJsonDocList;
	}

}
