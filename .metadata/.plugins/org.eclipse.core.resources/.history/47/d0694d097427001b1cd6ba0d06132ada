// Copyright 2018 (C), Oracle and/or its affiliates. All rights reserved.

package com.oracle.oci.votingservice.rest;

import java.net.URI;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;


import javax.validation.Valid;

import com.oracle.oci.votingservice.domain.ProblemDetails ;
import com.oracle.oci.votingservice.domain.InvalidParam;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.RestController;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.oracle.oci.votingservice.domain.CandidateData;
import com.oracle.oci.votingservice.domain.RegistrationData;

import com.oracle.oci.votingservice.domain.VoteData;
import com.oracle.oci.votingservice.service.OciVotingServiceImpl;
@RestController()
public class OciVotingServiceApiController implements OciVotingServiceApi {
	private static Logger logger = LogManager.getLogger(OciVotingServiceApiController.class);

	private final ObjectMapper objectMapper;
	
	@Autowired
	OciVotingServiceImpl ociVotingService;
	
	@Autowired
	public OciVotingServiceApiController(ObjectMapper objectMapper) {
		this.objectMapper = objectMapper;
		this.objectMapper.setSerializationInclusion(Include.NON_NULL);
		this.objectMapper.setSerializationInclusion(Include.NON_EMPTY);
		
	}

	@Override
	public ResponseEntity<Object> registerVoter(Long voterId, @Valid RegistrationData body,
			BindingResult bindingResult) {
		Map<String, Object> logMsg = new LinkedHashMap<String, Object>();
		logMsg.clear();
		logMsg.put("logMsg", "Voter registration request received");
		logMsg.put("RegistrationData", body);
		logger.info(logMsg.toString());
		if(bindingResult.hasErrors()) {
			ProblemDetails prob = ProblemDetails.forBadRequest();
			List<ObjectError> errList = bindingResult.getAllErrors();
			ListIterator<ObjectError> it = errList.listIterator();
			while(it.hasNext()) {
				prob.setCause("Invalid input data");
				ObjectError err = it.next();
				if(err instanceof FieldError) {
					FieldError fErr = (FieldError) err;
					prob.addInvalidParam(new InvalidParam(fErr.getField(), fErr.getDefaultMessage()));
				}
				else {
					prob.setDetail(err.getDefaultMessage());
				}
			}
			
		}
		Object retVal = ociVotingService.createOrUpdateVoterRecord(body,voterId);
		URI loc = null;
		if(retVal instanceof RegistrationData)
		{
			logMsg.clear();
			logMsg.put("logMsg", "Voter registration success!");
			logMsg.put("retVal", retVal);
			logger.info(logMsg.toString());
			return ResponseEntity.created(loc).body((RegistrationData)retVal);
		}
		else
		{
			ProblemDetails probDetails = ProblemDetails.forInternalError();
			logMsg.clear();
			logMsg.put("logMsg", "Voter registration failed!");
			logMsg.put("probDetails", probDetails);
			logger.info(logMsg.toString());
			return ResponseEntity.status(probDetails.getStatus()).
					contentType(MediaType.APPLICATION_PROBLEM_JSON).body(probDetails);
		}

	}	
	

	@Override
	public ResponseEntity<Object> registerCandidate(Long candidateId, @Valid CandidateData body,
			BindingResult bindingResult) {
		Map<String, Object> logMsg = new LinkedHashMap<String, Object>();
		logMsg.clear();
		logMsg.put("logMsg", "Candidate Registration request received");
		logMsg.put("CandidateData", body);
		logger.info(logMsg.toString());
		Object retVal = ociVotingService.createOrUpdateCandidateRecord(body, candidateId);
		URI loc = null;
		if(retVal instanceof CandidateData)
		{
			logMsg.clear();
			logMsg.put("logMsg", "Candidate registration success!");
			logMsg.put("retVal", retVal);
			logger.info(logMsg.toString());
			return ResponseEntity.created(loc).body((CandidateData)retVal);
		}
		else
		{
			ProblemDetails probDetails = ProblemDetails.forInternalError();
			logMsg.clear();
			logMsg.put("logMsg", "Candidate registration failed!");
			logMsg.put("probDetails", probDetails);
			logger.info(logMsg.toString());
			return ResponseEntity.status(probDetails.getStatus()).
					contentType(MediaType.APPLICATION_PROBLEM_JSON).body(probDetails);
		}
	}


	@Override
	public ResponseEntity<Object> castVote(Long voterId, VoteData body, BindingResult bindingResult) 
	{
		Map<String, Object> logMsg = new LinkedHashMap<String, Object>();
		logMsg.clear();
		logMsg.put("logMsg", "request received for casting vote");
		logMsg.put("VoteData", body);
		logger.info(logMsg.toString());	
		Object retVal = ociVotingService.updateVotes(body);
		
		logger.info(logMsg.toString());	
		if(retVal instanceof VoteData)
		{
			logMsg.clear();
			logMsg.put("logMsg", "vote casted with success");
			logMsg.put("VoteData", body);
			return ResponseEntity.ok().body((VoteData)retVal);
		}
		else
		{
			ProblemDetails probDetails = (ProblemDetails)retVal;
			logMsg.clear();
			logMsg.put("logMsg", "vote casting failed!");
			logMsg.put("probDetails", probDetails);
			logger.info(logMsg.toString());
			return ResponseEntity.status(probDetails.getStatus()).
					contentType(MediaType.APPLICATION_PROBLEM_JSON).body(probDetails);
		}
	}

	@Override
	public ResponseEntity<Object> getCandidates() {
		Map<String, Object> logMsg = new LinkedHashMap<String, Object>();		
		logMsg.clear();
		logMsg.put("logMsg", "candidate list retreival request received");
		logger.info(logMsg.toString());
		Object retVal = ociVotingService.getAllCandidates();
		
		logMsg.clear();
		logMsg.put("logMsg", "request received for accessing candidate records");
		logger.info(logMsg.toString());	
		
		if(retVal instanceof List)
		{
			return ResponseEntity.ok().
					body(retVal);
		}
		else
		{
			ProblemDetails probDetails = ProblemDetails.forInternalError();
			logMsg.clear();
			logMsg.put("logMsg", "vote casting failed!");
			logMsg.put("probDetails", probDetails);
			logger.info(logMsg.toString());
			return ResponseEntity.status(probDetails.getStatus()).
					contentType(MediaType.APPLICATION_PROBLEM_JSON).body(probDetails);
		}
	}

	
     /*This api will be called at the time of login*/
	@Override
	public ResponseEntity<Object> getVoterRegistrationData(Long voterId) {
		Map<String, Object> logMsg = new LinkedHashMap<String, Object>();
		logMsg.clear();
		logMsg.put("logMsg", "request received for accessing voter data");
		logMsg.put("voterId", voterId);
		logger.info(logMsg.toString());	
		Object retVal = ociVotingService.getVoterRegistrationData(voterId);
		if(retVal instanceof RegistrationData)
		{
			return ResponseEntity.ok().body((RegistrationData)retVal);
		}
		else
		{
			ProblemDetails probDetails = (ProblemDetails)retVal;
			return ResponseEntity.status(probDetails.getStatus()).
					contentType(MediaType.APPLICATION_PROBLEM_JSON).body(probDetails);
		}
	}



	

	
	
			
}
